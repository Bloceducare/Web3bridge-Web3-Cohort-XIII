/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Storage {
  export type EmployeeStruct = {
    name: string;
    isEmployed: boolean;
    role: BigNumberish;
    salary: BigNumberish;
    paidSoFar: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    isEmployed: boolean,
    role: bigint,
    salary: bigint,
    paidSoFar: bigint
  ] & {
    name: string;
    isEmployed: boolean;
    role: bigint;
    salary: bigint;
    paidSoFar: bigint;
  };
}

export interface EmployeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disburseSalary"
      | "getAllUsers"
      | "getUser"
      | "registerUser"
      | "remainingSalary"
      | "updateUser"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SalaryPaid"): EventFragment;

  encodeFunctionData(
    functionFragment: "disburseSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingSalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "disburseSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace SalaryPaidEvent {
  export type InputTuple = [employee: AddressLike, amount: BigNumberish];
  export type OutputTuple = [employee: string, amount: bigint];
  export interface OutputObject {
    employee: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Employee extends BaseContract {
  connect(runner?: ContractRunner | null): Employee;
  waitForDeployment(): Promise<this>;

  interface: EmployeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disburseSalary: TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  getAllUsers: TypedContractMethod<
    [],
    [Storage.EmployeeStructOutput[]],
    "view"
  >;

  getUser: TypedContractMethod<
    [_owner: AddressLike],
    [Storage.EmployeeStructOutput],
    "view"
  >;

  registerUser: TypedContractMethod<
    [_name: string, _role: BigNumberish, _salary: BigNumberish],
    [void],
    "nonpayable"
  >;

  remainingSalary: TypedContractMethod<
    [_employee: AddressLike],
    [bigint],
    "view"
  >;

  updateUser: TypedContractMethod<
    [
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disburseSalary"
  ): TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [Storage.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [Storage.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_name: string, _role: BigNumberish, _salary: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remainingSalary"
  ): TypedContractMethod<[_employee: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateUser"
  ): TypedContractMethod<
    [
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SalaryPaid"
  ): TypedContractEvent<
    SalaryPaidEvent.InputTuple,
    SalaryPaidEvent.OutputTuple,
    SalaryPaidEvent.OutputObject
  >;

  filters: {
    "SalaryPaid(address,uint256)": TypedContractEvent<
      SalaryPaidEvent.InputTuple,
      SalaryPaidEvent.OutputTuple,
      SalaryPaidEvent.OutputObject
    >;
    SalaryPaid: TypedContractEvent<
      SalaryPaidEvent.InputTuple,
      SalaryPaidEvent.OutputTuple,
      SalaryPaidEvent.OutputObject
    >;
  };
}
