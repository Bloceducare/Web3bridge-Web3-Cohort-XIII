/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ERC20Standard,
  ERC20StandardInterface,
} from "../../contracts/ERC20Standard";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimal",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addy",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "trasferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015113803806200151183398181016040528101906200003791906200037e565b846005908162000048919062000685565b5083600490816200005a919062000685565b5082600360146101000a81548160ff021916908360ff1602179055508160008190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050506200076c565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000176826200012b565b810181811067ffffffffffffffff821117156200019857620001976200013c565b5b80604052505050565b6000620001ad6200010d565b9050620001bb82826200016b565b919050565b600067ffffffffffffffff821115620001de57620001dd6200013c565b5b620001e9826200012b565b9050602081019050919050565b60005b8381101562000216578082015181840152602081019050620001f9565b60008484015250505050565b6000620002396200023384620001c0565b620001a1565b90508281526020810184848401111562000258576200025762000126565b5b62000265848285620001f6565b509392505050565b600082601f83011262000285576200028462000121565b5b81516200029784826020860162000222565b91505092915050565b600060ff82169050919050565b620002b881620002a0565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b6000819050919050565b620002f381620002de565b8114620002ff57600080fd5b50565b6000815190506200031381620002e8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003468262000319565b9050919050565b620003588162000339565b81146200036457600080fd5b50565b60008151905062000378816200034d565b92915050565b600080600080600060a086880312156200039d576200039c62000117565b5b600086015167ffffffffffffffff811115620003be57620003bd6200011c565b5b620003cc888289016200026d565b955050602086015167ffffffffffffffff811115620003f057620003ef6200011c565b5b620003fe888289016200026d565b94505060406200041188828901620002c7565b9350506060620004248882890162000302565b9250506080620004378882890162000367565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049757607f821691505b602082108103620004ad57620004ac6200044f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004d8565b620005238683620004d8565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000566620005606200055a84620002de565b6200053b565b620002de565b9050919050565b6000819050919050565b620005828362000545565b6200059a62000591826200056d565b848454620004e5565b825550505050565b600090565b620005b1620005a2565b620005be81848462000577565b505050565b5b81811015620005e657620005da600082620005a7565b600181019050620005c4565b5050565b601f8211156200063557620005ff81620004b3565b6200060a84620004c8565b810160208510156200061a578190505b620006326200062985620004c8565b830182620005c3565b50505b505050565b600082821c905092915050565b60006200065a600019846008026200063a565b1980831691505092915050565b600062000675838362000647565b9150826002028217905092915050565b620006908262000444565b67ffffffffffffffff811115620006ac57620006ab6200013c565b5b620006b882546200047e565b620006c5828285620005ea565b600060209050601f831160018114620006fd5760008415620006e8578287015190505b620006f4858262000667565b86555062000764565b601f1984166200070d86620004b3565b60005b82811015620007375784890151825560018201915060208501945060208101905062000710565b8683101562000757578489015162000753601f89168262000647565b8355505b6001600288020188555050505b505050505050565b610d95806200077c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806370a082311161006657806370a082311461013457806376809ce31461016457806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e6578063666b604114610104575b600080fd5b6100a0610200565b6040516100ad9190610909565b60405180910390f35b6100d060048036038101906100cb91906109c4565b610292565b6040516100dd9190610a1f565b60405180910390f35b6100ee61031f565b6040516100fb9190610a49565b60405180910390f35b61011e60048036038101906101199190610a64565b610328565b60405161012b9190610a1f565b60405180910390f35b61014e60048036038101906101499190610ab7565b6105c1565b60405161015b9190610a49565b60405180910390f35b61016c61060a565b6040516101799190610a49565b60405180910390f35b61018a610624565b6040516101979190610909565b60405180910390f35b6101ba60048036038101906101b591906109c4565b6106b6565b6040516101c79190610a1f565b60405180910390f35b6101ea60048036038101906101e59190610ae4565b6107ef565b6040516101f79190610a49565b60405180910390f35b60606005805461020f90610b53565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610b53565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008054905090565b6000803073ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016103649190610b93565b602060405180830381865afa158015610381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190610bc3565b90506000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838211801561043657508381115b610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c90610c3c565b60405180910390fd5b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c49190610c8b565b9250508190555083600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105579190610c8b565b9250508190555083600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ad9190610cbf565b925050819055506001925050509392505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360149054906101000a900460ff1660ff16905090565b60606004805461063390610b53565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90610b53565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b5050505050905090565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090610d3f565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107889190610c8b565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107de9190610cbf565b925050819055506001905092915050565b6000339250600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108b3578082015181840152602081019050610898565b60008484015250505050565b6000601f19601f8301169050919050565b60006108db82610879565b6108e58185610884565b93506108f5818560208601610895565b6108fe816108bf565b840191505092915050565b6000602082019050818103600083015261092381846108d0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061095b82610930565b9050919050565b61096b81610950565b811461097657600080fd5b50565b60008135905061098881610962565b92915050565b6000819050919050565b6109a18161098e565b81146109ac57600080fd5b50565b6000813590506109be81610998565b92915050565b600080604083850312156109db576109da61092b565b5b60006109e985828601610979565b92505060206109fa858286016109af565b9150509250929050565b60008115159050919050565b610a1981610a04565b82525050565b6000602082019050610a346000830184610a10565b92915050565b610a438161098e565b82525050565b6000602082019050610a5e6000830184610a3a565b92915050565b600080600060608486031215610a7d57610a7c61092b565b5b6000610a8b86828701610979565b9350506020610a9c86828701610979565b9250506040610aad868287016109af565b9150509250925092565b600060208284031215610acd57610acc61092b565b5b6000610adb84828501610979565b91505092915050565b60008060408385031215610afb57610afa61092b565b5b6000610b0985828601610979565b9250506020610b1a85828601610979565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b6b57607f821691505b602082108103610b7e57610b7d610b24565b5b50919050565b610b8d81610950565b82525050565b6000602082019050610ba86000830184610b84565b92915050565b600081519050610bbd81610998565b92915050565b600060208284031215610bd957610bd861092b565b5b6000610be784828501610bae565b91505092915050565b7f596f7520646f6e2774206861766520656e6f7567682070726976696c65646765600082015250565b6000610c26602083610884565b9150610c3182610bf0565b602082019050919050565b60006020820190508181036000830152610c5581610c19565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c968261098e565b9150610ca18361098e565b9250828203905081811115610cb957610cb8610c5c565b5b92915050565b6000610cca8261098e565b9150610cd58361098e565b9250828201905080821115610ced57610cec610c5c565b5b92915050565b7f596f75277265206c6f77206f6e20746f6b656e2062616c616e63650000000000600082015250565b6000610d29601b83610884565b9150610d3482610cf3565b602082019050919050565b60006020820190508181036000830152610d5881610d1c565b905091905056fea264697066735822122010962a20535e7879f20997c02c6d838ca1886fafb41337398a167e7104803a6f64736f6c63430008140033";

type ERC20StandardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20StandardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Standard__factory extends ContractFactory {
  constructor(...args: ERC20StandardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimal: BigNumberish,
    _totalSupply: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimal,
      _totalSupply,
      _owner,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _decimal: BigNumberish,
    _totalSupply: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _name,
      _symbol,
      _decimal,
      _totalSupply,
      _owner,
      overrides || {}
    ) as Promise<
      ERC20Standard & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Standard__factory {
    return super.connect(runner) as ERC20Standard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20StandardInterface {
    return new Interface(_abi) as ERC20StandardInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC20Standard {
    return new Contract(address, _abi, runner) as unknown as ERC20Standard;
  }
}
