/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IStaffSalaryManager {
  export type StaffStruct = {
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
    role: BigNumberish;
  };

  export type StaffStructOutput = [
    name: string,
    salary: bigint,
    status: bigint,
    role: bigint
  ] & { name: string; salary: bigint; status: bigint; role: bigint };
}

export interface StaffSalaryManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStaff"
      | "addressToStaff"
      | "allStaff"
      | "getStaff"
      | "getTotalStaffs"
      | "owner"
      | "paySalary"
      | "updateStaff"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStaff",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allStaff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaffs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paySalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStaff",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStaff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToStaff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allStaff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStaff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStaff",
    data: BytesLike
  ): Result;
}

export interface StaffSalaryManager extends BaseContract {
  connect(runner?: ContractRunner | null): StaffSalaryManager;
  waitForDeployment(): Promise<this>;

  interface: StaffSalaryManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStaff: TypedContractMethod<
    [_address: AddressLike, _name: string, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  addressToStaff: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        status: bigint;
        role: bigint;
      }
    ],
    "view"
  >;

  allStaff: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        status: bigint;
        role: bigint;
      }
    ],
    "view"
  >;

  getStaff: TypedContractMethod<
    [_address: AddressLike],
    [IStaffSalaryManager.StaffStructOutput],
    "view"
  >;

  getTotalStaffs: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paySalary: TypedContractMethod<
    [_staffAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStaff: TypedContractMethod<
    [_address: AddressLike, _status: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStaff"
  ): TypedContractMethod<
    [_address: AddressLike, _name: string, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addressToStaff"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        status: bigint;
        role: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "allStaff"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        status: bigint;
        role: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStaff"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IStaffSalaryManager.StaffStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStaffs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<[_staffAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStaff"
  ): TypedContractMethod<
    [_address: AddressLike, _status: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
