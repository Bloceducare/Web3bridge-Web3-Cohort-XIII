/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Web3BridgeGarage {
  export type EmployeeStruct = {
    name: string;
    role: BigNumberish;
    isEmployed: boolean;
    exists: boolean;
  };

  export type EmployeeStructOutput = [
    name: string,
    role: bigint,
    isEmployed: boolean,
    exists: boolean
  ] & { name: string; role: bigint; isEmployed: boolean; exists: boolean };
}

export interface Web3BridgeGarageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOrUpdateEmployee"
      | "canAccessGarage"
      | "employeeExistsCheck"
      | "getAllEmployees"
      | "getEmployee"
      | "getEmployeeCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EmployeeAdded" | "EmployeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOrUpdateEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeExistsCheck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addOrUpdateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeExistsCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeCount",
    data: BytesLike
  ): Result;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [
    employeeAddress: AddressLike,
    name: string,
    role: BigNumberish
  ];
  export type OutputTuple = [
    employeeAddress: string,
    name: string,
    role: bigint
  ];
  export interface OutputObject {
    employeeAddress: string;
    name: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeUpdatedEvent {
  export type InputTuple = [
    employeeAddress: AddressLike,
    name: string,
    role: BigNumberish,
    isEmployed: boolean
  ];
  export type OutputTuple = [
    employeeAddress: string,
    name: string,
    role: bigint,
    isEmployed: boolean
  ];
  export interface OutputObject {
    employeeAddress: string;
    name: string;
    role: bigint;
    isEmployed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Web3BridgeGarage extends BaseContract {
  connect(runner?: ContractRunner | null): Web3BridgeGarage;
  waitForDeployment(): Promise<this>;

  interface: Web3BridgeGarageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOrUpdateEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;

  canAccessGarage: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  employeeExistsCheck: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  getAllEmployees: TypedContractMethod<[], [string[]], "view">;

  getEmployee: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Web3BridgeGarage.EmployeeStructOutput],
    "view"
  >;

  getEmployeeCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOrUpdateEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "employeeExistsCheck"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Web3BridgeGarage.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeUpdated"
  ): TypedContractEvent<
    EmployeeUpdatedEvent.InputTuple,
    EmployeeUpdatedEvent.OutputTuple,
    EmployeeUpdatedEvent.OutputObject
  >;

  filters: {
    "EmployeeAdded(address,string,uint8)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;

    "EmployeeUpdated(address,string,uint8,bool)": TypedContractEvent<
      EmployeeUpdatedEvent.InputTuple,
      EmployeeUpdatedEvent.OutputTuple,
      EmployeeUpdatedEvent.OutputObject
    >;
    EmployeeUpdated: TypedContractEvent<
      EmployeeUpdatedEvent.InputTuple,
      EmployeeUpdatedEvent.OutputTuple,
      EmployeeUpdatedEvent.OutputObject
    >;
  };
}
