/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DudenNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createCollection"
      | "createMultipleCollections"
      | "deployedCollections"
      | "getAllCollections"
      | "getCollectionDetails"
      | "getUserCollectionCount"
      | "getUserCollections"
      | "totalCollections"
      | "userCollections"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMultipleCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedCollections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollectionCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollections",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userCollections",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMultipleCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollectionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollections",
    data: BytesLike
  ): Result;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    collectionAddress: AddressLike,
    creator: AddressLike,
    name: string,
    symbol: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    collectionAddress: string,
    creator: string,
    name: string,
    symbol: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    collectionAddress: string;
    creator: string;
    name: string;
    symbol: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DudenNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DudenNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: DudenNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createCollection: TypedContractMethod<[], [string], "nonpayable">;

  createMultipleCollections: TypedContractMethod<
    [count: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  deployedCollections: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getAllCollections: TypedContractMethod<[], [string[]], "view">;

  getCollectionDetails: TypedContractMethod<
    [collectionIndex: BigNumberish],
    [
      [string, string, string, string] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
      }
    ],
    "view"
  >;

  getUserCollectionCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserCollections: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  totalCollections: TypedContractMethod<[], [bigint], "view">;

  userCollections: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createMultipleCollections"
  ): TypedContractMethod<[count: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "deployedCollections"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllCollections"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCollectionDetails"
  ): TypedContractMethod<
    [collectionIndex: BigNumberish],
    [
      [string, string, string, string] & {
        collectionAddress: string;
        creator: string;
        name: string;
        symbol: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCollectionCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserCollections"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "totalCollections"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCollections"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;

  filters: {
    "CollectionCreated(address,address,string,string,uint256)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
  };
}
