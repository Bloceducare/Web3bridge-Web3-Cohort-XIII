{"abi":[{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"accountId","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"entryPoint","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEntryPoint"}],"stateMutability":"view"},{"type":"function","name":"execute","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"executeFromExecutor","inputs":[{"name":"mode","type":"bytes32","internalType":"bytes32"},{"name":"executionCalldata","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"returnData","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"function","name":"getNonce","inputs":[{"name":"key","type":"uint192","internalType":"uint192"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"installModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"initData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isModuleInstalled","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"additionalContext","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isValidSignature","inputs":[{"name":"hash","type":"bytes32","internalType":"bytes32"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"supportsExecutionMode","inputs":[{"name":"encodedMode","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"supportsModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"uninstallModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"},{"name":"deInitData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"validateUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct PackedUserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"accountGasLimits","type":"bytes32","internalType":"bytes32"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"gasFees","type":"bytes32","internalType":"bytes32"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"},{"name":"missingAccountFunds","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"event","name":"ERC7579TryExecuteFail","inputs":[{"name":"batchExecutionIndex","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"returndata","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"ModuleInstalled","inputs":[{"name":"moduleTypeId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"module","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ModuleUninstalled","inputs":[{"name":"moduleTypeId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"module","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AccountUnauthorized","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"ERC7579AlreadyInstalledModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"}]},{"type":"error","name":"ERC7579DecodingError","inputs":[]},{"type":"error","name":"ERC7579MismatchedModuleTypeId","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"}]},{"type":"error","name":"ERC7579MissingFallbackHandler","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}]},{"type":"error","name":"ERC7579UninstalledModule","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"},{"name":"module","type":"address","internalType":"address"}]},{"type":"error","name":"ERC7579UnsupportedCallType","inputs":[{"name":"callType","type":"bytes1","internalType":"CallType"}]},{"type":"error","name":"ERC7579UnsupportedExecType","inputs":[{"name":"execType","type":"bytes1","internalType":"ExecType"}]},{"type":"error","name":"ERC7579UnsupportedModuleType","inputs":[{"name":"moduleTypeId","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"FailedCall","inputs":[]},{"type":"error","name":"OutOfRangeAccess","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"accountId()":"9cfd7cff","entryPoint()":"b0d691fe","execute(bytes32,bytes)":"e9ae5c53","executeFromExecutor(bytes32,bytes)":"d691c964","getNonce()":"d087d288","getNonce(uint192)":"3e1b0812","installModule(uint256,address,bytes)":"9517e29f","isModuleInstalled(uint256,address,bytes)":"112d3a7d","isValidSignature(bytes32,bytes)":"1626ba7e","supportsExecutionMode(bytes32)":"d03c7914","supportsModule(uint256)":"f2dc691d","uninstallModule(uint256,address,bytes)":"a71763a8","validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":"19822f7c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AccountUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579AlreadyInstalledModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC7579DecodingError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579MismatchedModuleTypeId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ERC7579MissingFallbackHandler\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579UninstalledModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"CallType\",\"name\":\"callType\",\"type\":\"bytes1\"}],\"name\":\"ERC7579UnsupportedCallType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"ExecType\",\"name\":\"execType\",\"type\":\"bytes1\"}],\"name\":\"ERC7579UnsupportedExecType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"}],\"name\":\"ERC7579UnsupportedModuleType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRangeAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchExecutionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returndata\",\"type\":\"bytes\"}],\"name\":\"ERC7579TryExecuteFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleUninstalled\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"executeFromExecutor\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"installModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalContext\",\"type\":\"bytes\"}],\"name\":\"isModuleInstalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encodedMode\",\"type\":\"bytes32\"}],\"name\":\"supportsExecutionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"}],\"name\":\"supportsModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deInitData\",\"type\":\"bytes\"}],\"name\":\"uninstallModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Extension of {Account} that implements support for ERC-7579 modules. To comply with the ERC-1271 support requirement, this contract defers signature validation to installed validator modules by calling {IERC7579Validator-isValidSignatureWithSender}. This contract does not implement validation logic for user operations since this functionality is often delegated to self-contained validation modules. Developers must install a validator module upon initialization (or any other mechanism to enable execution from the account): ```solidity contract MyAccountERC7579 is AccountERC7579, Initializable {   function initializeAccount(address validator, bytes calldata validatorData) public initializer {     _installModule(MODULE_TYPE_VALIDATOR, validator, validatorData);   } } ``` [NOTE] ==== * Hook support is not included. See {AccountERC7579Hooked} for a version that hooks to execution. * Validator selection, when verifying either ERC-1271 signature or ERC-4337 UserOperation is implemented in   internal virtual functions {_extractUserOpValidator} and {_extractSignatureValidator}. Both are implemented   following common practices. However, this part is not standardized in ERC-7579 (or in any follow-up ERC). Some   accounts may want to override these internal functions. * When combined with {ERC7739}, resolution ordering of {isValidSignature} may have an impact ({ERC7739} does not   call super). Manual resolution might be necessary. * Static calls (using callType `0xfe`) are currently NOT supported. ==== WARNING: Removing all validator modules will render the account inoperable, as no user operations can be validated thereafter.\",\"errors\":{\"AccountUnauthorized(address)\":[{\"details\":\"Unauthorized call to the account.\"}],\"ERC7579AlreadyInstalledModule(uint256,address)\":[{\"details\":\"The module is already installed.\"}],\"ERC7579DecodingError()\":[{\"details\":\"Input calldata not properly formatted and possibly malicious.\"}],\"ERC7579MismatchedModuleTypeId(uint256,address)\":[{\"details\":\"The provided module doesn't match the provided module type.\"}],\"ERC7579MissingFallbackHandler(bytes4)\":[{\"details\":\"The account's {fallback} was called with a selector that doesn't have an installed handler.\"}],\"ERC7579UninstalledModule(uint256,address)\":[{\"details\":\"The module is not installed.\"}],\"ERC7579UnsupportedCallType(bytes1)\":[{\"details\":\"The provided {CallType} is not supported.\"}],\"ERC7579UnsupportedExecType(bytes1)\":[{\"details\":\"The provided {ExecType} is not supported.\"}],\"ERC7579UnsupportedModuleType(uint256)\":[{\"details\":\"The module type is not supported.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"events\":{\"ERC7579TryExecuteFail(uint256,bytes)\":{\"details\":\"Emits when an {EXECTYPE_TRY} execution fails.\",\"params\":{\"batchExecutionIndex\":\"The index of the failed call in the execution batch.\",\"returndata\":\"The returned data from the failed call.\"}}},\"kind\":\"dev\",\"methods\":{\"accountId()\":{\"details\":\"Returns the account id of the smart account\",\"returns\":{\"_0\":\"the account id of the smart account MUST return a non-empty string The accountId SHOULD be structured like so:        \\\"vendorname.accountname.semver\\\" The id SHOULD be unique across all smart accounts\"}},\"entryPoint()\":{\"details\":\"Canonical entry point for the account that forwards and validates user operations.\"},\"execute(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.\",\"params\":{\"executionCalldata\":\"The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"}},\"executeFromExecutor(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules\",\"params\":{\"executionCalldata\":\"The encoded execution call data\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"},\"returns\":{\"returnData\":\"An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert\"}},\"getNonce()\":{\"details\":\"Return the account nonce for the canonical sequence.\"},\"getNonce(uint192)\":{\"details\":\"Return the account nonce for a given sequence (key).\"},\"installModule(uint256,address,bytes)\":{\"details\":\"Installs a Module of a certain type on the smart account\",\"params\":{\"initData\":\"arbitrary data that may be passed to the module during `onInstall` initialization. MUST implement authorization control MUST call `onInstall` on the module with the `initData` parameter if provided MUST emit ModuleInstalled event MUST revert if the module is already installed or the initialization on the module failed\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according to the ERC-7579 spec\"}},\"isModuleInstalled(uint256,address,bytes)\":{\"details\":\"Returns whether a module is installed on the smart account\",\"params\":{\"additionalContext\":\"arbitrary data that may be passed to determine if the module is installed MUST return true if the module is installed and false otherwise\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Implement ERC-1271 through IERC7579Validator modules. If module based validation fails, fallback to \\\"native\\\" validation by the abstract signer. NOTE: when combined with {ERC7739}, resolution ordering may have an impact ({ERC7739} does not call super). Manual resolution might be necessary.\"},\"supportsExecutionMode(bytes32)\":{\"details\":\"Supported call types: * Single (`0x00`): A single transaction execution. * Batch (`0x01`): A batch of transactions execution. * Delegate (`0xff`): A delegate call execution. Supported exec types: * Default (`0x00`): Default execution type (revert on failure). * Try (`0x01`): Try execution type (emits ERC7579TryExecuteFail on failure).\",\"params\":{\"encodedMode\":\"the encoded mode MUST return true if the account supports the mode and false otherwise\"}},\"supportsModule(uint256)\":{\"details\":\"Supported module types: * Validator: A module used during the validation phase to determine if a transaction is valid and should be executed on the account. * Executor: A module that can execute transactions on behalf of the smart account via a callback. * Fallback Handler: A module that can extend the fallback functionality of a smart account.\",\"params\":{\"moduleTypeId\":\"the module type ID according to the ERC-7579 spec MUST return true if the account supports the module type and false otherwise\"}},\"uninstallModule(uint256,address,bytes)\":{\"details\":\"Uninstalls a Module of a certain type on the smart account\",\"params\":{\"deInitData\":\"arbitrary data that may be passed to the module during `onUninstall` deinitialization. MUST implement authorization control MUST call `onUninstall` on the module with the `deInitData` parameter if provided MUST emit ModuleUninstalled event MUST revert if the module is not installed or the deInitialization on the module failed\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"details\":\"Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the \\u201cmissingAccountFunds\\u201d (which might   be zero, in case the current account\\u2019s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for \\u201cinfinite\\u201d. - `validAfter` (`uint48`): The UserOp is valid only after this time.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/account/extensions/draft-AccountERC7579.sol\":\"AccountERC7579\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=contracts/\",\":erc4626-tests/=lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/halmos-cheatcodes/src/\"]},\"sources\":{\"contracts/account/Account.sol\":{\"keccak256\":\"0xb4fe7cd20e59aceed2c8c012575ec10e2581345d6a527ed3ccacf4f1630002b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eaead8a552a4b891be0f66f1fbf0c3579b1086149f57c1ebcc5c37d95d4af76f\",\"dweb:/ipfs/QmPjqoYKwij1qJ96hKGBUVJX7FBZdmJmsrpEiq9H8MzyRh\"]},\"contracts/account/extensions/draft-AccountERC7579.sol\":{\"keccak256\":\"0x71e7cb5c88bd370ac2abf06e2c426f22d6b0ea830593d4108d1c260387b172f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbad6518b5cb214398b1b685a85de4a64d3773e1a34ff6d0fc365065809edf6\",\"dweb:/ipfs/QmZ4Eu57xwp4QaLbGkGgkSGXkMLX1penndgtaePYoRWi81\"]},\"contracts/account/utils/draft-ERC4337Utils.sol\":{\"keccak256\":\"0xcfd37324ef8b32ec30eac68d26063758044b50dc2282ed14ed6229efd79eeb8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c80bf1c40c2ffc8fbbf3057ee91a9b10151a33aa210c10447ad53dce34f0e4b\",\"dweb:/ipfs/QmWKXw6SSQz9LF6eRNrbgWXkzBw82WD3JhN48EpFbJK9he\"]},\"contracts/account/utils/draft-ERC7579Utils.sol\":{\"keccak256\":\"0xa4e6947ca8521c0dada9e3dee7d441d274eb39edc899b594a4dfa18e91acc066\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60b8be0bca8305195c972ab9b54e6609c9487ed281dcdfce6dead9d35319dfae\",\"dweb:/ipfs/QmcwggrUnJ8Xf41FirR1QNQHrhWSyTZgXsV14pwcLWAF3k\"]},\"contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x66c7ec42c6c43712be2107a50ab4529379bc76a632b425babec698d9da921ac6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dce2778f0b638adfc5ba29c2c618c855fe725fa74a16846386aa1d56a834aa04\",\"dweb:/ipfs/QmPV9oWnzQdi58od266j62xvviavLNHqKLZfm6k2K1qy9E\"]},\"contracts/interfaces/draft-IERC4337.sol\":{\"keccak256\":\"0xc4c1b33f7f7ee592aa2ff5e7a184c400a9f9a34eeb501681cffe97e0faf0583d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed7189e2a50eba8c8b9d5505659fe8d2c136a6ce8b99486f2711925a1fc0068c\",\"dweb:/ipfs/QmaU747ZrNDaPW2UPsDLfmZU5Es6BqyPiB3Sfvi3pa4ZEr\"]},\"contracts/interfaces/draft-IERC7579.sol\":{\"keccak256\":\"0xab2822930f57c35ec15d64fae79d977f603d607d692ee70ec7d43bcbaca95aa7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af938c25a535b1fac2d343bc619cb839134e81c1ab5a2edac75185c238466dae\",\"dweb:/ipfs/QmQ7ge19AHMxaAkqdSPLNs7Xr9Q3AEviXEM34GBCRMuhZ4\"]},\"contracts/utils/Address.sol\":{\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://032d1201d839435be2c85b72e33206b3ea980c569d6ebf7fa57d811ab580a82f\",\"dweb:/ipfs/QmeqQjAtMvdZT2tG7zm39itcRJkuwu8AEReK6WRnLJ18DD\"]},\"contracts/utils/Arrays.sol\":{\"keccak256\":\"0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9344f7c2f80322c2e76d9d89bed03fd12f3e011e74fde7cf24ea21bdd2abe2d\",\"dweb:/ipfs/QmPMAjF5x2fHUAee2FKMZDBbFVrbZbPCr3a9KHLZaSn1zY\"]},\"contracts/utils/Bytes.sol\":{\"keccak256\":\"0x1613f93e376ab96791fd29f79da754e253c3d766831bc8c42f50545662f49065\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e88ee314d50d0f323616f88d0ccf5e4110dbdec2775d8d42523bcc8b76ed36eb\",\"dweb:/ipfs/QmQ18ygHRrDdz4AEZXy5PASUHvJk1SNWWKM3TyC1xvDedP\"]},\"contracts/utils/Calldata.sol\":{\"keccak256\":\"0xa557256a5cc28f1ff8abfdb082739dc847390c6d892f563fc071994a058f9a31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffd71e93eb6fae111e6bfa39303c9e09b7db7bc698170f5be627d1beb40f5462\",\"dweb:/ipfs/QmXZmiy9FB1GRH2eWZLefaosFvSVGCBg3iVoZvWbptC3f6\"]},\"contracts/utils/Comparators.sol\":{\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49ba706f1bc476d68fe6c1fad75517acea4e9e275be0989b548e292eb3a3eacd\",\"dweb:/ipfs/QmeBpvcdGWzWMKTQESUCEhHgnEQYYATVwPxLMxa6vMT7jC\"]},\"contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"contracts/utils/Packing.sol\":{\"keccak256\":\"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c\",\"dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw\"]},\"contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"contracts/utils/SlotDerivation.sol\":{\"keccak256\":\"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30192451f05ea5ddb0c18bd0f9003f098505836ba19c08a9c365adf829454da2\",\"dweb:/ipfs/QmfCuZSCTyCdFoSKn7MSaN6hZksnQn9ZhrZDAdRTCbwGu2\"]},\"contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"contracts/utils/cryptography/signers/AbstractSigner.sol\":{\"keccak256\":\"0x2e803d54b627d8ce2841c39e973f499be029a706f7157aee74adb648a27ecda9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62197d50f708cccc7f17509f54d429eb6921416f3695f08f1178bbb9ca5ce0c5\",\"dweb:/ipfs/QmeaUebF8obuUXwqFH4rhwTzUqa4A7z4S8TkHpWyUSrDo6\"]},\"contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x1fc283df727585919c3db301b948a3e827aee16917457ad7f916db9da2228e77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4f4b5e2cd0ebc3b74e41e4e94771a0417eedd9b11cec3ef9f90b2ac2989264b\",\"dweb:/ipfs/QmZmsEsvsXiwAyAe1YeoLSKezeFcvR1giUeEY6ex4zpsTS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"AccountUnauthorized"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"}],"type":"error","name":"ERC7579AlreadyInstalledModule"},{"inputs":[],"type":"error","name":"ERC7579DecodingError"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"}],"type":"error","name":"ERC7579MismatchedModuleTypeId"},{"inputs":[{"internalType":"bytes4","name":"selector","type":"bytes4"}],"type":"error","name":"ERC7579MissingFallbackHandler"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"}],"type":"error","name":"ERC7579UninstalledModule"},{"inputs":[{"internalType":"CallType","name":"callType","type":"bytes1"}],"type":"error","name":"ERC7579UnsupportedCallType"},{"inputs":[{"internalType":"ExecType","name":"execType","type":"bytes1"}],"type":"error","name":"ERC7579UnsupportedExecType"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"}],"type":"error","name":"ERC7579UnsupportedModuleType"},{"inputs":[],"type":"error","name":"FailedCall"},{"inputs":[],"type":"error","name":"OutOfRangeAccess"},{"inputs":[{"internalType":"uint256","name":"batchExecutionIndex","type":"uint256","indexed":false},{"internalType":"bytes","name":"returndata","type":"bytes","indexed":false}],"type":"event","name":"ERC7579TryExecuteFail","anonymous":false},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256","indexed":false},{"internalType":"address","name":"module","type":"address","indexed":false}],"type":"event","name":"ModuleInstalled","anonymous":false},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256","indexed":false},{"internalType":"address","name":"module","type":"address","indexed":false}],"type":"event","name":"ModuleUninstalled","anonymous":false},{"inputs":[],"stateMutability":"payable","type":"fallback"},{"inputs":[],"stateMutability":"view","type":"function","name":"accountId","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"execute"},{"inputs":[{"internalType":"bytes32","name":"mode","type":"bytes32"},{"internalType":"bytes","name":"executionCalldata","type":"bytes"}],"stateMutability":"payable","type":"function","name":"executeFromExecutor","outputs":[{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}]},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"initData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"installModule"},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"additionalContext","type":"bytes"}],"stateMutability":"view","type":"function","name":"isModuleInstalled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"view","type":"function","name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[{"internalType":"bytes32","name":"encodedMode","type":"bytes32"}],"stateMutability":"view","type":"function","name":"supportsExecutionMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"supportsModule","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"moduleTypeId","type":"uint256"},{"internalType":"address","name":"module","type":"address"},{"internalType":"bytes","name":"deInitData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"uninstallModule"},{"inputs":[{"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"validateUserOp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"accountId()":{"details":"Returns the account id of the smart account","returns":{"_0":"the account id of the smart account MUST return a non-empty string The accountId SHOULD be structured like so:        \"vendorname.accountname.semver\" The id SHOULD be unique across all smart accounts"}},"entryPoint()":{"details":"Canonical entry point for the account that forwards and validates user operations."},"execute(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.","params":{"executionCalldata":"The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"}},"executeFromExecutor(bytes32,bytes)":{"details":"Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules","params":{"executionCalldata":"The encoded execution call data","mode":"The encoded execution mode of the transaction. See ModeLib.sol for details"},"returns":{"returnData":"An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert"}},"getNonce()":{"details":"Return the account nonce for the canonical sequence."},"getNonce(uint192)":{"details":"Return the account nonce for a given sequence (key)."},"installModule(uint256,address,bytes)":{"details":"Installs a Module of a certain type on the smart account","params":{"initData":"arbitrary data that may be passed to the module during `onInstall` initialization. MUST implement authorization control MUST call `onInstall` on the module with the `initData` parameter if provided MUST emit ModuleInstalled event MUST revert if the module is already installed or the initialization on the module failed","module":"the module address","moduleTypeId":"the module type ID according to the ERC-7579 spec"}},"isModuleInstalled(uint256,address,bytes)":{"details":"Returns whether a module is installed on the smart account","params":{"additionalContext":"arbitrary data that may be passed to determine if the module is installed MUST return true if the module is installed and false otherwise","module":"the module address","moduleTypeId":"the module type ID according the ERC-7579 spec"}},"isValidSignature(bytes32,bytes)":{"details":"Implement ERC-1271 through IERC7579Validator modules. If module based validation fails, fallback to \"native\" validation by the abstract signer. NOTE: when combined with {ERC7739}, resolution ordering may have an impact ({ERC7739} does not call super). Manual resolution might be necessary."},"supportsExecutionMode(bytes32)":{"details":"Supported call types: * Single (`0x00`): A single transaction execution. * Batch (`0x01`): A batch of transactions execution. * Delegate (`0xff`): A delegate call execution. Supported exec types: * Default (`0x00`): Default execution type (revert on failure). * Try (`0x01`): Try execution type (emits ERC7579TryExecuteFail on failure).","params":{"encodedMode":"the encoded mode MUST return true if the account supports the mode and false otherwise"}},"supportsModule(uint256)":{"details":"Supported module types: * Validator: A module used during the validation phase to determine if a transaction is valid and should be executed on the account. * Executor: A module that can execute transactions on behalf of the smart account via a callback. * Fallback Handler: A module that can extend the fallback functionality of a smart account.","params":{"moduleTypeId":"the module type ID according to the ERC-7579 spec MUST return true if the account supports the module type and false otherwise"}},"uninstallModule(uint256,address,bytes)":{"details":"Uninstalls a Module of a certain type on the smart account","params":{"deInitData":"arbitrary data that may be passed to the module during `onUninstall` deinitialization. MUST implement authorization control MUST call `onUninstall` on the module with the `deInitData` parameter if provided MUST emit ModuleUninstalled event MUST revert if the module is not installed or the deInitialization on the module failed","module":"the module address","moduleTypeId":"the module type ID according the ERC-7579 spec"}},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"details":"Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the “missingAccountFunds” (which might   be zero, in case the current account’s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for “infinite”. - `validAfter` (`uint48`): The UserOp is valid only after this time."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=contracts/","erc4626-tests/=lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/halmos-cheatcodes/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/account/extensions/draft-AccountERC7579.sol":"AccountERC7579"},"evmVersion":"prague","libraries":{}},"sources":{"contracts/account/Account.sol":{"keccak256":"0xb4fe7cd20e59aceed2c8c012575ec10e2581345d6a527ed3ccacf4f1630002b2","urls":["bzz-raw://eaead8a552a4b891be0f66f1fbf0c3579b1086149f57c1ebcc5c37d95d4af76f","dweb:/ipfs/QmPjqoYKwij1qJ96hKGBUVJX7FBZdmJmsrpEiq9H8MzyRh"],"license":"MIT"},"contracts/account/extensions/draft-AccountERC7579.sol":{"keccak256":"0x71e7cb5c88bd370ac2abf06e2c426f22d6b0ea830593d4108d1c260387b172f4","urls":["bzz-raw://4dbad6518b5cb214398b1b685a85de4a64d3773e1a34ff6d0fc365065809edf6","dweb:/ipfs/QmZ4Eu57xwp4QaLbGkGgkSGXkMLX1penndgtaePYoRWi81"],"license":"MIT"},"contracts/account/utils/draft-ERC4337Utils.sol":{"keccak256":"0xcfd37324ef8b32ec30eac68d26063758044b50dc2282ed14ed6229efd79eeb8e","urls":["bzz-raw://1c80bf1c40c2ffc8fbbf3057ee91a9b10151a33aa210c10447ad53dce34f0e4b","dweb:/ipfs/QmWKXw6SSQz9LF6eRNrbgWXkzBw82WD3JhN48EpFbJK9he"],"license":"MIT"},"contracts/account/utils/draft-ERC7579Utils.sol":{"keccak256":"0xa4e6947ca8521c0dada9e3dee7d441d274eb39edc899b594a4dfa18e91acc066","urls":["bzz-raw://60b8be0bca8305195c972ab9b54e6609c9487ed281dcdfce6dead9d35319dfae","dweb:/ipfs/QmcwggrUnJ8Xf41FirR1QNQHrhWSyTZgXsV14pwcLWAF3k"],"license":"MIT"},"contracts/interfaces/IERC1271.sol":{"keccak256":"0x66c7ec42c6c43712be2107a50ab4529379bc76a632b425babec698d9da921ac6","urls":["bzz-raw://dce2778f0b638adfc5ba29c2c618c855fe725fa74a16846386aa1d56a834aa04","dweb:/ipfs/QmPV9oWnzQdi58od266j62xvviavLNHqKLZfm6k2K1qy9E"],"license":"MIT"},"contracts/interfaces/draft-IERC4337.sol":{"keccak256":"0xc4c1b33f7f7ee592aa2ff5e7a184c400a9f9a34eeb501681cffe97e0faf0583d","urls":["bzz-raw://ed7189e2a50eba8c8b9d5505659fe8d2c136a6ce8b99486f2711925a1fc0068c","dweb:/ipfs/QmaU747ZrNDaPW2UPsDLfmZU5Es6BqyPiB3Sfvi3pa4ZEr"],"license":"MIT"},"contracts/interfaces/draft-IERC7579.sol":{"keccak256":"0xab2822930f57c35ec15d64fae79d977f603d607d692ee70ec7d43bcbaca95aa7","urls":["bzz-raw://af938c25a535b1fac2d343bc619cb839134e81c1ab5a2edac75185c238466dae","dweb:/ipfs/QmQ7ge19AHMxaAkqdSPLNs7Xr9Q3AEviXEM34GBCRMuhZ4"],"license":"MIT"},"contracts/utils/Address.sol":{"keccak256":"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0","urls":["bzz-raw://032d1201d839435be2c85b72e33206b3ea980c569d6ebf7fa57d811ab580a82f","dweb:/ipfs/QmeqQjAtMvdZT2tG7zm39itcRJkuwu8AEReK6WRnLJ18DD"],"license":"MIT"},"contracts/utils/Arrays.sol":{"keccak256":"0xa4b9958797e0e9cde82a090525e90f80d5745ba1c67ee72b488bd3087498a17e","urls":["bzz-raw://c9344f7c2f80322c2e76d9d89bed03fd12f3e011e74fde7cf24ea21bdd2abe2d","dweb:/ipfs/QmPMAjF5x2fHUAee2FKMZDBbFVrbZbPCr3a9KHLZaSn1zY"],"license":"MIT"},"contracts/utils/Bytes.sol":{"keccak256":"0x1613f93e376ab96791fd29f79da754e253c3d766831bc8c42f50545662f49065","urls":["bzz-raw://e88ee314d50d0f323616f88d0ccf5e4110dbdec2775d8d42523bcc8b76ed36eb","dweb:/ipfs/QmQ18ygHRrDdz4AEZXy5PASUHvJk1SNWWKM3TyC1xvDedP"],"license":"MIT"},"contracts/utils/Calldata.sol":{"keccak256":"0xa557256a5cc28f1ff8abfdb082739dc847390c6d892f563fc071994a058f9a31","urls":["bzz-raw://ffd71e93eb6fae111e6bfa39303c9e09b7db7bc698170f5be627d1beb40f5462","dweb:/ipfs/QmXZmiy9FB1GRH2eWZLefaosFvSVGCBg3iVoZvWbptC3f6"],"license":"MIT"},"contracts/utils/Comparators.sol":{"keccak256":"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58","urls":["bzz-raw://49ba706f1bc476d68fe6c1fad75517acea4e9e275be0989b548e292eb3a3eacd","dweb:/ipfs/QmeBpvcdGWzWMKTQESUCEhHgnEQYYATVwPxLMxa6vMT7jC"],"license":"MIT"},"contracts/utils/Errors.sol":{"keccak256":"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123","urls":["bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf","dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"],"license":"MIT"},"contracts/utils/Packing.sol":{"keccak256":"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd","urls":["bzz-raw://8fcae95be7077d103530c4e6a5f1248aa64102dad62d642e2530316ab002e02c","dweb:/ipfs/QmWCr2qicfaqsTbpgq7CJhedUHcPQv34k8HNs4f5kGjVnw"],"license":"MIT"},"contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"contracts/utils/SlotDerivation.sol":{"keccak256":"0x67672e4ca1dafdcc661d4eba8475cfac631fa0933309258e3af7644b92e1fb26","urls":["bzz-raw://30192451f05ea5ddb0c18bd0f9003f098505836ba19c08a9c365adf829454da2","dweb:/ipfs/QmfCuZSCTyCdFoSKn7MSaN6hZksnQn9ZhrZDAdRTCbwGu2"],"license":"MIT"},"contracts/utils/StorageSlot.sol":{"keccak256":"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97","urls":["bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b","dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"],"license":"MIT"},"contracts/utils/cryptography/signers/AbstractSigner.sol":{"keccak256":"0x2e803d54b627d8ce2841c39e973f499be029a706f7157aee74adb648a27ecda9","urls":["bzz-raw://62197d50f708cccc7f17509f54d429eb6921416f3695f08f1178bbb9ca5ce0c5","dweb:/ipfs/QmeaUebF8obuUXwqFH4rhwTzUqa4A7z4S8TkHpWyUSrDo6"],"license":"MIT"},"contracts/utils/math/Math.sol":{"keccak256":"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6","urls":["bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3","dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"],"license":"MIT"},"contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"},"contracts/utils/structs/EnumerableSet.sol":{"keccak256":"0x1fc283df727585919c3db301b948a3e827aee16917457ad7f916db9da2228e77","urls":["bzz-raw://a4f4b5e2cd0ebc3b74e41e4e94771a0417eedd9b11cec3ef9f90b2ac2989264b","dweb:/ipfs/QmZmsEsvsXiwAyAe1YeoLSKezeFcvR1giUeEY6ex4zpsTS"],"license":"MIT"}},"version":1},"id":15}