/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_owners"
      | "_requiredSignatures"
      | "_transactions"
      | "executeTransaction"
      | "getOwners"
      | "getRequiredSignatures"
      | "getTransaction"
      | "isOwner"
      | "signTransaction"
      | "submitTransaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TransactionCreated"
      | "TransactionExecuted"
      | "TransactionSigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRequiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "_owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
}

export namespace TransactionCreatedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    to: string,
    amount: bigint,
    data: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    amount: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [transactionId: BigNumberish, executer: AddressLike];
  export type OutputTuple = [transactionId: bigint, executer: string];
  export interface OutputObject {
    transactionId: bigint;
    executer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSignedEvent {
  export type InputTuple = [transactionId: BigNumberish, signer: AddressLike];
  export type OutputTuple = [transactionId: bigint, signer: string];
  export interface OutputObject {
    transactionId: bigint;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  _requiredSignatures: TypedContractMethod<[], [bigint], "view">;

  _transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        to: string;
        amount: bigint;
        data: string;
        executed: boolean;
      }
    ],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getRequiredSignatures: TypedContractMethod<[], [bigint], "view">;

  getTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [[string, bigint, string, boolean, bigint]],
    "view"
  >;

  isOwner: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  signTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitTransaction: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "_requiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        to: string;
        amount: bigint;
        data: string;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRequiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [transactionId: BigNumberish],
    [[string, bigint, string, boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "signTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TransactionCreated"
  ): TypedContractEvent<
    TransactionCreatedEvent.InputTuple,
    TransactionCreatedEvent.OutputTuple,
    TransactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSigned"
  ): TypedContractEvent<
    TransactionSignedEvent.InputTuple,
    TransactionSignedEvent.OutputTuple,
    TransactionSignedEvent.OutputObject
  >;

  filters: {
    "TransactionCreated(uint256,address,uint256,bytes)": TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;
    TransactionCreated: TypedContractEvent<
      TransactionCreatedEvent.InputTuple,
      TransactionCreatedEvent.OutputTuple,
      TransactionCreatedEvent.OutputObject
    >;

    "TransactionExecuted(uint256,address)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionSigned(uint256,address)": TypedContractEvent<
      TransactionSignedEvent.InputTuple,
      TransactionSignedEvent.OutputTuple,
      TransactionSignedEvent.OutputObject
    >;
    TransactionSigned: TypedContractEvent<
      TransactionSignedEvent.InputTuple,
      TransactionSignedEvent.OutputTuple,
      TransactionSignedEvent.OutputObject
    >;
  };
}
