/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTransactionCount"
      | "signTransaction"
      | "submitTransaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "transactionCreated"
      | "transactionExecuted"
      | "transactionSigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
}

export namespace transactionCreatedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace transactionExecutedEvent {
  export type InputTuple = [transactionId: BigNumberish, executer: AddressLike];
  export type OutputTuple = [transactionId: bigint, executer: string];
  export interface OutputObject {
    transactionId: bigint;
    executer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace transactionSignedEvent {
  export type InputTuple = [transactionId: BigNumberish, signer: AddressLike];
  export type OutputTuple = [transactionId: bigint, signer: string];
  export interface OutputObject {
    transactionId: bigint;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTransactionCount: TypedContractMethod<[], [bigint], "view">;

  signTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitTransaction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTransactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "transactionCreated"
  ): TypedContractEvent<
    transactionCreatedEvent.InputTuple,
    transactionCreatedEvent.OutputTuple,
    transactionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "transactionExecuted"
  ): TypedContractEvent<
    transactionExecutedEvent.InputTuple,
    transactionExecutedEvent.OutputTuple,
    transactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "transactionSigned"
  ): TypedContractEvent<
    transactionSignedEvent.InputTuple,
    transactionSignedEvent.OutputTuple,
    transactionSignedEvent.OutputObject
  >;

  filters: {
    "transactionCreated(uint256,address,uint256,bytes)": TypedContractEvent<
      transactionCreatedEvent.InputTuple,
      transactionCreatedEvent.OutputTuple,
      transactionCreatedEvent.OutputObject
    >;
    transactionCreated: TypedContractEvent<
      transactionCreatedEvent.InputTuple,
      transactionCreatedEvent.OutputTuple,
      transactionCreatedEvent.OutputObject
    >;

    "transactionExecuted(uint256,address)": TypedContractEvent<
      transactionExecutedEvent.InputTuple,
      transactionExecutedEvent.OutputTuple,
      transactionExecutedEvent.OutputObject
    >;
    transactionExecuted: TypedContractEvent<
      transactionExecutedEvent.InputTuple,
      transactionExecutedEvent.OutputTuple,
      transactionExecutedEvent.OutputObject
    >;

    "transactionSigned(uint256,address)": TypedContractEvent<
      transactionSignedEvent.InputTuple,
      transactionSignedEvent.OutputTuple,
      transactionSignedEvent.OutputObject
    >;
    transactionSigned: TypedContractEvent<
      transactionSignedEvent.InputTuple,
      transactionSignedEvent.OutputTuple,
      transactionSignedEvent.OutputObject
    >;
  };
}
