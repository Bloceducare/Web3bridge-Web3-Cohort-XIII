/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MultisigFactory {
  export type MultisigInfoStruct = {
    multisigAddress: AddressLike;
    creator: AddressLike;
    owners: AddressLike[];
    requiredSignatures: BigNumberish;
    createdAt: BigNumberish;
  };

  export type MultisigInfoStructOutput = [
    multisigAddress: string,
    creator: string,
    owners: string[],
    requiredSignatures: bigint,
    createdAt: bigint
  ] & {
    multisigAddress: string;
    creator: string;
    owners: string[];
    requiredSignatures: bigint;
    createdAt: bigint;
  };
}

export interface MultisigFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMultisig"
      | "createStandardMultisig"
      | "deployedMultisigs"
      | "getAllMultisigs"
      | "getMultisigCount"
      | "getMultisigDetails"
      | "getMultisigsForOwner"
      | "getUserMultisigs"
      | "isFactoryMultisig"
      | "isMultisig"
      | "multisigInfo"
      | "userMultisigs"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MultisigCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMultisig",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStandardMultisig",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedMultisigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMultisigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigsForOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMultisigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFactoryMultisig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMultisig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multisigInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMultisigs",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStandardMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedMultisigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMultisigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigsForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMultisigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFactoryMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMultisig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multisigInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMultisigs",
    data: BytesLike
  ): Result;
}

export namespace MultisigCreatedEvent {
  export type InputTuple = [
    multisigAddress: AddressLike,
    creator: AddressLike,
    owners: AddressLike[],
    requiredSignatures: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    multisigAddress: string,
    creator: string,
    owners: string[],
    requiredSignatures: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    multisigAddress: string;
    creator: string;
    owners: string[];
    requiredSignatures: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultisigFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MultisigFactory;
  waitForDeployment(): Promise<this>;

  interface: MultisigFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMultisig: TypedContractMethod<
    [owners: AddressLike[], requiredSignatures: BigNumberish],
    [string],
    "nonpayable"
  >;

  createStandardMultisig: TypedContractMethod<
    [owner1: AddressLike, owner2: AddressLike, owner3: AddressLike],
    [string],
    "nonpayable"
  >;

  deployedMultisigs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getAllMultisigs: TypedContractMethod<[], [string[]], "view">;

  getMultisigCount: TypedContractMethod<[], [bigint], "view">;

  getMultisigDetails: TypedContractMethod<
    [multisigAddress: AddressLike],
    [MultisigFactory.MultisigInfoStructOutput],
    "view"
  >;

  getMultisigsForOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getUserMultisigs: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  isFactoryMultisig: TypedContractMethod<
    [addr: AddressLike],
    [boolean],
    "view"
  >;

  isMultisig: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  multisigInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint] & {
        multisigAddress: string;
        creator: string;
        requiredSignatures: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  userMultisigs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMultisig"
  ): TypedContractMethod<
    [owners: AddressLike[], requiredSignatures: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStandardMultisig"
  ): TypedContractMethod<
    [owner1: AddressLike, owner2: AddressLike, owner3: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedMultisigs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllMultisigs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMultisigCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMultisigDetails"
  ): TypedContractMethod<
    [multisigAddress: AddressLike],
    [MultisigFactory.MultisigInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultisigsForOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserMultisigs"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isFactoryMultisig"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMultisig"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "multisigInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint] & {
        multisigAddress: string;
        creator: string;
        requiredSignatures: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userMultisigs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "MultisigCreated"
  ): TypedContractEvent<
    MultisigCreatedEvent.InputTuple,
    MultisigCreatedEvent.OutputTuple,
    MultisigCreatedEvent.OutputObject
  >;

  filters: {
    "MultisigCreated(address,address,address[],uint256,uint256)": TypedContractEvent<
      MultisigCreatedEvent.InputTuple,
      MultisigCreatedEvent.OutputTuple,
      MultisigCreatedEvent.OutputObject
    >;
    MultisigCreated: TypedContractEvent<
      MultisigCreatedEvent.InputTuple,
      MultisigCreatedEvent.OutputTuple,
      MultisigCreatedEvent.OutputObject
    >;
  };
}
