/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Multisig {
  export type ProposalStruct = {
    recipient: AddressLike;
    amount: BigNumberish;
    proposer: AddressLike;
    signatureCount: BigNumberish;
    signers: AddressLike[];
    status: BigNumberish;
  };

  export type ProposalStructOutput = [
    recipient: string,
    amount: bigint,
    proposer: string,
    signatureCount: bigint,
    signers: string[],
    status: bigint
  ] & {
    recipient: string;
    amount: bigint;
    proposer: string;
    signatureCount: bigint;
    signers: string[];
    status: bigint;
  };
}

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProposal"
      | "getSignerStatus"
      | "makeProposal"
      | "owner"
      | "requiredSignatureCount"
      | "setSigner"
      | "signProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeProposal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requiredSignatureCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signProposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatureCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signProposal",
    data: BytesLike
  ): Result;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [Multisig.ProposalStructOutput],
    "view"
  >;

  getSignerStatus: TypedContractMethod<
    [_signer: AddressLike],
    [boolean],
    "view"
  >;

  makeProposal: TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  requiredSignatureCount: TypedContractMethod<[], [bigint], "view">;

  setSigner: TypedContractMethod<
    [_signer: AddressLike, _isSigner: boolean],
    [void],
    "nonpayable"
  >;

  signProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_proposalId: BigNumberish],
    [Multisig.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSignerStatus"
  ): TypedContractMethod<[_signer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "makeProposal"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requiredSignatureCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setSigner"
  ): TypedContractMethod<
    [_signer: AddressLike, _isSigner: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signProposal"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;

  filters: {};
}
