/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Multisig {
  export type TransactionStruct = {
    spender: AddressLike;
    Amount: BigNumberish;
    numberOfApproval: BigNumberish;
    isActive: boolean;
  };

  export type TransactionStructOutput = [
    spender: string,
    Amount: bigint,
    numberOfApproval: bigint,
    isActive: boolean
  ] & {
    spender: string;
    Amount: bigint;
    numberOfApproval: bigint;
    isActive: boolean;
  };
}

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ApprovedTransaction"
      | "createTransaction"
      | "getSpender"
      | "getTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ApprovedTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ApprovedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ApprovedTransaction: TypedContractMethod<
    [ID: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTransaction: TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getSpender: TypedContractMethod<[_spender: AddressLike], [bigint], "view">;

  getTransaction: TypedContractMethod<
    [ID: BigNumberish],
    [Multisig.TransactionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ApprovedTransaction"
  ): TypedContractMethod<[ID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTransaction"
  ): TypedContractMethod<
    [_spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSpender"
  ): TypedContractMethod<[_spender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [ID: BigNumberish],
    [Multisig.TransactionStructOutput],
    "view"
  >;

  filters: {};
}
