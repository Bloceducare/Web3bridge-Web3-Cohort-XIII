/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTransaction"
      | "confirmTransaction"
      | "executeTransaction"
      | "getConfirmationsCount"
      | "get_confirmation"
      | "get_owners"
      | "get_transaction_count"
      | "isConfirmed"
      | "submitTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_confirmation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_owners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_transaction_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_confirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_transaction_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTransaction: TypedContractMethod<
    [_to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  confirmTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfirmationsCount: TypedContractMethod<
    [transactionId: BigNumberish],
    [bigint],
    "view"
  >;

  get_confirmation: TypedContractMethod<[], [bigint], "view">;

  get_owners: TypedContractMethod<[], [string[]], "view">;

  get_transaction_count: TypedContractMethod<[], [bigint], "view">;

  isConfirmed: TypedContractMethod<
    [transactionId: BigNumberish],
    [boolean],
    "view"
  >;

  submitTransaction: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTransaction"
  ): TypedContractMethod<
    [_to: AddressLike, value: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfirmationsCount"
  ): TypedContractMethod<[transactionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_confirmation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_owners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "get_transaction_count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isConfirmed"
  ): TypedContractMethod<[transactionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
