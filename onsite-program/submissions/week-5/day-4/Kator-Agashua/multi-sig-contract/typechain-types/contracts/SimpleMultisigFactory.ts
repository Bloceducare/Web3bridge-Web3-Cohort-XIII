/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SimpleMultisigFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMultisig"
      | "deployedMultisigs"
      | "getDeployedMultisigs"
      | "getMultisigByIndex"
      | "getMultisigCount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MultisigCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMultisig",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedMultisigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedMultisigs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultisigCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedMultisigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedMultisigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultisigCount",
    data: BytesLike
  ): Result;
}

export namespace MultisigCreatedEvent {
  export type InputTuple = [
    multisigAddress: AddressLike,
    creator: AddressLike,
    signer1: AddressLike,
    signer2: AddressLike,
    signer3: AddressLike
  ];
  export type OutputTuple = [
    multisigAddress: string,
    creator: string,
    signer1: string,
    signer2: string,
    signer3: string
  ];
  export interface OutputObject {
    multisigAddress: string;
    creator: string;
    signer1: string;
    signer2: string;
    signer3: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleMultisigFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleMultisigFactory;
  waitForDeployment(): Promise<this>;

  interface: SimpleMultisigFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMultisig: TypedContractMethod<
    [_signer1: AddressLike, _signer2: AddressLike, _signer3: AddressLike],
    [string],
    "nonpayable"
  >;

  deployedMultisigs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getDeployedMultisigs: TypedContractMethod<[], [string[]], "view">;

  getMultisigByIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getMultisigCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMultisig"
  ): TypedContractMethod<
    [_signer1: AddressLike, _signer2: AddressLike, _signer3: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedMultisigs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedMultisigs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMultisigByIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMultisigCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "MultisigCreated"
  ): TypedContractEvent<
    MultisigCreatedEvent.InputTuple,
    MultisigCreatedEvent.OutputTuple,
    MultisigCreatedEvent.OutputObject
  >;

  filters: {
    "MultisigCreated(address,address,address,address,address)": TypedContractEvent<
      MultisigCreatedEvent.InputTuple,
      MultisigCreatedEvent.OutputTuple,
      MultisigCreatedEvent.OutputObject
    >;
    MultisigCreated: TypedContractEvent<
      MultisigCreatedEvent.InputTuple,
      MultisigCreatedEvent.OutputTuple,
      MultisigCreatedEvent.OutputObject
    >;
  };
}
