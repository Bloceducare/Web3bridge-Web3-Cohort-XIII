/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SimpleMultisig,
  SimpleMultisigInterface,
} from "../../contracts/SimpleMultisig";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_signer2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_signer3",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "TransactionApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransactionExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransactionProposed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "approveTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "executeTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transactionId",
        type: "uint256",
      },
    ],
    name: "getTransactionApprovals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "proposeTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "signer1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signer2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signer3",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "transactionCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transactions",
    outputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "signer1Approved",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "signer2Approved",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "signer3Approved",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516112cf3803806112cf8339818101604052810190610032919061015f565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506101b2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012c82610101565b9050919050565b61013c81610121565b811461014757600080fd5b50565b60008151905061015981610133565b92915050565b600080600060608486031215610178576101776100fc565b5b60006101868682870161014a565b93505060206101978682870161014a565b92505060406101a88682870161014a565b9150509250925092565b61110e806101c16000396000f3fe6080604052600436106100955760003560e01c80639ace38c2116100595780639ace38c214610176578063a4ee77f3146101b8578063b77bf600146101f7578063ee22610b14610222578063f19a66821461024b5761009c565b806312065fe0146100a1578063242232d1146100cc57806334107282146100f557806338c0ac5f146101205780633eeb92f61461014b5761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b6610274565b6040516100c39190610c06565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610c52565b61027c565b005b34801561010157600080fd5b5061010a6104c2565b6040516101179190610cc0565b60405180910390f35b34801561012c57600080fd5b506101356104e6565b6040516101429190610cc0565b60405180910390f35b34801561015757600080fd5b5061016061050c565b60405161016d9190610cc0565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190610c52565b610532565b6040516101af96959493929190610cf6565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da9190610c52565b6105c2565b6040516101ee93929190610d57565b60405180910390f35b34801561020357600080fd5b5061020c6106d1565b6040516102199190610c06565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190610c52565b6106d7565b005b34801561025757600080fd5b50610272600480360381019061026d9190610dba565b61091e565b005b600047905090565b60006004600083815260200190815260200160002090508060020160039054906101000a900460ff16156102e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dc90610e57565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361035a5760018160020160006101000a81548160ff021916908315150217905550610485565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036103d15760018160020160016101000a81548160ff021916908315150217905550610484565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036104485760018160020160026101000a81548160ff021916908315150217905550610483565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047a90610ec3565b60405180910390fd5b5b5b7f924813d717e221b5f46dcd8a56da1679e4612584ab3237d55e5faabf6f6a307982336040516104b6929190610ee3565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff16908060020160039054906101000a900460ff16905086565b600080600080600460008681526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900460ff161515151581526020016002820160039054906101000a900460ff1615151515815250509050806040015181606001518260800151935093509350509193909250565b60035481565b60006004600083815260200190815260200160002090508060020160039054906101000a900460ff1615610740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073790610e57565b60405180910390fd5b8060020160009054906101000a900460ff16801561076c57508060020160019054906101000a900460ff165b801561078657508060020160029054906101000a900460ff165b6107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90610f58565b60405180910390fd5b60018160020160036101000a81548160ff02191690831515021790555060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826001015460405161083090610fa9565b60006040518083038185875af1925050503d806000811461086d576040519150601f19603f3d011682016040523d82523d6000602084013e610872565b606091505b50509050806108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad9061100a565b60405180910390fd5b7fda19024f6708ce28e75d9c0ec389fb05a8e5cc9dfe520f61239c10d51a11e59c838360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600101546040516109119392919061102a565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109c55750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a1d5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5390610ec3565b60405180910390fd5b6040518060c001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020016000151581526020016000151581526020016000151581526020016000151581525060046000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff0219169083151502179055509050507f34c1492f2b30aac2446b0b2de2e32501ff4742f7196db5ed9e0ddd6b7d7b25cf6003548383604051610bc99392919061102a565b60405180910390a160036000815480929190610be490611090565b91905055505050565b6000819050919050565b610c0081610bed565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600080fd5b610c2f81610bed565b8114610c3a57600080fd5b50565b600081359050610c4c81610c26565b92915050565b600060208284031215610c6857610c67610c21565b5b6000610c7684828501610c3d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610caa82610c7f565b9050919050565b610cba81610c9f565b82525050565b6000602082019050610cd56000830184610cb1565b92915050565b60008115159050919050565b610cf081610cdb565b82525050565b600060c082019050610d0b6000830189610cb1565b610d186020830188610bf7565b610d256040830187610ce7565b610d326060830186610ce7565b610d3f6080830185610ce7565b610d4c60a0830184610ce7565b979650505050505050565b6000606082019050610d6c6000830186610ce7565b610d796020830185610ce7565b610d866040830184610ce7565b949350505050565b610d9781610c9f565b8114610da257600080fd5b50565b600081359050610db481610d8e565b92915050565b60008060408385031215610dd157610dd0610c21565b5b6000610ddf85828601610da5565b9250506020610df085828601610c3d565b9150509250929050565b600082825260208201905092915050565b7f5472616e73616374696f6e20616c726561647920657865637574656400000000600082015250565b6000610e41601c83610dfa565b9150610e4c82610e0b565b602082019050919050565b60006020820190508181036000830152610e7081610e34565b9050919050565b7f4e6f742061207369676e65720000000000000000000000000000000000000000600082015250565b6000610ead600c83610dfa565b9150610eb882610e77565b602082019050919050565b60006020820190508181036000830152610edc81610ea0565b9050919050565b6000604082019050610ef86000830185610bf7565b610f056020830184610cb1565b9392505050565b7f4e65656420616c6c203320617070726f76616c73000000000000000000000000600082015250565b6000610f42601483610dfa565b9150610f4d82610f0c565b602082019050919050565b60006020820190508181036000830152610f7181610f35565b9050919050565b600081905092915050565b50565b6000610f93600083610f78565b9150610f9e82610f83565b600082019050919050565b6000610fb482610f86565b9150819050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610ff4600f83610dfa565b9150610fff82610fbe565b602082019050919050565b6000602082019050818103600083015261102381610fe7565b9050919050565b600060608201905061103f6000830186610bf7565b61104c6020830185610cb1565b6110596040830184610bf7565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109b82610bed565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110cd576110cc611061565b5b60018201905091905056fea26469706673582212209d8ff418ca3631c990b691a273974090887962480f5b0e999e914466e1ff95db64736f6c634300081c0033";

type SimpleMultisigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleMultisigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleMultisig__factory extends ContractFactory {
  constructor(...args: SimpleMultisigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _signer1: AddressLike,
    _signer2: AddressLike,
    _signer3: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _signer1,
      _signer2,
      _signer3,
      overrides || {}
    );
  }
  override deploy(
    _signer1: AddressLike,
    _signer2: AddressLike,
    _signer3: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _signer1,
      _signer2,
      _signer3,
      overrides || {}
    ) as Promise<
      SimpleMultisig & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleMultisig__factory {
    return super.connect(runner) as SimpleMultisig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleMultisigInterface {
    return new Interface(_abi) as SimpleMultisigInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SimpleMultisig {
    return new Contract(address, _abi, runner) as unknown as SimpleMultisig;
  }
}
