/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ISimpleMultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveTransaction"
      | "executeTransaction"
      | "getBalance"
      | "proposeTransaction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TransactionApproved"
      | "TransactionExecuted"
      | "TransactionProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransaction",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransaction",
    data: BytesLike
  ): Result;
}

export namespace TransactionApprovedEvent {
  export type InputTuple = [transactionId: BigNumberish, signer: AddressLike];
  export type OutputTuple = [transactionId: bigint, signer: string];
  export interface OutputObject {
    transactionId: bigint;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [transactionId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionProposedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [transactionId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISimpleMultisig extends BaseContract {
  connect(runner?: ContractRunner | null): ISimpleMultisig;
  waitForDeployment(): Promise<this>;

  interface: ISimpleMultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  proposeTransaction: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeTransaction"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TransactionApproved"
  ): TypedContractEvent<
    TransactionApprovedEvent.InputTuple,
    TransactionApprovedEvent.OutputTuple,
    TransactionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionProposed"
  ): TypedContractEvent<
    TransactionProposedEvent.InputTuple,
    TransactionProposedEvent.OutputTuple,
    TransactionProposedEvent.OutputObject
  >;

  filters: {
    "TransactionApproved(uint256,address)": TypedContractEvent<
      TransactionApprovedEvent.InputTuple,
      TransactionApprovedEvent.OutputTuple,
      TransactionApprovedEvent.OutputObject
    >;
    TransactionApproved: TypedContractEvent<
      TransactionApprovedEvent.InputTuple,
      TransactionApprovedEvent.OutputTuple,
      TransactionApprovedEvent.OutputObject
    >;

    "TransactionExecuted(uint256,address,uint256)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionProposed(uint256,address,uint256)": TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;
    TransactionProposed: TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;
  };
}
