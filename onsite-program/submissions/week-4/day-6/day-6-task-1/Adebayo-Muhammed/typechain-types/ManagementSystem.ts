/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IManagementSystem {
  export type EmployeeStruct = {
    name: string;
    userType: BigNumberish;
    salary: BigNumberish;
    isEmployed: boolean;
  };

  export type EmployeeStructOutput = [
    name: string,
    userType: bigint,
    salary: bigint,
    isEmployed: boolean
  ] & { name: string; userType: bigint; salary: bigint; isEmployed: boolean };
}

export interface ManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "employeeList"
      | "employees"
      | "getAllEmployees"
      | "getEmployee"
      | "owner"
      | "paySalary"
      | "registerEmployee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "employeeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paySalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEmployee",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "employeeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEmployee",
    data: BytesLike
  ): Result;
}

export interface ManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: ManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  employeeList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        name: string;
        userType: bigint;
        salary: bigint;
        isEmployed: boolean;
      }
    ],
    "view"
  >;

  getAllEmployees: TypedContractMethod<[], [string[]], "view">;

  getEmployee: TypedContractMethod<
    [_employee: AddressLike],
    [IManagementSystem.EmployeeStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paySalary: TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerEmployee: TypedContractMethod<
    [
      _employee: AddressLike,
      _name: string,
      _userType: BigNumberish,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "employeeList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        name: string;
        userType: bigint;
        salary: bigint;
        isEmployed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_employee: AddressLike],
    [IManagementSystem.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerEmployee"
  ): TypedContractMethod<
    [
      _employee: AddressLike,
      _name: string,
      _userType: BigNumberish,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
