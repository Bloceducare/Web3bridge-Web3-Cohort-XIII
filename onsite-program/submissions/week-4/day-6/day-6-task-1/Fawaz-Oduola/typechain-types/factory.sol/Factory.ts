/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IEmployeeManagement {
  export type EmployeeStruct = {
    name: string;
    _address: AddressLike;
    salary: BigNumberish;
    position: BigNumberish;
    status: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    _address: string,
    salary: bigint,
    position: bigint,
    status: bigint
  ] & {
    name: string;
    _address: string;
    salary: bigint;
    position: bigint;
    status: bigint;
  };
}

export interface FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "createEmployeeManagementContract"
      | "employeeContracts"
      | "employees"
      | "fundContract"
      | "getContractAddress"
      | "getEmployee"
      | "payEmployee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEmployeeManagementContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "employeeContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payEmployee",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEmployeeManagementContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payEmployee",
    data: BytesLike
  ): Result;
}

export interface Factory extends BaseContract {
  connect(runner?: ContractRunner | null): Factory;
  waitForDeployment(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [
      _name: string,
      _address: AddressLike,
      _position: BigNumberish,
      _salary: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  createEmployeeManagementContract: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  employeeContracts: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        name: string;
        _address: string;
        salary: bigint;
        position: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getContractAddress: TypedContractMethod<[], [string], "view">;

  getEmployee: TypedContractMethod<
    [_address: AddressLike],
    [IEmployeeManagement.EmployeeStructOutput],
    "view"
  >;

  payEmployee: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      _name: string,
      _address: AddressLike,
      _position: BigNumberish,
      _salary: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEmployeeManagementContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "employeeContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        name: string;
        _address: string;
        salary: bigint;
        position: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IEmployeeManagement.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "payEmployee"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  filters: {};
}
