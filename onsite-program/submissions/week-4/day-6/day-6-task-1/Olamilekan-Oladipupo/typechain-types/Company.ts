/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ICompany {
  export type EmployeeStruct = {
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
    employeeAddress: AddressLike;
  };

  export type EmployeeStructOutput = [
    name: string,
    salary: bigint,
    status: bigint,
    employeeAddress: string
  ] & { name: string; salary: bigint; status: bigint; employeeAddress: string };
}

export interface CompanyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEmployee"
      | "getEmployee"
      | "paySalary"
      | "setEmployeeSalary"
      | "updateEmployeeDetails"
      | "updateEmployeeSalary"
      | "updateEmployeeStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createEmployee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paySalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmployeeSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeDetails",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeStatus",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeStatus",
    data: BytesLike
  ): Result;
}

export interface Company extends BaseContract {
  connect(runner?: ContractRunner | null): Company;
  waitForDeployment(): Promise<this>;

  interface: CompanyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEmployee: TypedContractMethod<[_name: string], [void], "nonpayable">;

  getEmployee: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [ICompany.EmployeeStructOutput],
    "view"
  >;

  paySalary: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmployeeSalary: TypedContractMethod<
    [_employeeAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEmployeeDetails: TypedContractMethod<
    [_employeeAddress: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;

  updateEmployeeSalary: TypedContractMethod<
    [_employeeAddress: AddressLike, _newSalary: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEmployeeStatus: TypedContractMethod<
    [_employeeAddress: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEmployee"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [ICompany.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmployeeSalary"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployeeDetails"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployeeSalary"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _newSalary: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployeeStatus"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
