/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BilalEnterprise,
  BilalEnterpriseInterface,
} from "../../../contracts/EMS.sol/BilalEnterprise";

const _abi = [
  {
    inputs: [],
    name: "EMPLOYEE_ALREADY_EXISTS",
    type: "error",
  },
  {
    inputs: [],
    name: "EMPLOYEE_NOT_ELIGIBLE",
    type: "error",
  },
  {
    inputs: [],
    name: "EMPLOYEE_NOT_FOUND",
    type: "error",
  },
  {
    inputs: [],
    name: "INSUFFICIENT_CONTRACT_BALANCE",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "getAnEmployee",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "salary",
            type: "uint256",
          },
          {
            internalType: "enum IEMS.Role",
            name: "role",
            type: "uint8",
          },
          {
            internalType: "enum IEMS.EmploymentStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct IEMS.Employee",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEmployees",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "userAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "salary",
            type: "uint256",
          },
          {
            internalType: "enum IEMS.Role",
            name: "role",
            type: "uint8",
          },
          {
            internalType: "enum IEMS.EmploymentStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct IEMS.Employee[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_employee_address",
        type: "address",
      },
    ],
    name: "paySalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salary",
        type: "uint256",
      },
      {
        internalType: "enum IEMS.Role",
        name: "_role",
        type: "uint8",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610ff88061001f6000396000f3fe60806040526004361061004e5760003560e01c806304ab8654146100515780630ea37aef1461007a578063281c6ad3146100a35780634abefa36146100e0578063f8b2cb4f1461010b5761004f565b5b005b34801561005d57600080fd5b5061007860048036038101906100739190610b66565b610148565b005b34801561008657600080fd5b506100a1600480360381019061009c9190610c04565b610467565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c6f565b61064e565b6040516100d79190610de1565b60405180910390f35b3480156100ec57600080fd5b506100f561084d565b6040516101029190610f13565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190610c6f565b61098c565b60405161013f9190610f44565b60405180910390f35b6000339050600073ffffffffffffffffffffffffffffffffffffffff166000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610214576040517f39310f2f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200185815260200184600281111561025d5761025c610cba565b5b81526020016000600281111561027657610275610cba565b5b8152509050806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908360028111156103405761033f610cba565b5b021790555060808201518160030160016101000a81548160ff021916908360028111156103705761036f610cba565b5b0217905550905050600181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083600281111561042a57610429610cba565b5b021790555060808201518160030160016101000a81548160ff0219169083600281111561045a57610459610cba565b5b0217905550505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610533576040517ff33a263900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561054757610546610cba565b5b8160030160019054906101000a900460ff16600281111561056b5761056a610cba565b5b146105a2576040517f4887aa1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201544710156105e0576040517f84a0056000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600201548160010160008282546105f89190610f8e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166108fc82600201549081150290604051600060405180830381858888f19350505050158015610649573d6000803e3d6000fd5b505050565b610656610a9d565b600073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361071d576040517ff33a263900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1660028111156107f5576107f4610cba565b5b600281111561080757610806610cba565b5b81526020016003820160019054906101000a900460ff1660028111156108305761082f610cba565b5b600281111561084257610841610cba565b5b815250509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561098357838290600052602060002090600402016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16600281111561092357610922610cba565b5b600281111561093557610934610cba565b5b81526020016003820160019054906101000a900460ff16600281111561095e5761095d610cba565b5b60028111156109705761096f610cba565b5b8152505081526020019060010190610871565b50505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff166000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a54576040517ff33a263900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160006002811115610ae757610ae6610cba565b5b815260200160006002811115610b0057610aff610cba565b5b81525090565b600080fd5b6000819050919050565b610b1e81610b0b565b8114610b2957600080fd5b50565b600081359050610b3b81610b15565b92915050565b60038110610b4e57600080fd5b50565b600081359050610b6081610b41565b92915050565b60008060408385031215610b7d57610b7c610b06565b5b6000610b8b85828601610b2c565b9250506020610b9c85828601610b51565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bd182610ba6565b9050919050565b610be181610bc6565b8114610bec57600080fd5b50565b600081359050610bfe81610bd8565b92915050565b600060208284031215610c1a57610c19610b06565b5b6000610c2884828501610bef565b91505092915050565b6000610c3c82610ba6565b9050919050565b610c4c81610c31565b8114610c5757600080fd5b50565b600081359050610c6981610c43565b92915050565b600060208284031215610c8557610c84610b06565b5b6000610c9384828501610c5a565b91505092915050565b610ca581610c31565b82525050565b610cb481610b0b565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610cfa57610cf9610cba565b5b50565b6000819050610d0b82610ce9565b919050565b6000610d1b82610cfd565b9050919050565b610d2b81610d10565b82525050565b60038110610d4257610d41610cba565b5b50565b6000819050610d5382610d31565b919050565b6000610d6382610d45565b9050919050565b610d7381610d58565b82525050565b60a082016000820151610d8f6000850182610c9c565b506020820151610da26020850182610cab565b506040820151610db56040850182610cab565b506060820151610dc86060850182610d22565b506080820151610ddb6080850182610d6a565b50505050565b600060a082019050610df66000830184610d79565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60a082016000820151610e3e6000850182610c9c565b506020820151610e516020850182610cab565b506040820151610e646040850182610cab565b506060820151610e776060850182610d22565b506080820151610e8a6080850182610d6a565b50505050565b6000610e9c8383610e28565b60a08301905092915050565b6000602082019050919050565b6000610ec082610dfc565b610eca8185610e07565b9350610ed583610e18565b8060005b83811015610f06578151610eed8882610e90565b9750610ef883610ea8565b925050600181019050610ed9565b5085935050505092915050565b60006020820190508181036000830152610f2d8184610eb5565b905092915050565b610f3e81610b0b565b82525050565b6000602082019050610f596000830184610f35565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9982610b0b565b9150610fa483610b0b565b9250828201905080821115610fbc57610fbb610f5f565b5b9291505056fea26469706673582212206aac6b61678803aaa9d8287d5ce879db5dc6eff5a84075aa0c51291ea21d438064736f6c634300081e0033";

type BilalEnterpriseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BilalEnterpriseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BilalEnterprise__factory extends ContractFactory {
  constructor(...args: BilalEnterpriseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BilalEnterprise & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BilalEnterprise__factory {
    return super.connect(runner) as BilalEnterprise__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BilalEnterpriseInterface {
    return new Interface(_abi) as BilalEnterpriseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BilalEnterprise {
    return new Contract(address, _abi, runner) as unknown as BilalEnterprise;
  }
}
