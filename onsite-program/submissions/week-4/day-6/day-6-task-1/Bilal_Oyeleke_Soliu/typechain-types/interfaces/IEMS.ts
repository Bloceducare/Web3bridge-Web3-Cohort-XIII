/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IEMS {
  export type EmployeeStruct = {
    userAddress: AddressLike;
    balance: BigNumberish;
    salary: BigNumberish;
    role: BigNumberish;
    status: BigNumberish;
  };

  export type EmployeeStructOutput = [
    userAddress: string,
    balance: bigint,
    salary: bigint,
    role: bigint,
    status: bigint
  ] & {
    userAddress: string;
    balance: bigint;
    salary: bigint;
    role: bigint;
    status: bigint;
  };
}

export interface IEMSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAnEmployee"
      | "getBalance"
      | "getEmployees"
      | "paySalary"
      | "registerUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAnEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paySalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAnEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
}

export interface IEMS extends BaseContract {
  connect(runner?: ContractRunner | null): IEMS;
  waitForDeployment(): Promise<this>;

  interface: IEMSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAnEmployee: TypedContractMethod<
    [_userAddress: AddressLike],
    [IEMS.EmployeeStructOutput],
    "view"
  >;

  getBalance: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getEmployees: TypedContractMethod<[], [IEMS.EmployeeStructOutput[]], "view">;

  paySalary: TypedContractMethod<
    [_employee_address: AddressLike],
    [void],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<
    [_salary: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAnEmployee"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [IEMS.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployees"
  ): TypedContractMethod<[], [IEMS.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<
    [_employee_address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_salary: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
