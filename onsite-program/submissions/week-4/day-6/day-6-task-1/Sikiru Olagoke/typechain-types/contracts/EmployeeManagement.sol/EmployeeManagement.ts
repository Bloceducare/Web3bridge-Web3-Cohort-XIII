/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEmployee {
  export type EmployeeStruct = {
    name: string;
    user_address: AddressLike;
    salary: BigNumberish;
    status: BigNumberish;
    role: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    user_address: string,
    salary: bigint,
    status: bigint,
    role: bigint
  ] & {
    name: string;
    user_address: string;
    salary: bigint;
    status: bigint;
    role: bigint;
  };
}

export interface EmployeeManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create_employee"
      | "get_all_employees"
      | "get_emplooyee"
      | "pay_employee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create_employee",
    values: [string, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_all_employees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_emplooyee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pay_employee",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "create_employee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_all_employees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_emplooyee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pay_employee",
    data: BytesLike
  ): Result;
}

export interface EmployeeManagement extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeManagement;
  waitForDeployment(): Promise<this>;

  interface: EmployeeManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create_employee: TypedContractMethod<
    [
      _name: string,
      _address: AddressLike,
      _salary: BigNumberish,
      _status: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  get_all_employees: TypedContractMethod<
    [],
    [IEmployee.EmployeeStructOutput[]],
    "view"
  >;

  get_emplooyee: TypedContractMethod<
    [_addr: AddressLike],
    [IEmployee.EmployeeStructOutput],
    "view"
  >;

  pay_employee: TypedContractMethod<
    [_employer_address: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create_employee"
  ): TypedContractMethod<
    [
      _name: string,
      _address: AddressLike,
      _salary: BigNumberish,
      _status: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_all_employees"
  ): TypedContractMethod<[], [IEmployee.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "get_emplooyee"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [IEmployee.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pay_employee"
  ): TypedContractMethod<
    [_employer_address: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
