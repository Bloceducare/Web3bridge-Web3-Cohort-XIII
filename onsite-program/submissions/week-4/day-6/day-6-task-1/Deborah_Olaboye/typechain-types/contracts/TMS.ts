/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ITMS {
  export type TeacherStruct = {
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
    wallet: AddressLike;
  };

  export type TeacherStructOutput = [
    name: string,
    salary: bigint,
    status: bigint,
    wallet: string
  ] & { name: string; salary: bigint; status: bigint; wallet: string };
}

export interface TMSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PaySalary"
      | "RegisterTeacher"
      | "Teachers"
      | "ViewTeachers"
      | "companyName"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PaySalary",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "RegisterTeacher",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Teachers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ViewTeachers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "companyName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PaySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RegisterTeacher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Teachers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ViewTeachers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "companyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export interface TMS extends BaseContract {
  connect(runner?: ContractRunner | null): TMS;
  waitForDeployment(): Promise<this>;

  interface: TMSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PaySalary: TypedContractMethod<
    [_name: string, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  RegisterTeacher: TypedContractMethod<
    [_name: string, _salary: BigNumberish, _status: BigNumberish],
    [ITMS.TeacherStructOutput[]],
    "nonpayable"
  >;

  Teachers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        name: string;
        salary: bigint;
        status: bigint;
        wallet: string;
      }
    ],
    "view"
  >;

  ViewTeachers: TypedContractMethod<[], [ITMS.TeacherStructOutput[]], "view">;

  companyName: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PaySalary"
  ): TypedContractMethod<
    [_name: string, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "RegisterTeacher"
  ): TypedContractMethod<
    [_name: string, _salary: BigNumberish, _status: BigNumberish],
    [ITMS.TeacherStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Teachers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        name: string;
        salary: bigint;
        status: bigint;
        wallet: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ViewTeachers"
  ): TypedContractMethod<[], [ITMS.TeacherStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "companyName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
