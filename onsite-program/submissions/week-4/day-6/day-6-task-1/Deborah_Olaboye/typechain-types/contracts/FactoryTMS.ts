/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FactoryTMS {
  export type CompanyDetailsStruct = {
    companyName: string;
    owner: AddressLike;
    companyAddress: AddressLike;
  };

  export type CompanyDetailsStructOutput = [
    companyName: string,
    owner: string,
    companyAddress: string
  ] & { companyName: string; owner: string; companyAddress: string };
}

export declare namespace ITMS {
  export type TeacherStruct = {
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
    wallet: AddressLike;
  };

  export type TeacherStructOutput = [
    name: string,
    salary: bigint,
    status: bigint,
    wallet: string
  ] & { name: string; salary: bigint; status: bigint; wallet: string };
}

export interface FactoryTMSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "companies"
      | "companyByOwner"
      | "createCompany"
      | "getAllCompanies"
      | "getCompany"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "companies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companyByOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCompany",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompany",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "companies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "companyByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCompany", data: BytesLike): Result;
}

export interface FactoryTMS extends BaseContract {
  connect(runner?: ContractRunner | null): FactoryTMS;
  waitForDeployment(): Promise<this>;

  interface: FactoryTMSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  companies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        companyName: string;
        owner: string;
        companyAddress: string;
      }
    ],
    "view"
  >;

  companyByOwner: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  createCompany: TypedContractMethod<
    [_companyName: string, _owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getAllCompanies: TypedContractMethod<
    [],
    [FactoryTMS.CompanyDetailsStructOutput[]],
    "view"
  >;

  getCompany: TypedContractMethod<
    [_companyId: BigNumberish],
    [ITMS.TeacherStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "companies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string] & {
        companyName: string;
        owner: string;
        companyAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "companyByOwner"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCompany"
  ): TypedContractMethod<
    [_companyName: string, _owner: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCompanies"
  ): TypedContractMethod<[], [FactoryTMS.CompanyDetailsStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCompany"
  ): TypedContractMethod<
    [_companyId: BigNumberish],
    [ITMS.TeacherStructOutput[]],
    "view"
  >;

  filters: {};
}
