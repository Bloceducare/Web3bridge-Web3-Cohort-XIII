/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TMS, TMSInterface } from "../../contracts/TMS";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_companyName",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NOT_FOUND",
    type: "error",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "PaySalary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_salary",
        type: "uint256",
      },
      {
        internalType: "enum ITMS.Status",
        name: "_status",
        type: "uint8",
      },
    ],
    name: "RegisterTeacher",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "salary",
            type: "uint256",
          },
          {
            internalType: "enum ITMS.Status",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct ITMS.Teacher[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Teachers",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "salary",
        type: "uint256",
      },
      {
        internalType: "enum ITMS.Status",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ViewTeachers",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "salary",
            type: "uint256",
          },
          {
            internalType: "enum ITMS.Status",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct ITMS.Teacher[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "companyName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611846380380611846833981810160405281019061003291906102bc565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506001805461006290610347565b80601f016020809104026020016040519081016040528092919081815260200182805461008e90610347565b80156100db5780601f106100b0576101008083540402835291602001916100db565b820191906000526020600020905b8154815290600101906020018083116100be57829003601f168201915b505050505091505050610378565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61015082610107565b810181811067ffffffffffffffff8211171561016f5761016e610118565b5b80604052505050565b60006101826100e9565b905061018e8282610147565b919050565b600067ffffffffffffffff8211156101ae576101ad610118565b5b6101b782610107565b9050602081019050919050565b60005b838110156101e25780820151818401526020810190506101c7565b60008484015250505050565b60006102016101fc84610193565b610178565b90508281526020810184848401111561021d5761021c610102565b5b6102288482856101c4565b509392505050565b600082601f830112610245576102446100fd565b5b81516102558482602086016101ee565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102898261025e565b9050919050565b6102998161027e565b81146102a457600080fd5b50565b6000815190506102b681610290565b92915050565b600080604083850312156102d3576102d26100f3565b5b600083015167ffffffffffffffff8111156102f1576102f06100f8565b5b6102fd85828601610230565b925050602061030e858286016102a7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061035f57607f821691505b60208210810361037257610371610318565b5b50919050565b6114bf806103876000396000f3fe6080604052600436106100595760003560e01c806303e702631461006e5780632f8cebdf146100995780635595e705146100d657806357083087146101165780638da5cb5b1461013f578063f5ec2eed1461016a57610060565b3661006057005b34801561006c57600080fd5b005b34801561007a57600080fd5b50610083610195565b6040516100909190610c31565b60405180910390f35b3480156100a557600080fd5b506100c060048036038101906100bb9190610ded565b610321565b6040516100cd9190610c31565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f89190610e5c565b6105c4565b60405161010d9493929190610f00565b60405180910390f35b34801561012257600080fd5b5061013d60048036038101906101389190610f8a565b6106b9565b005b34801561014b57600080fd5b506101546108f9565b6040516101619190610fe6565b60405180910390f35b34801561017657600080fd5b5061017f61091d565b60405161018c9190611001565b60405180910390f35b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561031857838290600052602060002090600302016040518060800160405290816000820180546101ec90611052565b80601f016020809104026020016040519081016040528092919081815260200182805461021890611052565b80156102655780601f1061023a57610100808354040283529160200191610265565b820191906000526020600020905b81548152906001019060200180831161024857829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff16600281111561029d5761029c610a80565b5b60028111156102af576102ae610a80565b5b81526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906101b9565b50505050905090565b60606000604051806080016040528086815260200185815260200184600281111561034f5761034e610a80565b5b81526020013373ffffffffffffffffffffffffffffffffffffffff168152509050600281908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816103b1919061122f565b506020820151816001015560408201518160020160006101000a81548160ff021916908360028111156103e7576103e6610a80565b5b021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506002805480602002602001604051908101604052809291908181526020016000905b828210156105b6578382906000526020600020906003020160405180608001604052908160008201805461048a90611052565b80601f01602080910402602001604051908101604052809291908181526020018280546104b690611052565b80156105035780601f106104d857610100808354040283529160200191610503565b820191906000526020600020905b8154815290600101906020018083116104e657829003601f168201915b50505050508152602001600182015481526020016002820160009054906101000a900460ff16600281111561053b5761053a610a80565b5b600281111561054d5761054c610a80565b5b81526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610457565b505050509150509392505050565b600281815481106105d457600080fd5b90600052602060002090600302016000915090508060000180546105f790611052565b80601f016020809104026020016040519081016040528092919081815260200182805461062390611052565b80156106705780601f1061064557610100808354040283529160200191610670565b820191906000526020600020905b81548152906001019060200180831161065357829003601f168201915b5050505050908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b6000805b6002805490508110156108bc57836040516020016106db919061133d565b604051602081830303815290604052805190602001206002828154811061070557610704611354565b5b90600052602060002090600302016000016040516020016107269190611406565b60405160208183030381529060405280519060200120036108af576000600281111561075557610754610a80565b5b6002828154811061076957610768611354565b5b906000526020600020906003020160020160009054906101000a900460ff16600281111561079a57610799610a80565b5b14806107fb57506002808111156107b4576107b3610a80565b5b600282815481106107c8576107c7611354565b5b906000526020600020906003020160020160009054906101000a900460ff1660028111156107f9576107f8610a80565b5b145b61083a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083190611469565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc6002838154811061086857610867611354565b5b9060005260206000209060030201600101549081150290604051600060405180830381858888f193505050501580156108a5573d6000803e3d6000fd5b50600191506108bc565b80806001019150506106bd565b50806108f4576040517f5ffce20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001805461092a90611052565b80601f016020809104026020016040519081016040528092919081815260200182805461095690611052565b80156109a35780601f10610978576101008083540402835291602001916109a3565b820191906000526020600020905b81548152906001019060200180831161098657829003601f168201915b505050505081565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a115780820151818401526020810190506109f6565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a39826109d7565b610a4381856109e2565b9350610a538185602086016109f3565b610a5c81610a1d565b840191505092915050565b6000819050919050565b610a7a81610a67565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610ac057610abf610a80565b5b50565b6000819050610ad182610aaf565b919050565b6000610ae182610ac3565b9050919050565b610af181610ad6565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2282610af7565b9050919050565b610b3281610b17565b82525050565b60006080830160008301518482036000860152610b558282610a2e565b9150506020830151610b6a6020860182610a71565b506040830151610b7d6040860182610ae8565b506060830151610b906060860182610b29565b508091505092915050565b6000610ba78383610b38565b905092915050565b6000602082019050919050565b6000610bc7826109ab565b610bd181856109b6565b935083602082028501610be3856109c7565b8060005b85811015610c1f5784840389528151610c008582610b9b565b9450610c0b83610baf565b925060208a01995050600181019050610be7565b50829750879550505050505092915050565b60006020820190508181036000830152610c4b8184610bbc565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ca982610a1d565b810181811067ffffffffffffffff82111715610cc857610cc7610c71565b5b80604052505050565b6000610cdb610c53565b9050610ce78282610ca0565b919050565b600067ffffffffffffffff821115610d0757610d06610c71565b5b610d1082610a1d565b9050602081019050919050565b82818337600083830152505050565b6000610d3f610d3a84610cec565b610cd1565b905082815260208101848484011115610d5b57610d5a610c6c565b5b610d66848285610d1d565b509392505050565b600082601f830112610d8357610d82610c67565b5b8135610d93848260208601610d2c565b91505092915050565b610da581610a67565b8114610db057600080fd5b50565b600081359050610dc281610d9c565b92915050565b60038110610dd557600080fd5b50565b600081359050610de781610dc8565b92915050565b600080600060608486031215610e0657610e05610c5d565b5b600084013567ffffffffffffffff811115610e2457610e23610c62565b5b610e3086828701610d6e565b9350506020610e4186828701610db3565b9250506040610e5286828701610dd8565b9150509250925092565b600060208284031215610e7257610e71610c5d565b5b6000610e8084828501610db3565b91505092915050565b600082825260208201905092915050565b6000610ea5826109d7565b610eaf8185610e89565b9350610ebf8185602086016109f3565b610ec881610a1d565b840191505092915050565b610edc81610a67565b82525050565b610eeb81610ad6565b82525050565b610efa81610b17565b82525050565b60006080820190508181036000830152610f1a8187610e9a565b9050610f296020830186610ed3565b610f366040830185610ee2565b610f436060830184610ef1565b95945050505050565b6000610f5782610af7565b9050919050565b610f6781610f4c565b8114610f7257600080fd5b50565b600081359050610f8481610f5e565b92915050565b60008060408385031215610fa157610fa0610c5d565b5b600083013567ffffffffffffffff811115610fbf57610fbe610c62565b5b610fcb85828601610d6e565b9250506020610fdc85828601610f75565b9150509250929050565b6000602082019050610ffb6000830184610ef1565b92915050565b6000602082019050818103600083015261101b8184610e9a565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061106a57607f821691505b60208210810361107d5761107c611023565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110e57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110a8565b6110ef86836110a8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061112c61112761112284610a67565b611107565b610a67565b9050919050565b6000819050919050565b61114683611111565b61115a61115282611133565b8484546110b5565b825550505050565b600090565b61116f611162565b61117a81848461113d565b505050565b5b8181101561119e57611193600082611167565b600181019050611180565b5050565b601f8211156111e3576111b481611083565b6111bd84611098565b810160208510156111cc578190505b6111e06111d885611098565b83018261117f565b50505b505050565b600082821c905092915050565b6000611206600019846008026111e8565b1980831691505092915050565b600061121f83836111f5565b9150826002028217905092915050565b611238826109d7565b67ffffffffffffffff81111561125157611250610c71565b5b61125b8254611052565b6112668282856111a2565b600060209050601f8311600181146112995760008415611287578287015190505b6112918582611213565b8655506112f9565b601f1984166112a786611083565b60005b828110156112cf578489015182556001820191506020850194506020810190506112aa565b868310156112ec57848901516112e8601f8916826111f5565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b6000611317826109d7565b6113218185611301565b93506113318185602086016109f3565b80840191505092915050565b6000611349828461130c565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815461139081611052565b61139a8186611301565b945060018216600081146113b557600181146113ca576113fd565b60ff19831686528115158202860193506113fd565b6113d385611083565b60005b838110156113f5578154818901526001820191506020810190506113d6565b838801955050505b50505092915050565b60006114128284611383565b915081905092915050565b7f54656163686572206e6f7420656c696769626c6520666f722073616c61727900600082015250565b6000611453601f83610e89565b915061145e8261141d565b602082019050919050565b6000602082019050818103600083015261148281611446565b905091905056fea26469706673582212203db39fb0ee0efc7d48791c01198f25ecddace5efebf68f38b9c4cdf6e9a01b6064736f6c634300081c0033";

type TMSConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TMSConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TMS__factory extends ContractFactory {
  constructor(...args: TMSConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _companyName: string,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_companyName, _owner, overrides || {});
  }
  override deploy(
    _companyName: string,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_companyName, _owner, overrides || {}) as Promise<
      TMS & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TMS__factory {
    return super.connect(runner) as TMS__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TMSInterface {
    return new Interface(_abi) as TMSInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TMS {
    return new Contract(address, _abi, runner) as unknown as TMS;
  }
}
