/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IStaffSalaryManager {
  export type StaffStruct = {
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
    role: BigNumberish;
  };

  export type StaffStructOutput = [
    name: string,
    salary: bigint,
    status: bigint,
    role: bigint
  ] & { name: string; salary: bigint; status: bigint; role: bigint };
}

export interface IStaffSalaryManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStaff"
      | "getStaff"
      | "getTotalStaffs"
      | "paySalary"
      | "updateStaffStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStaff",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaffs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paySalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStaffStatus",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addStaff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStaff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paySalary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStaffStatus",
    data: BytesLike
  ): Result;
}

export interface IStaffSalaryManager extends BaseContract {
  connect(runner?: ContractRunner | null): IStaffSalaryManager;
  waitForDeployment(): Promise<this>;

  interface: IStaffSalaryManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStaff: TypedContractMethod<
    [
      _staffAddress: AddressLike,
      _name: string,
      _status: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getStaff: TypedContractMethod<
    [_address: AddressLike],
    [IStaffSalaryManager.StaffStructOutput],
    "view"
  >;

  getTotalStaffs: TypedContractMethod<[], [bigint], "view">;

  paySalary: TypedContractMethod<
    [_staffAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateStaffStatus: TypedContractMethod<
    [_address: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStaff"
  ): TypedContractMethod<
    [
      _staffAddress: AddressLike,
      _name: string,
      _status: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStaff"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IStaffSalaryManager.StaffStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStaffs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "paySalary"
  ): TypedContractMethod<[_staffAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStaffStatus"
  ): TypedContractMethod<
    [_address: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
