/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SchoolManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "disburseSalary"
      | "employees"
      | "fundContract"
      | "getContractBalance"
      | "getEmployeeDetails"
      | "isRegistered"
      | "owner"
      | "registerEmployee"
      | "totalEmployees"
      | "updateEmployeeStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disburseSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerEmployee",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeStatus",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "disburseSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeStatus",
    data: BytesLike
  ): Result;
}

export interface SchoolManagement extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolManagement;
  waitForDeployment(): Promise<this>;

  interface: SchoolManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  disburseSalary: TypedContractMethod<
    [_employeeAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, string] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        employeeAddress: string;
      }
    ],
    "view"
  >;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEmployeeDetails: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
      }
    ],
    "view"
  >;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  totalEmployees: TypedContractMethod<[], [bigint], "view">;

  updateEmployeeStatus: TypedContractMethod<
    [_employeeAddress: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "disburseSalary"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, string] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        employeeAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeDetails"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _salary: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalEmployees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateEmployeeStatus"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
