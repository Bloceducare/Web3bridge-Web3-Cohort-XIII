/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IEmployeeManagement {
  export type EmployeeStruct = {
    name: string;
    role: BigNumberish;
    status: BigNumberish;
    salary: BigNumberish;
    totalPaid: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    role: bigint,
    status: bigint,
    salary: bigint,
    totalPaid: bigint
  ] & {
    name: string;
    role: bigint;
    status: bigint;
    salary: bigint;
    totalPaid: bigint;
  };
}

export interface EmployeeManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "canAccessGarage"
      | "disburseSalary"
      | "employeeList"
      | "employees"
      | "fundContract"
      | "getAllEmployees"
      | "getContractBalance"
      | "getEmployeeDetails"
      | "withdrawExcessEther"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmployeeAdded"
      | "EmployeeStatusUpdated"
      | "EtherWithdrawn"
      | "SalaryDisbursed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseSalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessEther",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessEther",
    data: BytesLike
  ): Result;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [
    employeeAddress: AddressLike,
    name: string,
    role: BigNumberish,
    salary: BigNumberish
  ];
  export type OutputTuple = [
    employeeAddress: string,
    name: string,
    role: bigint,
    salary: bigint
  ];
  export interface OutputObject {
    employeeAddress: string;
    name: string;
    role: bigint;
    salary: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeStatusUpdatedEvent {
  export type InputTuple = [employeeAddress: AddressLike, status: BigNumberish];
  export type OutputTuple = [employeeAddress: string, status: bigint];
  export interface OutputObject {
    employeeAddress: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtherWithdrawnEvent {
  export type InputTuple = [caller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [caller: string, amount: bigint];
  export interface OutputObject {
    caller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryDisbursedEvent {
  export type InputTuple = [employeeAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [employeeAddress: string, amount: bigint];
  export interface OutputObject {
    employeeAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmployeeManagement extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeManagement;
  waitForDeployment(): Promise<this>;

  interface: EmployeeManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _salaryInEther: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  canAccessGarage: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  disburseSalary: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "payable"
  >;

  employeeList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        totalPaid: bigint;
      }
    ],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        totalPaid: bigint;
      }
    ],
    "view"
  >;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getAllEmployees: TypedContractMethod<
    [],
    [IEmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEmployeeDetails: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [IEmployeeManagement.EmployeeStructOutput],
    "view"
  >;

  withdrawExcessEther: TypedContractMethod<
    [_amountInEther: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _salaryInEther: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "disburseSalary"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "employeeList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        totalPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        role: bigint;
        status: bigint;
        salary: bigint;
        totalPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<
    [],
    [IEmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeDetails"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [IEmployeeManagement.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawExcessEther"
  ): TypedContractMethod<[_amountInEther: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeStatusUpdated"
  ): TypedContractEvent<
    EmployeeStatusUpdatedEvent.InputTuple,
    EmployeeStatusUpdatedEvent.OutputTuple,
    EmployeeStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EtherWithdrawn"
  ): TypedContractEvent<
    EtherWithdrawnEvent.InputTuple,
    EtherWithdrawnEvent.OutputTuple,
    EtherWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "SalaryDisbursed"
  ): TypedContractEvent<
    SalaryDisbursedEvent.InputTuple,
    SalaryDisbursedEvent.OutputTuple,
    SalaryDisbursedEvent.OutputObject
  >;

  filters: {
    "EmployeeAdded(address,string,uint8,uint256)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;

    "EmployeeStatusUpdated(address,uint8)": TypedContractEvent<
      EmployeeStatusUpdatedEvent.InputTuple,
      EmployeeStatusUpdatedEvent.OutputTuple,
      EmployeeStatusUpdatedEvent.OutputObject
    >;
    EmployeeStatusUpdated: TypedContractEvent<
      EmployeeStatusUpdatedEvent.InputTuple,
      EmployeeStatusUpdatedEvent.OutputTuple,
      EmployeeStatusUpdatedEvent.OutputObject
    >;

    "EtherWithdrawn(address,uint256)": TypedContractEvent<
      EtherWithdrawnEvent.InputTuple,
      EtherWithdrawnEvent.OutputTuple,
      EtherWithdrawnEvent.OutputObject
    >;
    EtherWithdrawn: TypedContractEvent<
      EtherWithdrawnEvent.InputTuple,
      EtherWithdrawnEvent.OutputTuple,
      EtherWithdrawnEvent.OutputObject
    >;

    "SalaryDisbursed(address,uint256)": TypedContractEvent<
      SalaryDisbursedEvent.InputTuple,
      SalaryDisbursedEvent.OutputTuple,
      SalaryDisbursedEvent.OutputObject
    >;
    SalaryDisbursed: TypedContractEvent<
      SalaryDisbursedEvent.InputTuple,
      SalaryDisbursedEvent.OutputTuple,
      SalaryDisbursedEvent.OutputObject
    >;
  };
}
