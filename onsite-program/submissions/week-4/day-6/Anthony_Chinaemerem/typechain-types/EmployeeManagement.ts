/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EmployeeManagement {
  export type EmployeeStruct = {
    name: string;
    salary: BigNumberish;
    role: BigNumberish;
    status: BigNumberish;
    registrationDate: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    salary: bigint,
    role: bigint,
    status: bigint,
    registrationDate: bigint
  ] & {
    name: string;
    salary: bigint;
    role: bigint;
    status: bigint;
    registrationDate: bigint;
  };
}

export interface EmployeeManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkEmployeeRegistration"
      | "disburseSalary"
      | "employeeDetails"
      | "employeeIndex"
      | "employees"
      | "fundContract"
      | "getActiveEmployeesCount"
      | "getAllEmployees"
      | "getContractBalance"
      | "getEmployeeCount"
      | "getEmployeeDetails"
      | "getEmployeesByRole"
      | "getEmployeesByStatus"
      | "isRegistered"
      | "owner"
      | "registerEmployee"
      | "totalEmployees"
      | "updateEmployeeStatus"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmployeeRegistered"
      | "EmployeeStatusChanged"
      | "SalaryDisbursed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkEmployeeRegistration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disburseSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveEmployeesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeesByRole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeesByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerEmployee",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkEmployeeRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveEmployeesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeesByRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeesByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace EmployeeRegisteredEvent {
  export type InputTuple = [
    employee: AddressLike,
    name: string,
    role: BigNumberish,
    salary: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    name: string,
    role: bigint,
    salary: bigint
  ];
  export interface OutputObject {
    employee: string;
    name: string;
    role: bigint;
    salary: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeStatusChangedEvent {
  export type InputTuple = [
    employee: AddressLike,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    employee: string;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryDisbursedEvent {
  export type InputTuple = [
    employee: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    employee: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmployeeManagement extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeManagement;
  waitForDeployment(): Promise<this>;

  interface: EmployeeManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkEmployeeRegistration: TypedContractMethod<
    [_employee: AddressLike],
    [boolean],
    "view"
  >;

  disburseSalary: TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  employeeDetails: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  employeeIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  employees: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  fundContract: TypedContractMethod<[], [void], "payable">;

  getActiveEmployeesCount: TypedContractMethod<[], [bigint], "view">;

  getAllEmployees: TypedContractMethod<
    [],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEmployeeCount: TypedContractMethod<[], [bigint], "view">;

  getEmployeeDetails: TypedContractMethod<
    [_employee: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getEmployeesByRole: TypedContractMethod<
    [_role: BigNumberish],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;

  getEmployeesByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerEmployee: TypedContractMethod<
    [
      _employee: AddressLike,
      _name: string,
      _salary: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  totalEmployees: TypedContractMethod<[], [bigint], "view">;

  updateEmployeeStatus: TypedContractMethod<
    [_employee: AddressLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkEmployeeRegistration"
  ): TypedContractMethod<[_employee: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "disburseSalary"
  ): TypedContractMethod<
    [_employee: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "employeeDetails"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "employeeIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundContract"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getActiveEmployeesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<
    [],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeDetails"
  ): TypedContractMethod<
    [_employee: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeesByRole"
  ): TypedContractMethod<
    [_role: BigNumberish],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeesByStatus"
  ): TypedContractMethod<
    [_status: BigNumberish],
    [EmployeeManagement.EmployeeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerEmployee"
  ): TypedContractMethod<
    [
      _employee: AddressLike,
      _name: string,
      _salary: BigNumberish,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalEmployees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateEmployeeStatus"
  ): TypedContractMethod<
    [_employee: AddressLike, _newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EmployeeRegistered"
  ): TypedContractEvent<
    EmployeeRegisteredEvent.InputTuple,
    EmployeeRegisteredEvent.OutputTuple,
    EmployeeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeStatusChanged"
  ): TypedContractEvent<
    EmployeeStatusChangedEvent.InputTuple,
    EmployeeStatusChangedEvent.OutputTuple,
    EmployeeStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "SalaryDisbursed"
  ): TypedContractEvent<
    SalaryDisbursedEvent.InputTuple,
    SalaryDisbursedEvent.OutputTuple,
    SalaryDisbursedEvent.OutputObject
  >;

  filters: {
    "EmployeeRegistered(address,string,uint8,uint256)": TypedContractEvent<
      EmployeeRegisteredEvent.InputTuple,
      EmployeeRegisteredEvent.OutputTuple,
      EmployeeRegisteredEvent.OutputObject
    >;
    EmployeeRegistered: TypedContractEvent<
      EmployeeRegisteredEvent.InputTuple,
      EmployeeRegisteredEvent.OutputTuple,
      EmployeeRegisteredEvent.OutputObject
    >;

    "EmployeeStatusChanged(address,uint8,uint8)": TypedContractEvent<
      EmployeeStatusChangedEvent.InputTuple,
      EmployeeStatusChangedEvent.OutputTuple,
      EmployeeStatusChangedEvent.OutputObject
    >;
    EmployeeStatusChanged: TypedContractEvent<
      EmployeeStatusChangedEvent.InputTuple,
      EmployeeStatusChangedEvent.OutputTuple,
      EmployeeStatusChangedEvent.OutputObject
    >;

    "SalaryDisbursed(address,uint256,uint256)": TypedContractEvent<
      SalaryDisbursedEvent.InputTuple,
      SalaryDisbursedEvent.OutputTuple,
      SalaryDisbursedEvent.OutputObject
    >;
    SalaryDisbursed: TypedContractEvent<
      SalaryDisbursedEvent.InputTuple,
      SalaryDisbursedEvent.OutputTuple,
      SalaryDisbursedEvent.OutputObject
    >;
  };
}
