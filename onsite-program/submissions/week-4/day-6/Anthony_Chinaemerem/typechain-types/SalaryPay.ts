/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SalaryPay {
  export type EmployeeStruct = {
    name: string;
    salary: BigNumberish;
    role: BigNumberish;
    status: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    salary: bigint,
    role: bigint,
    status: bigint
  ] & { name: string; salary: bigint; role: bigint; status: bigint };
}

export interface SalaryPayInterface extends Interface {
  getFunction(
    nameOrSignature: "employee" | "getAllUsers" | "payStaffs" | "registerUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "employee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payStaffs",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "employee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payStaffs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
}

export interface SalaryPay extends BaseContract {
  connect(runner?: ContractRunner | null): SalaryPay;
  waitForDeployment(): Promise<this>;

  interface: SalaryPayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  employee: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getAllUsers: TypedContractMethod<
    [],
    [SalaryPay.EmployeeStructOutput[]],
    "view"
  >;

  payStaffs: TypedContractMethod<
    [_index: BigNumberish, _to: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;

  registerUser: TypedContractMethod<
    [_name: string, _salary: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "employee"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint] & {
        name: string;
        salary: bigint;
        role: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [SalaryPay.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "payStaffs"
  ): TypedContractMethod<
    [_index: BigNumberish, _to: AddressLike, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_name: string, _salary: BigNumberish, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
