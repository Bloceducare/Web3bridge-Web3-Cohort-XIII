/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LEDATOKEN,
  LEDATOKENInterface,
} from "../../../contracts/ERC20.sol/LEDATOKEN";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AllowanceTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600481526020017f4c6564610000000000000000000000000000000000000000000000000000000081525060019081610048919061034d565b506040518060400160405280600381526020017f4c444100000000000000000000000000000000000000000000000000000000008152506002908161008d919061034d565b506012600360006101000a81548160ff021916908360ff1602179055503480156100b657600080fd5b5033600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061041f565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061017e57607f821691505b60208210810361019157610190610137565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026101f97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826101bc565b61020386836101bc565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061024a6102456102408461021b565b610225565b61021b565b9050919050565b6000819050919050565b6102648361022f565b61027861027082610251565b8484546101c9565b825550505050565b600090565b61028d610280565b61029881848461025b565b505050565b5b818110156102bc576102b1600082610285565b60018101905061029e565b5050565b601f821115610301576102d281610197565b6102db846101ac565b810160208510156102ea578190505b6102fe6102f6856101ac565b83018261029d565b50505b505050565b600082821c905092915050565b600061032460001984600802610306565b1980831691505092915050565b600061033d8383610313565b9150826002028217905092915050565b610356826100fd565b67ffffffffffffffff81111561036f5761036e610108565b5b6103798254610166565b6103848282856102c0565b600060209050601f8311600181146103b757600084156103a5578287015190505b6103af8582610331565b865550610417565b601f1984166103c586610197565b60005b828110156103ed578489015182556001820191506020850194506020810190506103c8565b8683101561040a5784890151610406601f891682610313565b8355505b6001600288020188555050505b505050505050565b6112ce8061042e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461018f5780638da5cb5b146101bf57806395d89b41146101dd5780639dc29fac146101fb578063a9059cbb14610217578063dd62ed3e14610247576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce5671461015557806340c10f1914610173575b600080fd5b6100c1610277565b6040516100ce9190610e93565b60405180910390f35b6100f160048036038101906100ec9190610f4e565b610305565b6040516100fe9190610fa9565b60405180910390f35b61010f610405565b60405161011c9190610fd3565b60405180910390f35b61013f600480360381019061013a9190610fee565b61040b565b60405161014c9190610fa9565b60405180910390f35b61015d610701565b60405161016a919061105d565b60405180910390f35b61018d60048036038101906101889190610f4e565b610714565b005b6101a960048036038101906101a49190611078565b610722565b6040516101b69190610fd3565b60405180910390f35b6101c7610774565b6040516101d491906110b4565b60405180910390f35b6101e561079a565b6040516101f29190610e93565b60405180910390f35b61021560048036038101906102109190610f4e565b610828565b005b610231600480360381019061022c9190610f4e565b610836565b60405161023e9190610fa9565b60405180910390f35b610261600480360381019061025c91906110cf565b6109de565b60405161026e9190610fd3565b60405180910390f35b600180546102849061113e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b09061113e565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b505050505081565b600080610310610a6e565b9050828160010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516103f29190610fd3565b60405180910390a3600191505092915050565b60005481565b600080610416610a6e565b9050828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104d0576040517fbac9b5e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561054b576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105d9919061119e565b92505081905550828160000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610631919061119e565b92505081905550828160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068991906111d2565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516106ed9190610fd3565b60405180910390a360019150509392505050565b600360009054906101000a900460ff1681565b61071e8282610a9b565b5050565b600061072c610a6e565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600280546107a79061113e565b80601f01602080910402602001604051908101604052809291908181526020018280546107d39061113e565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505081565b6108328282610c12565b5050565b600080610841610a6e565b9050828160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108be576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461090f919061119e565b92505081905550828160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461096791906111d2565b925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516109cb9190610fd3565b60405180910390a3600191505092915050565b60006109e8610a6e565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f3f2e03f6ef530dc867b64a6018538f5b04254876becd658fe3e8b11f387f223a90508091505090565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290611278565b60405180910390fd5b6000610b35610a6e565b9050818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8891906111d2565b9250508190555081600080828254610ba091906111d2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c059190610fd3565b60405180910390a3505050565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9990611278565b60405180910390fd5b6000610cac610a6e565b9050818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d29576040517f5acb547600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d7a919061119e565b9250508190555081600080828254610d92919061119e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610df69190610fd3565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e3d578082015181840152602081019050610e22565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e6582610e03565b610e6f8185610e0e565b9350610e7f818560208601610e1f565b610e8881610e49565b840191505092915050565b60006020820190508181036000830152610ead8184610e5a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee582610eba565b9050919050565b610ef581610eda565b8114610f0057600080fd5b50565b600081359050610f1281610eec565b92915050565b6000819050919050565b610f2b81610f18565b8114610f3657600080fd5b50565b600081359050610f4881610f22565b92915050565b60008060408385031215610f6557610f64610eb5565b5b6000610f7385828601610f03565b9250506020610f8485828601610f39565b9150509250929050565b60008115159050919050565b610fa381610f8e565b82525050565b6000602082019050610fbe6000830184610f9a565b92915050565b610fcd81610f18565b82525050565b6000602082019050610fe86000830184610fc4565b92915050565b60008060006060848603121561100757611006610eb5565b5b600061101586828701610f03565b935050602061102686828701610f03565b925050604061103786828701610f39565b9150509250925092565b600060ff82169050919050565b61105781611041565b82525050565b6000602082019050611072600083018461104e565b92915050565b60006020828403121561108e5761108d610eb5565b5b600061109c84828501610f03565b91505092915050565b6110ae81610eda565b82525050565b60006020820190506110c960008301846110a5565b92915050565b600080604083850312156110e6576110e5610eb5565b5b60006110f485828601610f03565b925050602061110585828601610f03565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061115657607f821691505b6020821081036111695761116861110f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111a982610f18565b91506111b483610f18565b92508282039050818111156111cc576111cb61116f565b5b92915050565b60006111dd82610f18565b91506111e883610f18565b9250828201905080821115611200576111ff61116f565b5b92915050565b7f4e6f7420617574686f72697a656420746f20706572666f726d2074686973206160008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000611262602583610e0e565b915061126d82611206565b604082019050919050565b6000602082019050818103600083015261129181611255565b905091905056fea26469706673582212206f61ff87c6135e6a336b2073939fec53a3c543758604cd22a22b69fc033a9ca264736f6c634300081e0033";

type LEDATOKENConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LEDATOKENConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LEDATOKEN__factory extends ContractFactory {
  constructor(...args: LEDATOKENConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LEDATOKEN & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): LEDATOKEN__factory {
    return super.connect(runner) as LEDATOKEN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LEDATOKENInterface {
    return new Interface(_abi) as LEDATOKENInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): LEDATOKEN {
    return new Contract(address, _abi, runner) as unknown as LEDATOKEN;
  }
}
