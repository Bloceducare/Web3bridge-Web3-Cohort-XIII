/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Token, TokenInterface } from "../../contracts/Token";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "buyToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506115048061001f6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063313ce56711610066578063313ce5671461015b57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f5780632d296bf11461013f575b600080fd5b6100ab610227565b6040516100b8919061113e565b60405180910390f35b6100db60048036038101906100d691906111f9565b610260565b6040516100e89190611254565b60405180910390f35b6100f96105f0565b604051610106919061127e565b60405180910390f35b61012960048036038101906101249190611299565b610638565b6040516101369190611254565b60405180910390f35b610159600480360381019061015491906112ec565b610a51565b005b610163610cb8565b6040516101709190611335565b60405180910390f35b610193600480360381019061018e9190611350565b610cbd565b6040516101a0919061127e565b60405180910390f35b6101b1610d41565b6040516101be919061113e565b60405180910390f35b6101e160048036038101906101dc91906111f9565b610d7a565b6040516101ee9190611254565b60405180910390f35b610211600480360381019061020c919061137d565b610fe8565b60405161021e919061127e565b60405180910390f35b6040518060400160405280600581526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525081565b6000610276671620ae09ebc9d62560c01b6110ab565b61028a6726c25f06821b83e960c01b6110ab565b61029e679966dc3c7a5697c160c01b6110ab565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106105a9576102f767c55e61fc366aa21e60c01b6110ab565b61030b67b638e6c24ee451bd60c01b6110ab565b61031f676d6b3d4052441adc60c01b6110ab565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103a791906113ec565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610564576103ff67e9e733eea9a7c3a960c01b6110ab565b61041367b076234072ba746460c01b6110ab565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461049f91906113ec565b925050819055506104ba670a023280b27e8c0460c01b6110ab565b6104ce6752645e80a1417c5760c01b6110ab565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161052b919061127e565b60405180910390a36105476782004a4e1ca94a9660c01b6110ab565b61055b678dda53979558ba5c60c01b6110ab565b600190506105ea565b61057867eea3aa4e6872e4fa60c01b6110ab565b61058c67a92bd106a760547060c01b6110ab565b6105a0675f1ffbb0917b667760c01b6110ab565b600090506105ea565b6105bd6799c17a9ff397b36f60c01b6110ab565b6105d1678ae65b508b259dba60c01b6110ab565b6105e56741d3cfb79899ab9d60c01b6110ab565b600090505b92915050565b60006106066762f18e74b2f43bdb60c01b6110ab565b61061a67c7fe4edc6c544d8460c01b6110ab565b61062e678a2102dd3aee7e3c60c01b6110ab565b637d2b7500905090565b600061064e67bdede07f4374f0e860c01b6110ab565b61066267b2eaedf3f375367860c01b6110ab565b610676674b378c3426617e6d60c01b6110ab565b813073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86336040518363ffffffff1660e01b81526004016106b292919061142f565b602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f3919061146d565b10610a095761070c67367d19703dd457fe60c01b6110ab565b61072067b7c065f39ebb263660c01b6110ab565b6107346785c2a25a1b3dfb1460c01b6110ab565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106109c45761078d67ef784f8507df213060c01b6110ab565b6107a167169f89dc297b967860c01b6110ab565b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461082d919061149a565b925050819055506108486799fb0e79c13b71ff60c01b6110ab565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610896919061149a565b925050819055506108b167eb36ab59561c69f660c01b6110ab565b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108ff91906113ec565b9250508190555061091a672d47b4231fbcd31b60c01b6110ab565b61092e672b577f5a4872d5f060c01b6110ab565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161098b919061127e565b60405180910390a36109a767d659a70efa8e762960c01b6110ab565b6109bb67e4c24a6886b8b1b260c01b6110ab565b60019050610a4a565b6109d867d151484c159bab8660c01b6110ab565b6109ec67396555bb908d64c160c01b6110ab565b610a0067cb62305ef9cdfa1e60c01b6110ab565b60009050610a4a565b610a1d67ba1bd49a1d68355c60c01b6110ab565b610a31677498657ece83703860c01b6110ab565b610a4567211f34399c646e7360c01b6110ab565b600090505b9392505050565b610a65679eefeac3fd806b7960c01b6110ab565b610a796712eac1b1d6272e0560c01b6110ab565b610a8d676aa6afa3420a283360c01b6110ab565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610c4957610ae867f89f2003e06e1e6060c01b6110ab565b610afc67b4906267c356270f60c01b6110ab565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b4a91906113ec565b92505081905550610b656718488113ca286c9960c01b6110ab565b610b79670c0bda727e6da39760c01b6110ab565b3373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051610c14919061127e565b60405180910390a3610c30675a40dae8600348d260c01b6110ab565b610c44674d0a45b91a4c73ec60c01b6110ab565b610cb5565b610c5d679603eb15fe6f6a7860c01b6110ab565b610c7167059c1ffa871174e760c01b6110ab565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b600281565b6000610cd3671d7f2504ee137d4e60c01b6110ab565b610ce767bc0c5fff72ee88fe60c01b6110ab565b610cfb678b9e18c7aa9e858d60c01b6110ab565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040518060400160405280600281526020017f546b00000000000000000000000000000000000000000000000000000000000081525081565b6000610d906708c53fc455dc720660c01b6110ab565b610da46750b9c5ae5341956560c01b6110ab565b610db867b9991e3a73a356df60c01b6110ab565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610fa157610e116706f79c48812842b960c01b6110ab565b610e2567408876d8d3c6caa460c01b6110ab565b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e73919061149a565b92505081905550610e8e6764c5c9105de34c6c60c01b6110ab565b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610edc91906113ec565b92505081905550610ef76710c742a46ddd409060c01b6110ab565b610f0b67d55cce559baaec9360c01b6110ab565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f68919061127e565b60405180910390a3610f8467d7e00fba95d6f0b160c01b6110ab565b610f98678913ef1ff99978ba60c01b6110ab565b60019050610fe2565b610fb567a5af7cf73b6acede60c01b6110ab565b610fc967ba51b77e53571f4760c01b6110ab565b610fdd6770f719e51c2623f360c01b6110ab565b600090505b92915050565b6000610ffe673c14a9610937426760c01b6110ab565b611012674c5da108689e9abe60c01b6110ab565b611026679ff06e1a763abc5e60c01b6110ab565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b50565b600081519050919050565b600082825260208201905092915050565b60005b838110156110e85780820151818401526020810190506110cd565b60008484015250505050565b6000601f19601f8301169050919050565b6000611110826110ae565b61111a81856110b9565b935061112a8185602086016110ca565b611133816110f4565b840191505092915050565b600060208201905081810360008301526111588184611105565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061119082611165565b9050919050565b6111a081611185565b81146111ab57600080fd5b50565b6000813590506111bd81611197565b92915050565b6000819050919050565b6111d6816111c3565b81146111e157600080fd5b50565b6000813590506111f3816111cd565b92915050565b600080604083850312156112105761120f611160565b5b600061121e858286016111ae565b925050602061122f858286016111e4565b9150509250929050565b60008115159050919050565b61124e81611239565b82525050565b60006020820190506112696000830184611245565b92915050565b611278816111c3565b82525050565b6000602082019050611293600083018461126f565b92915050565b6000806000606084860312156112b2576112b1611160565b5b60006112c0868287016111ae565b93505060206112d1868287016111ae565b92505060406112e2868287016111e4565b9150509250925092565b60006020828403121561130257611301611160565b5b6000611310848285016111e4565b91505092915050565b600060ff82169050919050565b61132f81611319565b82525050565b600060208201905061134a6000830184611326565b92915050565b60006020828403121561136657611365611160565b5b6000611374848285016111ae565b91505092915050565b6000806040838503121561139457611393611160565b5b60006113a2858286016111ae565b92505060206113b3858286016111ae565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113f7826111c3565b9150611402836111c3565b925082820190508082111561141a576114196113bd565b5b92915050565b61142981611185565b82525050565b60006040820190506114446000830185611420565b6114516020830184611420565b9392505050565b600081519050611467816111cd565b92915050565b60006020828403121561148357611482611160565b5b600061149184828501611458565b91505092915050565b60006114a5826111c3565b91506114b0836111c3565b92508282039050818111156114c8576114c76113bd565b5b9291505056fea2646970667358221220635ee970528807308962c998ceb0f5dca4da456ad82ee083c7b8074765f3c30364736f6c634300081e0033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Token & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Token__factory {
    return super.connect(runner) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new Interface(_abi) as TokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Token {
    return new Contract(address, _abi, runner) as unknown as Token;
  }
}
