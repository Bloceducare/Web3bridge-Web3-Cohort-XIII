/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MyToken, MyTokenInterface } from "../MyToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenInfo",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b3138038062001b3183398181016040528101906200003791906200035b565b60008351116200007e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000759062000456565b60405180910390fd5b6000825111620000c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000bc90620004c8565b60405180910390fd5b6040518060600160405280848152602001838152602001601260ff16815250600080820151816000019081620000fc91906200072b565b5060208201518160010190816200011491906200072b565b5060408201518160020160006101000a81548160ff021916908360ff1602179055509050508060038190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505062000812565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f682620001ab565b810181811067ffffffffffffffff82111715620002185762000217620001bc565b5b80604052505050565b60006200022d6200018d565b90506200023b8282620001eb565b919050565b600067ffffffffffffffff8211156200025e576200025d620001bc565b5b6200026982620001ab565b9050602081019050919050565b60005b838110156200029657808201518184015260208101905062000279565b60008484015250505050565b6000620002b9620002b38462000240565b62000221565b905082815260208101848484011115620002d857620002d7620001a6565b5b620002e584828562000276565b509392505050565b600082601f830112620003055762000304620001a1565b5b815162000317848260208601620002a2565b91505092915050565b6000819050919050565b620003358162000320565b81146200034157600080fd5b50565b60008151905062000355816200032a565b92915050565b60008060006060848603121562000377576200037662000197565b5b600084015167ffffffffffffffff8111156200039857620003976200019c565b5b620003a686828701620002ed565b935050602084015167ffffffffffffffff811115620003ca57620003c96200019c565b5b620003d886828701620002ed565b9250506040620003eb8682870162000344565b9150509250925092565b600082825260208201905092915050565b7f456d707479206e616d6500000000000000000000000000000000000000000000600082015250565b60006200043e600a83620003f5565b91506200044b8262000406565b602082019050919050565b6000602082019050818103600083015262000471816200042f565b9050919050565b7f456d7074792073796d626f6c0000000000000000000000000000000000000000600082015250565b6000620004b0600c83620003f5565b9150620004bd8262000478565b602082019050919050565b60006020820190508181036000830152620004e381620004a1565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200053d57607f821691505b602082108103620005535762000552620004f5565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200057e565b620005c986836200057e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200060c62000606620006008462000320565b620005e1565b62000320565b9050919050565b6000819050919050565b6200062883620005eb565b62000640620006378262000613565b8484546200058b565b825550505050565b600090565b6200065762000648565b620006648184846200061d565b505050565b5b818110156200068c57620006806000826200064d565b6001810190506200066a565b5050565b601f821115620006db57620006a58162000559565b620006b0846200056e565b81016020851015620006c0578190505b620006d8620006cf856200056e565b83018262000669565b50505b505050565b600082821c905092915050565b60006200070060001984600802620006e0565b1980831691505092915050565b60006200071b8383620006ed565b9150826002028217905092915050565b6200073682620004ea565b67ffffffffffffffff811115620007525762000751620001bc565b5b6200075e825462000524565b6200076b82828562000690565b600060209050601f831160018114620007a357600084156200078e578287015190505b6200079a85826200070d565b8655506200080a565b601f198416620007b38662000559565b60005b82811015620007dd57848901518255600182019150602085019450602081019050620007b6565b86831015620007fd5784890151620007f9601f891682620006ed565b8355505b6001600288020188555050505b505050505050565b61130f80620008226000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636addb6631161005b5780636addb6631461010057806370a0823114610120578063a9059cbb14610150578063dd62ed3e146101805761007d565b8063095ea7b31461008257806318160ddd146100b257806323b872dd146100d0575b600080fd5b61009c60048036038101906100979190610d75565b6101b0565b6040516100a99190610dd0565b60405180910390f35b6100ba6102ab565b6040516100c79190610dfa565b60405180910390f35b6100ea60048036038101906100e59190610e15565b6102b5565b6040516100f79190610dd0565b60405180910390f35b6101086106e4565b60405161011793929190610f14565b60405180910390f35b61013a60048036038101906101359190610f59565b610819565b6040516101479190610dfa565b60405180910390f35b61016a60048036038101906101659190610d75565b6108d0565b6040516101779190610dd0565b60405180910390f35b61019a60048036038101906101959190610f86565b610af6565b6040516101a79190610dfa565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021790611012565b60405180910390fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000600354905090565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156103205750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b61035f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035690611012565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d89061107e565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610497906110ea565b60405180910390fd5b6104f282600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c2590919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061058782600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c7e90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061065982600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c2590919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b60008060000180546106f590611139565b80601f016020809104026020016040519081016040528092919081815260200182805461072190611139565b801561076e5780601f106107435761010080835404028352916020019161076e565b820191906000526020600020905b81548152906001019060200180831161075157829003601f168201915b50505050509080600101805461078390611139565b80601f01602080910402602001604051908101604052809291908181526020018280546107af90611139565b80156107fc5780601f106107d1576101008083540402835291602001916107fc565b820191906000526020600020905b8154815290600101906020018083116107df57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090611012565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093790611012565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b99061107e565b60405180910390fd5b610a1482600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c2590919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610aa982600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c7e90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015610b615750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790611012565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c61906111b6565b60405180910390fd5b8183610c769190611205565b905092915050565b6000808284610c8d9190611239565b905083811015610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc9906112b9565b60405180910390fd5b8091505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0c82610ce1565b9050919050565b610d1c81610d01565b8114610d2757600080fd5b50565b600081359050610d3981610d13565b92915050565b6000819050919050565b610d5281610d3f565b8114610d5d57600080fd5b50565b600081359050610d6f81610d49565b92915050565b60008060408385031215610d8c57610d8b610cdc565b5b6000610d9a85828601610d2a565b9250506020610dab85828601610d60565b9150509250929050565b60008115159050919050565b610dca81610db5565b82525050565b6000602082019050610de56000830184610dc1565b92915050565b610df481610d3f565b82525050565b6000602082019050610e0f6000830184610deb565b92915050565b600080600060608486031215610e2e57610e2d610cdc565b5b6000610e3c86828701610d2a565b9350506020610e4d86828701610d2a565b9250506040610e5e86828701610d60565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ea2578082015181840152602081019050610e87565b60008484015250505050565b6000601f19601f8301169050919050565b6000610eca82610e68565b610ed48185610e73565b9350610ee4818560208601610e84565b610eed81610eae565b840191505092915050565b600060ff82169050919050565b610f0e81610ef8565b82525050565b60006060820190508181036000830152610f2e8186610ebf565b90508181036020830152610f428185610ebf565b9050610f516040830184610f05565b949350505050565b600060208284031215610f6f57610f6e610cdc565b5b6000610f7d84828501610d2a565b91505092915050565b60008060408385031215610f9d57610f9c610cdc565b5b6000610fab85828601610d2a565b9250506020610fbc85828601610d2a565b9150509250929050565b7f5a65726f20616464726573730000000000000000000000000000000000000000600082015250565b6000610ffc600c83610e73565b915061100782610fc6565b602082019050919050565b6000602082019050818103600083015261102b81610fef565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000611068601483610e73565b915061107382611032565b602082019050919050565b600060208201905081810360008301526110978161105b565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b60006110d4601683610e73565b91506110df8261109e565b602082019050919050565b60006020820190508181036000830152611103816110c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061115157607f821691505b6020821081036111645761116361110a565b5b50919050565b7f556e646572666c6f770000000000000000000000000000000000000000000000600082015250565b60006111a0600983610e73565b91506111ab8261116a565b602082019050919050565b600060208201905081810360008301526111cf81611193565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061121082610d3f565b915061121b83610d3f565b9250828203905081811115611233576112326111d6565b5b92915050565b600061124482610d3f565b915061124f83610d3f565b9250828201905080821115611267576112666111d6565b5b92915050565b7f4f766572666c6f77000000000000000000000000000000000000000000000000600082015250565b60006112a3600883610e73565b91506112ae8261126d565b602082019050919050565b600060208201905081810360008301526112d281611296565b905091905056fea264697066735822122081b06ce53a4d12fb2191abcae350c2bacc957e6e1117ebc0b8bbc6d4009cf44564736f6c63430008140033";

type MyTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyToken__factory extends ContractFactory {
  constructor(...args: MyTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name_,
      symbol_,
      initialSupply,
      overrides || {}
    );
  }
  override deploy(
    name_: string,
    symbol_: string,
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name_,
      symbol_,
      initialSupply,
      overrides || {}
    ) as Promise<
      MyToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyToken__factory {
    return super.connect(runner) as MyToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenInterface {
    return new Interface(_abi) as MyTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MyToken {
    return new Contract(address, _abi, runner) as unknown as MyToken;
  }
}
