/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEmployee {
  export type EmployeeStruct = {
    addr: AddressLike;
    name: string;
    salary: BigNumberish;
    status: BigNumberish;
  };

  export type EmployeeStructOutput = [
    addr: string,
    name: string,
    salary: bigint,
    status: bigint
  ] & { addr: string; name: string; salary: bigint; status: bigint };
}

export interface IEmployeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEmployee"
      | "deleteEmployee"
      | "getAllEmployees"
      | "getEmployeeByAddress"
      | "updateEmployee"
      | "updateEmployeeStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createEmployee",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployee",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployeeStatus",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployeeStatus",
    data: BytesLike
  ): Result;
}

export interface IEmployee extends BaseContract {
  connect(runner?: ContractRunner | null): IEmployee;
  waitForDeployment(): Promise<this>;

  interface: IEmployeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEmployee: TypedContractMethod<
    [_userAddress: AddressLike, name: string, salary: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteEmployee: TypedContractMethod<
    [_userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllEmployees: TypedContractMethod<
    [],
    [IEmployee.EmployeeStructOutput[]],
    "view"
  >;

  getEmployeeByAddress: TypedContractMethod<
    [_userAddress: AddressLike],
    [IEmployee.EmployeeStructOutput],
    "view"
  >;

  updateEmployee: TypedContractMethod<
    [_userAddress: AddressLike, name: string, salary: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateEmployeeStatus: TypedContractMethod<
    [_userAddress: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEmployee"
  ): TypedContractMethod<
    [_userAddress: AddressLike, name: string, salary: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteEmployee"
  ): TypedContractMethod<[_userAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [IEmployee.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getEmployeeByAddress"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [IEmployee.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateEmployee"
  ): TypedContractMethod<
    [_userAddress: AddressLike, name: string, salary: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEmployeeStatus"
  ): TypedContractMethod<
    [_userAddress: AddressLike, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
