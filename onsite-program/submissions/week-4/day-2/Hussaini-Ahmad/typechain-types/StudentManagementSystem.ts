/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StudentManagementSystem {
  export type StudentStruct = {
    id: BigNumberish;
    name: string;
    course: string;
    year: BigNumberish;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    id: bigint,
    name: string,
    course: string,
    year: bigint,
    status: bigint
  ] & {
    id: bigint;
    name: string;
    course: string;
    year: bigint;
    status: bigint;
  };
}

export interface StudentManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createStudent"
      | "deleteStudent"
      | "getAllStudents"
      | "getStudent"
      | "updateStudent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createStudent",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudent",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStudent",
    data: BytesLike
  ): Result;
}

export interface StudentManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): StudentManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: StudentManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createStudent: TypedContractMethod<
    [_name: string, _course: string, _year: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteStudent: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getAllStudents: TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;

  getStudent: TypedContractMethod<
    [_id: BigNumberish],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;

  updateStudent: TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _course: string,
      _year: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createStudent"
  ): TypedContractMethod<
    [_name: string, _course: string, _year: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteStudent"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllStudents"
  ): TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudent"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStudent"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      _name: string,
      _course: string,
      _year: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
