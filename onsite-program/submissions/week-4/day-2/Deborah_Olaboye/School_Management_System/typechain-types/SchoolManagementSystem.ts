/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SchoolManagementSystem {
  export type StudentStruct = {
    name: string;
    age: BigNumberish;
    email: string;
    gender: BigNumberish;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    name: string,
    age: bigint,
    email: string,
    gender: bigint,
    status: bigint
  ] & {
    name: string;
    age: bigint;
    email: string;
    gender: bigint;
    status: bigint;
  };
}

export interface SchoolManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ChangeStatus"
      | "DeleteStudent"
      | "RegisterStudent"
      | "UpdateStudent"
      | "ViewStudent"
      | "ViewStudents"
      | "students"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ChangeStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "DeleteStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RegisterStudent",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateStudent",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ViewStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ViewStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ChangeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DeleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RegisterStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ViewStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ViewStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
}

export interface SchoolManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: SchoolManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ChangeStatus: TypedContractMethod<
    [id: BigNumberish, _new_status: BigNumberish],
    [void],
    "nonpayable"
  >;

  DeleteStudent: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  RegisterStudent: TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _email: string,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  UpdateStudent: TypedContractMethod<
    [id: BigNumberish, _new_name: string, _new_age: BigNumberish],
    [void],
    "nonpayable"
  >;

  ViewStudent: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        name: string;
        age: bigint;
        email: string;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  ViewStudents: TypedContractMethod<
    [],
    [SchoolManagementSystem.StudentStructOutput[]],
    "view"
  >;

  students: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        name: string;
        age: bigint;
        email: string;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ChangeStatus"
  ): TypedContractMethod<
    [id: BigNumberish, _new_status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "DeleteStudent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "RegisterStudent"
  ): TypedContractMethod<
    [
      _name: string,
      _age: BigNumberish,
      _email: string,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "UpdateStudent"
  ): TypedContractMethod<
    [id: BigNumberish, _new_name: string, _new_age: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ViewStudent"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        name: string;
        age: bigint;
        email: string;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ViewStudents"
  ): TypedContractMethod<
    [],
    [SchoolManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        name: string;
        age: bigint;
        email: string;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
