/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Factory {
  export type SchoolInfoStruct = {
    schoolContract: AddressLike;
    schoolName: string;
    owner: AddressLike;
    createdAt: BigNumberish;
  };

  export type SchoolInfoStructOutput = [
    schoolContract: string,
    schoolName: string,
    owner: string,
    createdAt: bigint
  ] & {
    schoolContract: string;
    schoolName: string;
    owner: string;
    createdAt: bigint;
  };
}

export interface FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CreateSchool"
      | "GetAllSchools"
      | "GetSchoolCount"
      | "GetSchoolInfo"
      | "GetSchoolsByOwner"
      | "IsValidSchool"
      | "isSchoolContract"
      | "schools"
      | "schoolsByOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreateSchool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAllSchools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetSchoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetSchoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetSchoolsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "IsValidSchool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSchoolContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "schoolsByOwner",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CreateSchool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetAllSchools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetSchoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetSchoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetSchoolsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsValidSchool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSchoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "schools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "schoolsByOwner",
    data: BytesLike
  ): Result;
}

export interface Factory extends BaseContract {
  connect(runner?: ContractRunner | null): Factory;
  waitForDeployment(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CreateSchool: TypedContractMethod<
    [_schoolName: string],
    [string],
    "nonpayable"
  >;

  GetAllSchools: TypedContractMethod<
    [],
    [Factory.SchoolInfoStructOutput[]],
    "view"
  >;

  GetSchoolCount: TypedContractMethod<[], [bigint], "view">;

  GetSchoolInfo: TypedContractMethod<
    [schoolId: BigNumberish],
    [
      [string, string, string, bigint] & {
        schoolContract: string;
        schoolName: string;
        owner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  GetSchoolsByOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  IsValidSchool: TypedContractMethod<
    [schoolAddress: AddressLike],
    [boolean],
    "view"
  >;

  isSchoolContract: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  schools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        schoolContract: string;
        schoolName: string;
        owner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  schoolsByOwner: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CreateSchool"
  ): TypedContractMethod<[_schoolName: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "GetAllSchools"
  ): TypedContractMethod<[], [Factory.SchoolInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "GetSchoolCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetSchoolInfo"
  ): TypedContractMethod<
    [schoolId: BigNumberish],
    [
      [string, string, string, bigint] & {
        schoolContract: string;
        schoolName: string;
        owner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "GetSchoolsByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "IsValidSchool"
  ): TypedContractMethod<[schoolAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSchoolContract"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "schools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        schoolContract: string;
        schoolName: string;
        owner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "schoolsByOwner"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  filters: {};
}
