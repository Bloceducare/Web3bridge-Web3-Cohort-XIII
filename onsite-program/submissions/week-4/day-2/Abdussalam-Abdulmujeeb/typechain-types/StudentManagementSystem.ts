/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StudentManagementSystem {
  export type StudentdataStruct = {
    firstname: string;
    lastname: string;
    age: BigNumberish;
    gender: BigNumberish;
    status: BigNumberish;
  };

  export type StudentdataStructOutput = [
    firstname: string,
    lastname: string,
    age: bigint,
    gender: bigint,
    status: bigint
  ] & {
    firstname: string;
    lastname: string;
    age: bigint;
    gender: bigint;
    status: bigint;
  };
}

export interface StudentManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createStudentdata"
      | "deleteStudentdata"
      | "getStudentdata"
      | "studentdatamanagement"
      | "updateStudentdata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createStudentdata",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudentdata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentdata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studentdatamanagement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentdata",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createStudentdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudentdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentdatamanagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentdata",
    data: BytesLike
  ): Result;
}

export interface StudentManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): StudentManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: StudentManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createStudentdata: TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      age: BigNumberish,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deleteStudentdata: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getStudentdata: TypedContractMethod<
    [],
    [StudentManagementSystem.StudentdataStructOutput[]],
    "view"
  >;

  studentdatamanagement: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        firstname: string;
        lastname: string;
        age: bigint;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  updateStudentdata: TypedContractMethod<
    [
      _index: BigNumberish,
      _new_firstname: string,
      _new_lastname: string,
      _new_age: BigNumberish,
      _new_gender: BigNumberish,
      _new_status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createStudentdata"
  ): TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      age: BigNumberish,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteStudentdata"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStudentdata"
  ): TypedContractMethod<
    [],
    [StudentManagementSystem.StudentdataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentdatamanagement"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        firstname: string;
        lastname: string;
        age: bigint;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStudentdata"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _new_firstname: string,
      _new_lastname: string,
      _new_age: BigNumberish,
      _new_gender: BigNumberish,
      _new_status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
