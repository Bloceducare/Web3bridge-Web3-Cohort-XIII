/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SchoolManagementSystem {
  export type StudentStruct = {
    name: string;
    age: BigNumberish;
    gender: BigNumberish;
    id: BigNumberish;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    name: string,
    age: bigint,
    gender: bigint,
    id: bigint,
    status: bigint
  ] & { name: string; age: bigint; gender: bigint; id: bigint; status: bigint };
}

export interface SchoolManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelStudentSuspension"
      | "deleteStudent"
      | "getStudentBy"
      | "getuserSchool"
      | "registerStudent"
      | "rusticateStudent"
      | "suspendStudent"
      | "updateStudentAge"
      | "updateStudentProfile(string,uint256)"
      | "updateStudentProfile(uint256,uint256,string)"
      | "usersSchool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelStudentSuspension",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentBy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getuserSchool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rusticateStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendStudent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentAge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentProfile(string,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentProfile(uint256,uint256,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "usersSchool",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelStudentSuspension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getuserSchool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rusticateStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentProfile(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentProfile(uint256,uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersSchool",
    data: BytesLike
  ): Result;
}

export interface SchoolManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: SchoolManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelStudentSuspension: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteStudent: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getStudentBy: TypedContractMethod<
    [id: BigNumberish],
    [SchoolManagementSystem.StudentStructOutput],
    "view"
  >;

  getuserSchool: TypedContractMethod<
    [],
    [SchoolManagementSystem.StudentStructOutput[]],
    "view"
  >;

  registerStudent: TypedContractMethod<
    [name: string, age: BigNumberish, gender: BigNumberish],
    [void],
    "nonpayable"
  >;

  rusticateStudent: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  suspendStudent: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  updateStudentAge: TypedContractMethod<
    [age: BigNumberish, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updateStudentProfile(string,uint256)": TypedContractMethod<
    [name: string, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updateStudentProfile(uint256,uint256,string)": TypedContractMethod<
    [age: BigNumberish, id: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;

  usersSchool: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        age: bigint;
        gender: bigint;
        id: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelStudentSuspension"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteStudent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStudentBy"
  ): TypedContractMethod<
    [id: BigNumberish],
    [SchoolManagementSystem.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getuserSchool"
  ): TypedContractMethod<
    [],
    [SchoolManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [name: string, age: BigNumberish, gender: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rusticateStudent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "suspendStudent"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStudentAge"
  ): TypedContractMethod<
    [age: BigNumberish, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudentProfile(string,uint256)"
  ): TypedContractMethod<
    [name: string, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudentProfile(uint256,uint256,string)"
  ): TypedContractMethod<
    [age: BigNumberish, id: BigNumberish, name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usersSchool"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        age: bigint;
        gender: bigint;
        id: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
