/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Todo {
  export type TaskStruct = {
    Title: string;
    Description: string;
    Status: boolean;
  };

  export type TaskStructOutput = [
    Title: string,
    Description: string,
    Status: boolean
  ] & { Title: string; Description: string; Status: boolean };
}

export interface TodoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTask"
      | "deleteTask"
      | "getTasks"
      | "toggleStatus"
      | "updateTask"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTask",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTask",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTasks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTask",
    values: [AddressLike, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTask", data: BytesLike): Result;
}

export interface Todo extends BaseContract {
  connect(runner?: ContractRunner | null): Todo;
  waitForDeployment(): Promise<this>;

  interface: TodoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTask: TypedContractMethod<
    [user: AddressLike, _title: string, _description: string],
    [void],
    "nonpayable"
  >;

  deleteTask: TypedContractMethod<
    [user: AddressLike, taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTasks: TypedContractMethod<
    [user: AddressLike],
    [Todo.TaskStructOutput[]],
    "view"
  >;

  toggleStatus: TypedContractMethod<
    [user: AddressLike, taskId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTask: TypedContractMethod<
    [
      user: AddressLike,
      taskId: BigNumberish,
      _newTitle: string,
      _newDescription: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [user: AddressLike, _title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTask"
  ): TypedContractMethod<
    [user: AddressLike, taskId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTasks"
  ): TypedContractMethod<
    [user: AddressLike],
    [Todo.TaskStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "toggleStatus"
  ): TypedContractMethod<
    [user: AddressLike, taskId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTask"
  ): TypedContractMethod<
    [
      user: AddressLike,
      taskId: BigNumberish,
      _newTitle: string,
      _newDescription: string
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
