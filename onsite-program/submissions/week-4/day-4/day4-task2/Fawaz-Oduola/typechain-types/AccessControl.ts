/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AccessControl {
  export type EmployeeStruct = {
    addr: AddressLike;
    name: string;
    role: BigNumberish;
    active: boolean;
  };

  export type EmployeeStructOutput = [
    addr: string,
    name: string,
    role: bigint,
    active: boolean
  ] & { addr: string; name: string; role: bigint; active: boolean };
}

export interface AccessControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "checkAccess"
      | "employees"
      | "getAllEmployees"
      | "getEmployee"
      | "roleAccess"
      | "updateEmployee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEmployee",
    data: BytesLike
  ): Result;
}

export interface AccessControl extends BaseContract {
  connect(runner?: ContractRunner | null): AccessControl;
  waitForDeployment(): Promise<this>;

  interface: AccessControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [_addr: AddressLike, _name: string, _role: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkAccess: TypedContractMethod<[_addr: AddressLike], [boolean], "view">;

  employees: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        addr: string;
        name: string;
        role: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getAllEmployees: TypedContractMethod<
    [],
    [AccessControl.EmployeeStructOutput[]],
    "view"
  >;

  getEmployee: TypedContractMethod<
    [_addr: AddressLike],
    [AccessControl.EmployeeStructOutput],
    "view"
  >;

  roleAccess: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  updateEmployee: TypedContractMethod<
    [_addr: AddressLike, _name: string, _role: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [_addr: AddressLike, _name: string, _role: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkAccess"
  ): TypedContractMethod<[_addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean] & {
        addr: string;
        name: string;
        role: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [AccessControl.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [AccessControl.EmployeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleAccess"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateEmployee"
  ): TypedContractMethod<
    [_addr: AddressLike, _name: string, _role: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
