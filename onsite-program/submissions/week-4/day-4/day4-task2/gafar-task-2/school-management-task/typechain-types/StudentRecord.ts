/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StudentRecord {
  export type StudentStruct = {
    name: string;
    age: BigNumberish;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    name: string,
    age: bigint,
    status: bigint
  ] & { name: string; age: bigint; status: bigint };
}

export interface StudentRecordInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "get_all_students"
      | "get_student_by_id"
      | "register_student"
      | "remove_student"
      | "studentRecord"
      | "update_student"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "get_all_students",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_student_by_id",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register_student",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_student",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studentRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update_student",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "get_all_students",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_student_by_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register_student",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_student",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_student",
    data: BytesLike
  ): Result;
}

export interface StudentRecord extends BaseContract {
  connect(runner?: ContractRunner | null): StudentRecord;
  waitForDeployment(): Promise<this>;

  interface: StudentRecordInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  get_all_students: TypedContractMethod<
    [],
    [StudentRecord.StudentStructOutput[]],
    "view"
  >;

  get_student_by_id: TypedContractMethod<
    [_address: AddressLike],
    [StudentRecord.StudentStructOutput],
    "view"
  >;

  register_student: TypedContractMethod<
    [name: string, age: BigNumberish],
    [void],
    "nonpayable"
  >;

  remove_student: TypedContractMethod<[], [void], "nonpayable">;

  studentRecord: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint, bigint] & { name: string; age: bigint; status: bigint }],
    "view"
  >;

  update_student: TypedContractMethod<
    [name: string, age: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "get_all_students"
  ): TypedContractMethod<[], [StudentRecord.StudentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "get_student_by_id"
  ): TypedContractMethod<
    [_address: AddressLike],
    [StudentRecord.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "register_student"
  ): TypedContractMethod<
    [name: string, age: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_student"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "studentRecord"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint, bigint] & { name: string; age: bigint; status: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "update_student"
  ): TypedContractMethod<
    [name: string, age: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
