/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature: "addTodo" | "getTodo" | "todos" | "updateTodos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTodo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "todos",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTodos",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "todos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTodos",
    data: BytesLike
  ): Result;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTodo: TypedContractMethod<
    [_title: string, _description: string, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTodo: TypedContractMethod<
    [_index: BigNumberish],
    [[string, string, string]],
    "view"
  >;

  todos: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        title: string;
        description: string;
        status: bigint;
      }
    ],
    "view"
  >;

  updateTodos: TypedContractMethod<
    [
      _index: BigNumberish,
      _title: string,
      description: string,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTodo"
  ): TypedContractMethod<
    [_title: string, _description: string, _status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTodo"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [[string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "todos"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        title: string;
        description: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateTodos"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _title: string,
      description: string,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
