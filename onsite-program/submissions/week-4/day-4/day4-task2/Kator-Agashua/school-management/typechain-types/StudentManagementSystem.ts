/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StudentManagementSystem {
  export type StudentStruct = {
    id: BigNumberish;
    name: string;
    age: BigNumberish;
    gender: BigNumberish;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    id: bigint,
    name: string,
    age: bigint,
    gender: bigint,
    status: bigint
  ] & { id: bigint; name: string; age: bigint; gender: bigint; status: bigint };
}

export interface StudentManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GenderToString"
      | "StatusToString"
      | "addStudent"
      | "deleteStudent"
      | "getAllStudents"
      | "getStudent"
      | "getTotalStudents"
      | "studentList"
      | "updateStudent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GenderToString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "StatusToString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStudent",
    values: [AddressLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studentList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudent",
    values: [AddressLike, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "GenderToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StatusToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStudent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudent",
    data: BytesLike
  ): Result;
}

export interface StudentManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): StudentManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: StudentManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GenderToString: TypedContractMethod<
    [_gender: BigNumberish],
    [string],
    "view"
  >;

  StatusToString: TypedContractMethod<
    [_status: BigNumberish],
    [string],
    "view"
  >;

  addStudent: TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _age: BigNumberish,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deleteStudent: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllStudents: TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;

  getStudent: TypedContractMethod<
    [_address: AddressLike],
    [[string, bigint, bigint, string, string]],
    "view"
  >;

  getTotalStudents: TypedContractMethod<[], [bigint], "view">;

  studentList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        name: string;
        age: bigint;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  updateStudent: TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _age: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GenderToString"
  ): TypedContractMethod<[_gender: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "StatusToString"
  ): TypedContractMethod<[_status: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addStudent"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _age: BigNumberish,
      _gender: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteStudent"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllStudents"
  ): TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudent"
  ): TypedContractMethod<
    [_address: AddressLike],
    [[string, bigint, bigint, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStudents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "studentList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        name: string;
        age: bigint;
        gender: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStudent"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _age: BigNumberish,
      _status: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
