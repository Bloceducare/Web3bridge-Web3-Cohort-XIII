/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TodoList {
  export type TodoStruct = {
    title: string;
    description: string;
    status: BigNumberish;
    creator: AddressLike;
  };

  export type TodoStructOutput = [
    title: string,
    description: string,
    status: bigint,
    creator: string
  ] & { title: string; description: string; status: bigint; creator: string };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTodo"
      | "deleteTodo"
      | "getTodo"
      | "getTodos"
      | "toggleTodoStatus"
      | "updateTodo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTodo",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTodo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTodo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getTodos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleTodoStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTodo",
    values: [AddressLike, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleTodoStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTodo", data: BytesLike): Result;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTodo: TypedContractMethod<
    [_addr: AddressLike, _taskTitle: string, _taskDesc: string],
    [void],
    "nonpayable"
  >;

  deleteTodo: TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;

  getTodo: TypedContractMethod<
    [_addr: AddressLike],
    [TodoList.TodoStructOutput],
    "view"
  >;

  getTodos: TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;

  toggleTodoStatus: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTodo: TypedContractMethod<
    [_addr: AddressLike, _newTitle: string, _newDesc: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTodo"
  ): TypedContractMethod<
    [_addr: AddressLike, _taskTitle: string, _taskDesc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTodo"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTodo"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [TodoList.TodoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTodos"
  ): TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "toggleTodoStatus"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTodo"
  ): TypedContractMethod<
    [_addr: AddressLike, _newTitle: string, _newDesc: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
