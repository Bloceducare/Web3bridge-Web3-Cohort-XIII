/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TodoList, TodoListInterface } from "../../Todo.sol/TodoList";

const _abi = [
  {
    inputs: [],
    name: "INDEX_OUT_OF_BOUND",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "create_todo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "deleteTodo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getTodo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTodos",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "bool",
            name: "status",
            type: "bool",
          },
        ],
        internalType: "struct TodoList.Todo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "toogleTodo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "update_todo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015604f57600080fd5b506113ed8061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630bddc354146100675780636e3c6738146100835780638f08bb211461009f578063b5c90fd5146100bb578063c33926cb146100d7578063dd68afb6146100f5575b600080fd5b610081600480360381019061007c91906109db565b610127565b005b61009d600480360381019061009891906109db565b610219565b005b6100b960048036038101906100b49190610b4e565b6103b9565b005b6100d560048036038101906100d09190610bd9565b6104a3565b005b6100df6105a8565b6040516100ec9190610e26565b60405180910390f35b61010f600480360381019061010a91906109db565b61078d565b60405161011e93929190610ea1565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050808054905082106101a7576040517f25141a9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082815481106101ba576101b9610ee6565b5b906000526020600020906004020160030160009054906101000a900460ff16158183815481106101ed576101ec610ee6565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080805490508210610299576040517f25141a9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600182805490506102ab9190610f44565b815481106102bc576102bb610ee6565b5b90600052602060002090600402018183815481106102dd576102dc610ee6565b5b90600052602060002090600402016000820154816000015560018201816001019081610309919061119a565b506002820181600201908161031e919061119a565b506003820160009054906101000a900460ff168160030160006101000a81548160ff021916908315150217905550905050808054806103605761035f611282565b5b600190038181906000526020600020906004020160008082016000905560018201600061038d9190610934565b60028201600061039d9190610934565b6003820160006101000a81549060ff0219169055505090555050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905080805490508410610439576040517f25141a9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8281858154811061044d5761044c610ee6565b5b9060005260206000209060040201600101908161046a91906112b1565b508181858154811061047f5761047e610ee6565b5b9060005260206000209060040201600201908161049c91906112b1565b5050505050565b60016002546104b29190611383565b600281905550600060405180608001604052806002548152602001848152602001838152602001600015158152509050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101908161056a91906112b1565b50604082015181600201908161058091906112b1565b5060608201518160030160006101000a81548160ff0219169083151502179055505050505050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561078457838290600052602060002090600402016040518060800160405290816000820154815260200160018201805461064690610fa7565b80601f016020809104026020016040519081016040528092919081815260200182805461067290610fa7565b80156106bf5780601f10610694576101008083540402835291602001916106bf565b820191906000526020600020905b8154815290600101906020018083116106a257829003601f168201915b505050505081526020016002820180546106d890610fa7565b80601f016020809104026020016040519081016040528092919081815260200182805461070490610fa7565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152505081526020019060010190610609565b50505050905090565b606080600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085815481106107e4576107e3610ee6565b5b9060005260206000209060040201905080600101816002018260030160009054906101000a900460ff1682805461081a90610fa7565b80601f016020809104026020016040519081016040528092919081815260200182805461084690610fa7565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b505050505092508180546108a690610fa7565b80601f01602080910402602001604051908101604052809291908181526020018280546108d290610fa7565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b50505050509150935093509350509193909250565b50805461094090610fa7565b6000825580601f106109525750610971565b601f0160209004906000526020600020908101906109709190610974565b5b50565b5b8082111561098d576000816000905550600101610975565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109b8816109a5565b81146109c357600080fd5b50565b6000813590506109d5816109af565b92915050565b6000602082840312156109f1576109f061099b565b5b60006109ff848285016109c6565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a5b82610a12565b810181811067ffffffffffffffff82111715610a7a57610a79610a23565b5b80604052505050565b6000610a8d610991565b9050610a998282610a52565b919050565b600067ffffffffffffffff821115610ab957610ab8610a23565b5b610ac282610a12565b9050602081019050919050565b82818337600083830152505050565b6000610af1610aec84610a9e565b610a83565b905082815260208101848484011115610b0d57610b0c610a0d565b5b610b18848285610acf565b509392505050565b600082601f830112610b3557610b34610a08565b5b8135610b45848260208601610ade565b91505092915050565b600080600060608486031215610b6757610b6661099b565b5b6000610b75868287016109c6565b935050602084013567ffffffffffffffff811115610b9657610b956109a0565b5b610ba286828701610b20565b925050604084013567ffffffffffffffff811115610bc357610bc26109a0565b5b610bcf86828701610b20565b9150509250925092565b60008060408385031215610bf057610bef61099b565b5b600083013567ffffffffffffffff811115610c0e57610c0d6109a0565b5b610c1a85828601610b20565b925050602083013567ffffffffffffffff811115610c3b57610c3a6109a0565b5b610c4785828601610b20565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c86816109a5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cc6578082015181840152602081019050610cab565b60008484015250505050565b6000610cdd82610c8c565b610ce78185610c97565b9350610cf7818560208601610ca8565b610d0081610a12565b840191505092915050565b60008115159050919050565b610d2081610d0b565b82525050565b6000608083016000830151610d3e6000860182610c7d565b5060208301518482036020860152610d568282610cd2565b91505060408301518482036040860152610d708282610cd2565b9150506060830151610d856060860182610d17565b508091505092915050565b6000610d9c8383610d26565b905092915050565b6000602082019050919050565b6000610dbc82610c51565b610dc68185610c5c565b935083602082028501610dd885610c6d565b8060005b85811015610e145784840389528151610df58582610d90565b9450610e0083610da4565b925060208a01995050600181019050610ddc565b50829750879550505050505092915050565b60006020820190508181036000830152610e408184610db1565b905092915050565b600082825260208201905092915050565b6000610e6482610c8c565b610e6e8185610e48565b9350610e7e818560208601610ca8565b610e8781610a12565b840191505092915050565b610e9b81610d0b565b82525050565b60006060820190508181036000830152610ebb8186610e59565b90508181036020830152610ecf8185610e59565b9050610ede6040830184610e92565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f4f826109a5565b9150610f5a836109a5565b9250828203905081811115610f7257610f71610f15565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fbf57607f821691505b602082108103610fd257610fd1610f78565b5b50919050565b600081549050610fe781610fa7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611013565b61105a8683611013565b95508019841693508086168417925050509392505050565b6000819050919050565b600061109761109261108d846109a5565b611072565b6109a5565b9050919050565b6000819050919050565b6110b18361107c565b6110c56110bd8261109e565b848454611020565b825550505050565b600090565b6110da6110cd565b6110e58184846110a8565b505050565b5b81811015611109576110fe6000826110d2565b6001810190506110eb565b5050565b601f82111561114e5761111f81610fee565b61112884611003565b81016020851015611137578190505b61114b61114385611003565b8301826110ea565b50505b505050565b600082821c905092915050565b600061117160001984600802611153565b1980831691505092915050565b600061118a8383611160565b9150826002028217905092915050565b8181036111a8575050611280565b6111b182610fd8565b67ffffffffffffffff8111156111ca576111c9610a23565b5b6111d48254610fa7565b6111df82828561110d565b6000601f83116001811461120e57600084156111fc578287015490505b611206858261117e565b865550611279565b601f19841661121c87610fee565b965061122786610fee565b60005b8281101561124f5784890154825560018201915060018501945060208101905061122a565b8683101561126c5784890154611268601f891682611160565b8355505b6001600288020188555050505b5050505050505b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6112ba82610c8c565b67ffffffffffffffff8111156112d3576112d2610a23565b5b6112dd8254610fa7565b6112e882828561110d565b600060209050601f83116001811461131b5760008415611309578287015190505b611313858261117e565b86555061137b565b601f19841661132986610fee565b60005b828110156113515784890151825560018201915060208501945060208101905061132c565b8683101561136e578489015161136a601f891682611160565b8355505b6001600288020188555050505b505050505050565b600061138e826109a5565b9150611399836109a5565b92508282019050808211156113b1576113b0610f15565b5b9291505056fea26469706673582212204514261b4271dc28f42d12edf8ce207b104be5b6232926403c01c5cffccf30dd64736f6c634300081e0033";

type TodoListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TodoListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TodoList__factory extends ContractFactory {
  constructor(...args: TodoListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TodoList & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TodoList__factory {
    return super.connect(runner) as TodoList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TodoListInterface {
    return new Interface(_abi) as TodoListInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TodoList {
    return new Contract(address, _abi, runner) as unknown as TodoList;
  }
}
