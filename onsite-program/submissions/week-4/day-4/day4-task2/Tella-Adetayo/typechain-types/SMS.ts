/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SMS {
  export type StudentStruct = {
    id: BigNumberish;
    name: string;
    age: BigNumberish;
    gender: string;
    status: BigNumberish;
  };

  export type StudentStructOutput = [
    id: bigint,
    name: string,
    age: bigint,
    gender: string,
    status: bigint
  ] & { id: bigint; name: string; age: bigint; gender: string; status: bigint };
}

export interface SMSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createStudentInfo"
      | "deleteStudentInfo"
      | "getAllStudentInfo"
      | "getSingleStudentInfo"
      | "updateStudentInfo"
      | "updateStudentStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createStudentInfo",
    values: [AddressLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStudentInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStudentInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSingleStudentInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentInfo",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentStatus",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSingleStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentStatus",
    data: BytesLike
  ): Result;
}

export interface SMS extends BaseContract {
  connect(runner?: ContractRunner | null): SMS;
  waitForDeployment(): Promise<this>;

  interface: SMSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createStudentInfo: TypedContractMethod<
    [_account: AddressLike, _name: string, _age: BigNumberish, _gender: string],
    [void],
    "nonpayable"
  >;

  deleteStudentInfo: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllStudentInfo: TypedContractMethod<
    [_account: AddressLike],
    [SMS.StudentStructOutput[]],
    "view"
  >;

  getSingleStudentInfo: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [[bigint, string, bigint, string, bigint]],
    "view"
  >;

  updateStudentInfo: TypedContractMethod<
    [
      _account: AddressLike,
      _index: BigNumberish,
      _name: string,
      _age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateStudentStatus: TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createStudentInfo"
  ): TypedContractMethod<
    [_account: AddressLike, _name: string, _age: BigNumberish, _gender: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteStudentInfo"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllStudentInfo"
  ): TypedContractMethod<
    [_account: AddressLike],
    [SMS.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSingleStudentInfo"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish],
    [[bigint, string, bigint, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStudentInfo"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _index: BigNumberish,
      _name: string,
      _age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudentStatus"
  ): TypedContractMethod<
    [_account: AddressLike, _index: BigNumberish, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
