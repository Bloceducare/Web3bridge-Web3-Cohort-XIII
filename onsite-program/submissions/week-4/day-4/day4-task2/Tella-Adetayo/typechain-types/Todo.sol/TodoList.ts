/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TodoList {
  export type TodoStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    status: boolean;
  };

  export type TodoStructOutput = [
    id: bigint,
    title: string,
    description: string,
    status: boolean
  ] & { id: bigint; title: string; description: string; status: boolean };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create_todo"
      | "deleteTodo"
      | "getTodo"
      | "getTodos"
      | "toogleTodo"
      | "update_todo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create_todo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTodos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toogleTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update_todo",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "create_todo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTodos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toogleTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "update_todo",
    data: BytesLike
  ): Result;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create_todo: TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;

  deleteTodo: TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  getTodo: TypedContractMethod<
    [_index: BigNumberish],
    [[string, string, boolean]],
    "view"
  >;

  getTodos: TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;

  toogleTodo: TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  update_todo: TypedContractMethod<
    [_index: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create_todo"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTodo"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTodo"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [[string, string, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTodos"
  ): TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "toogleTodo"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "update_todo"
  ): TypedContractMethod<
    [_index: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
