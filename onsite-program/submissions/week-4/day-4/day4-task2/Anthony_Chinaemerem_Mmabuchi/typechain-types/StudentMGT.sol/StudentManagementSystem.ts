/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StudentManagementSystem {
  export type StudentStruct = {
    firstname: string;
    lastname: string;
    age: BigNumberish;
    house_address: string;
    id: AddressLike;
    status: BigNumberish;
    studentId: BigNumberish;
    exists: boolean;
  };

  export type StudentStructOutput = [
    firstname: string,
    lastname: string,
    age: bigint,
    house_address: string,
    id: string,
    status: bigint,
    studentId: bigint,
    exists: boolean
  ] & {
    firstname: string;
    lastname: string;
    age: bigint;
    house_address: string;
    id: string;
    status: bigint;
    studentId: bigint;
    exists: boolean;
  };
}

export interface StudentManagementSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteStudent"
      | "getAllStudents"
      | "getMyProfile"
      | "getStudentProfile"
      | "getStudentsByStatus"
      | "getTotalActiveStudents"
      | "isRegistered"
      | "owner"
      | "registerStudent"
      | "students"
      | "totalStudents"
      | "updateStudentDetails"
      | "updateStudentStatus"
      | "userToStudent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deleteStudent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStudents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentDetails",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStudentStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToStudent",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStudentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToStudent",
    data: BytesLike
  ): Result;
}

export interface StudentManagementSystem extends BaseContract {
  connect(runner?: ContractRunner | null): StudentManagementSystem;
  waitForDeployment(): Promise<this>;

  interface: StudentManagementSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteStudent: TypedContractMethod<[], [void], "nonpayable">;

  getAllStudents: TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;

  getMyProfile: TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;

  getStudentProfile: TypedContractMethod<
    [_studentAddress: AddressLike],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;

  getStudentsByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;

  getTotalActiveStudents: TypedContractMethod<[], [bigint], "view">;

  isRegistered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerStudent: TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      _age: BigNumberish,
      _house_address: string
    ],
    [void],
    "nonpayable"
  >;

  students: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, bigint, boolean] & {
        firstname: string;
        lastname: string;
        age: bigint;
        house_address: string;
        id: string;
        status: bigint;
        studentId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  totalStudents: TypedContractMethod<[], [bigint], "view">;

  updateStudentDetails: TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      _age: BigNumberish,
      _house_address: string
    ],
    [void],
    "nonpayable"
  >;

  updateStudentStatus: TypedContractMethod<
    [_studentAddress: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;

  userToStudent: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, bigint, bigint, boolean] & {
        firstname: string;
        lastname: string;
        age: bigint;
        house_address: string;
        id: string;
        status: bigint;
        studentId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteStudent"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllStudents"
  ): TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyProfile"
  ): TypedContractMethod<
    [],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentProfile"
  ): TypedContractMethod<
    [_studentAddress: AddressLike],
    [StudentManagementSystem.StudentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentsByStatus"
  ): TypedContractMethod<
    [_status: BigNumberish],
    [StudentManagementSystem.StudentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalActiveStudents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      _age: BigNumberish,
      _house_address: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, string, bigint, bigint, boolean] & {
        firstname: string;
        lastname: string;
        age: bigint;
        house_address: string;
        id: string;
        status: bigint;
        studentId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalStudents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateStudentDetails"
  ): TypedContractMethod<
    [
      _firstname: string,
      _lastname: string,
      _age: BigNumberish,
      _house_address: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStudentStatus"
  ): TypedContractMethod<
    [_studentAddress: AddressLike, _status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userToStudent"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, string, string, bigint, bigint, boolean] & {
        firstname: string;
        lastname: string;
        age: bigint;
        house_address: string;
        id: string;
        status: bigint;
        studentId: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  filters: {};
}
