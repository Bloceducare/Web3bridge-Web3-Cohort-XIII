/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TodoList {
  export type TodoStruct = {
    title: string;
    description: string;
    completed: boolean;
    timestamp: BigNumberish;
    id: BigNumberish;
  };

  export type TodoStructOutput = [
    title: string,
    description: string,
    completed: boolean,
    timestamp: bigint,
    id: bigint
  ] & {
    title: string;
    description: string;
    completed: boolean;
    timestamp: bigint;
    id: bigint;
  };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeTodo"
      | "createTask"
      | "deleteTodo"
      | "getAllTasks"
      | "getMyTodos"
      | "getUserTodoCount"
      | "getUserTodos"
      | "owner"
      | "todos"
      | "userTodoCount"
      | "userTodos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTask",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTodos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTodoCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTodos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "todos", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "userTodoCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTodos",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeTodo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyTodos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserTodoCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTodos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "todos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTodoCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTodos", data: BytesLike): Result;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeTodo: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTask: TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;

  deleteTodo: TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  getAllTasks: TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;

  getMyTodos: TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;

  getUserTodoCount: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getUserTodos: TypedContractMethod<
    [_user: AddressLike],
    [TodoList.TodoStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  todos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        title: string;
        description: string;
        completed: boolean;
        timestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;

  userTodoCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userTodos: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        title: string;
        description: string;
        completed: boolean;
        timestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeTodo"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTask"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTodo"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTasks"
  ): TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMyTodos"
  ): TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUserTodoCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTodos"
  ): TypedContractMethod<
    [_user: AddressLike],
    [TodoList.TodoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "todos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        title: string;
        description: string;
        completed: boolean;
        timestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTodoCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userTodos"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, boolean, bigint, bigint] & {
        title: string;
        description: string;
        completed: boolean;
        timestamp: bigint;
        id: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
