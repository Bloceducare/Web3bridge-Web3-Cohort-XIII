/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Access {
  export type EmployeeStruct = {
    name: string;
    role: BigNumberish;
    isEmployed: boolean;
    employeeType: BigNumberish;
  };

  export type EmployeeStructOutput = [
    name: string,
    role: bigint,
    isEmployed: boolean,
    employeeType: bigint
  ] & { name: string; role: bigint; isEmployed: boolean; employeeType: bigint };
}

export interface AccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AddEmployee"
      | "Employees"
      | "EmployeesList"
      | "UpdateEmployee"
      | "canAccessGarage"
      | "employees"
      | "getEmployeeDetail"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AddEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "Employees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "EmployeesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeDetail",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "AddEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EmployeesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeDetail",
    data: BytesLike
  ): Result;
}

export interface Access extends BaseContract {
  connect(runner?: ContractRunner | null): Access;
  waitForDeployment(): Promise<this>;

  interface: AccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AddEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;

  Employees: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        employeeType: bigint;
      }
    ],
    "view"
  >;

  EmployeesList: TypedContractMethod<
    [],
    [Access.EmployeeStructOutput[]],
    "view"
  >;

  UpdateEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _new_name: string,
      _new_role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;

  canAccessGarage: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        employeeType: bigint;
      }
    ],
    "view"
  >;

  getEmployeeDetail: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Access.EmployeeStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AddEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Employees"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        employeeType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "EmployeesList"
  ): TypedContractMethod<[], [Access.EmployeeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "UpdateEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _new_name: string,
      _new_role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        employeeType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeDetail"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [Access.EmployeeStructOutput],
    "view"
  >;

  filters: {};
}
