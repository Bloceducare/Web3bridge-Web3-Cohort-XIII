/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GarageAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PAYMENT_AMOUNT"
      | "addOrUpdateEmployee"
      | "canAccessGarage"
      | "depositFunds"
      | "employeeList"
      | "employees"
      | "getAllEmployees"
      | "getContractBalance"
      | "getEmployeeDetails"
      | "owner"
      | "payEmployee"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EmployeePaid" | "FundsDeposited" | "FundsWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PAYMENT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOrUpdateEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "employeeList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PAYMENT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrUpdateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace EmployeePaidEvent {
  export type InputTuple = [
    employee: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    employee: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GarageAccess extends BaseContract {
  connect(runner?: ContractRunner | null): GarageAccess;
  waitForDeployment(): Promise<this>;

  interface: GarageAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PAYMENT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  addOrUpdateEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;

  canAccessGarage: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  employeeList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        lastPaymentTimestamp: bigint;
        totalPaymentsReceived: bigint;
      }
    ],
    "view"
  >;

  getAllEmployees: TypedContractMethod<[], [string[]], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getEmployeeDetails: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        lastPaymentTimestamp: bigint;
        totalPaymentsReceived: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payEmployee: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PAYMENT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addOrUpdateEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _name: string,
      _role: BigNumberish,
      _isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "employeeList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        lastPaymentTimestamp: bigint;
        totalPaymentsReceived: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeDetails"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [
      [string, bigint, boolean, bigint, bigint] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        lastPaymentTimestamp: bigint;
        totalPaymentsReceived: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payEmployee"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EmployeePaid"
  ): TypedContractEvent<
    EmployeePaidEvent.InputTuple,
    EmployeePaidEvent.OutputTuple,
    EmployeePaidEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;

  filters: {
    "EmployeePaid(address,uint256,uint256)": TypedContractEvent<
      EmployeePaidEvent.InputTuple,
      EmployeePaidEvent.OutputTuple,
      EmployeePaidEvent.OutputObject
    >;
    EmployeePaid: TypedContractEvent<
      EmployeePaidEvent.InputTuple,
      EmployeePaidEvent.OutputTuple,
      EmployeePaidEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
  };
}
