/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Web3GarageAccessInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "allEmployees"
      | "canAccessGarage"
      | "employees"
      | "getAllEmployees"
      | "getEmployee"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allEmployees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAccessGarage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAccessGarage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
}

export interface Web3GarageAccess extends BaseContract {
  connect(runner?: ContractRunner | null): Web3GarageAccess;
  waitForDeployment(): Promise<this>;

  interface: Web3GarageAccessInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [
      employeeAddress: AddressLike,
      name: string,
      role: BigNumberish,
      isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;

  allEmployees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  canAccessGarage: TypedContractMethod<
    [employeeAddress: AddressLike],
    [boolean],
    "view"
  >;

  employees: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
      }
    ],
    "view"
  >;

  getAllEmployees: TypedContractMethod<[], [string[]], "view">;

  getEmployee: TypedContractMethod<
    [employeeAddress: AddressLike],
    [
      [string, bigint, boolean, boolean] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        hasGarageAccess: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      employeeAddress: AddressLike,
      name: string,
      role: BigNumberish,
      isEmployed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allEmployees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "canAccessGarage"
  ): TypedContractMethod<[employeeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllEmployees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEmployee"
  ): TypedContractMethod<
    [employeeAddress: AddressLike],
    [
      [string, bigint, boolean, boolean] & {
        name: string;
        role: bigint;
        isEmployed: boolean;
        hasGarageAccess: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
