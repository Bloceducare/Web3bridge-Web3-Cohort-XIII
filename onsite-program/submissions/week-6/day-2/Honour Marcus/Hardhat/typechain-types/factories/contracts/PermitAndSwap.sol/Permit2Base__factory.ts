/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Permit2Base,
  Permit2BaseInterface,
} from "../../../contracts/PermitAndSwap.sol/Permit2Base";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract IPermit2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610243380380610243833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b60805161012d61011660003960006049015261012d6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806312261ee714602d575b600080fd5b60336047565b604051603e919060de565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060aa60a660a284606b565b608b565b606b565b9050919050565b600060ba826095565b9050919050565b600060ca8260b1565b9050919050565b60d88160c1565b82525050565b600060208201905060f1600083018460d1565b9291505056fea26469706673582212206a88b4192c190578f6c1b850e478b68dcfaa3baaa3b0f4f8b4b924a3b950314864736f6c634300081e0033";

type Permit2BaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Permit2BaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permit2Base__factory extends ContractFactory {
  constructor(...args: Permit2BaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_permit2, overrides || {});
  }
  override deploy(
    _permit2: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_permit2, overrides || {}) as Promise<
      Permit2Base & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Permit2Base__factory {
    return super.connect(runner) as Permit2Base__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Permit2BaseInterface {
    return new Interface(_abi) as Permit2BaseInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Permit2Base {
    return new Contract(address, _abi, runner) as unknown as Permit2Base;
  }
}
