/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PermitAndSwap,
  PermitAndSwapInterface,
} from "../../../contracts/PermitAndSwap.sol/PermitAndSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_uniswapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract IPermit2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct ISignatureTransfer.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        name: "transferDetails",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "permit2Swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapRouter",
    outputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610ddb380380610ddb83398181016040528101906100329190610106565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050610146565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d3826100a8565b9050919050565b6100e3816100c8565b81146100ee57600080fd5b50565b600081519050610100816100da565b92915050565b6000806040838503121561011d5761011c6100a3565b5b600061012b858286016100f1565b925050602061013c858286016100f1565b9150509250929050565b60805160a051610c5c61017f60003960008181610177015281816101fe01526102dd01526000818160a001526102b90152610c5c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063019696301461004657806312261ee714610062578063735de9f714610080575b600080fd5b610060600480360381019061005b91906105f7565b61009e565b005b61006a6102b7565b604051610077919061073c565b60405180910390f35b6100886102db565b6040516100959190610778565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166330f28b7a8a8a8a8a8a6040518663ffffffff1660e01b81526004016100ff9594939291906108ad565b600060405180830381600087803b15801561011957600080fd5b505af115801561012d573d6000803e3d6000fd5b5050505083836000818110610145576101446108fc565b5b905060200201602081019061015a919061092b565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008a602001516040518363ffffffff1660e01b81526004016101b8929190610967565b6020604051808303816000875af11580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb91906109c8565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed173989602001518487878c876040518763ffffffff1660e01b815260040161026396959493929190610aa9565b6000604051808303816000875af1158015610282573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102ab9190610bdd565b50505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61036182610318565b810181811067ffffffffffffffff821117156103805761037f610329565b5b80604052505050565b60006103936102ff565b905061039f8282610358565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103cf826103a4565b9050919050565b6103df816103c4565b81146103ea57600080fd5b50565b6000813590506103fc816103d6565b92915050565b6000819050919050565b61041581610402565b811461042057600080fd5b50565b6000813590506104328161040c565b92915050565b60006040828403121561044e5761044d610313565b5b6104586040610389565b90506000610468848285016103ed565b600083015250602061047c84828501610423565b60208301525092915050565b60006080828403121561049e5761049d610313565b5b6104a86060610389565b905060006104b884828501610438565b60008301525060406104cc84828501610423565b60208301525060606104e084828501610423565b60408301525092915050565b60006040828403121561050257610501610313565b5b61050c6040610389565b9050600061051c848285016103ed565b600083015250602061053084828501610423565b60208301525092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105615761056061053c565b5b8235905067ffffffffffffffff81111561057e5761057d610541565b5b60208301915083600182028301111561059a57610599610546565b5b9250929050565b60008083601f8401126105b7576105b661053c565b5b8235905067ffffffffffffffff8111156105d4576105d3610541565b5b6020830191508360208202830111156105f0576105ef610546565b5b9250929050565b60008060008060008060008060006101608a8c03121561061a57610619610309565b5b60006106288c828d01610488565b99505060806106398c828d016104ec565b98505060c061064a8c828d016103ed565b97505060e08a013567ffffffffffffffff81111561066b5761066a61030e565b5b6106778c828d0161054b565b96509650506101008a013567ffffffffffffffff81111561069b5761069a61030e565b5b6106a78c828d016105a1565b94509450506101206106bb8c828d01610423565b9250506101406106cd8c828d01610423565b9150509295985092959850929598565b6000819050919050565b60006107026106fd6106f8846103a4565b6106dd565b6103a4565b9050919050565b6000610714826106e7565b9050919050565b600061072682610709565b9050919050565b6107368161071b565b82525050565b6000602082019050610751600083018461072d565b92915050565b600061076282610709565b9050919050565b61077281610757565b82525050565b600060208201905061078d6000830184610769565b92915050565b61079c816103c4565b82525050565b6107ab81610402565b82525050565b6040820160008201516107c76000850182610793565b5060208201516107da60208501826107a2565b50505050565b6080820160008201516107f660008501826107b1565b50602082015161080960408501826107a2565b50604082015161081c60608501826107a2565b50505050565b6040820160008201516108386000850182610793565b50602082015161084b60208501826107a2565b50505050565b61085a816103c4565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b600061088c8385610860565b9350610899838584610871565b6108a283610318565b840190509392505050565b6000610100820190506108c360008301886107e0565b6108d06080830187610822565b6108dd60c0830186610851565b81810360e08301526108f0818486610880565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561094157610940610309565b5b600061094f848285016103ed565b91505092915050565b61096181610402565b82525050565b600060408201905061097c6000830185610851565b6109896020830184610958565b9392505050565b60008115159050919050565b6109a581610990565b81146109b057600080fd5b50565b6000815190506109c28161099c565b92915050565b6000602082840312156109de576109dd610309565b5b60006109ec848285016109b3565b91505092915050565b600082825260208201905092915050565b6000819050919050565b6000610a1c8383610793565b60208301905092915050565b6000610a3760208401846103ed565b905092915050565b6000602082019050919050565b6000610a5883856109f5565b9350610a6382610a06565b8060005b85811015610a9c57610a798284610a28565b610a838882610a10565b9750610a8e83610a3f565b925050600181019050610a67565b5085925050509392505050565b600060a082019050610abe6000830189610958565b610acb6020830188610958565b8181036040830152610ade818688610a4c565b9050610aed6060830185610851565b610afa6080830184610958565b979650505050505050565b600067ffffffffffffffff821115610b2057610b1f610329565b5b602082029050602081019050919050565b600081519050610b408161040c565b92915050565b6000610b59610b5484610b05565b610389565b90508083825260208201905060208402830185811115610b7c57610b7b610546565b5b835b81811015610ba55780610b918882610b31565b845260208401935050602081019050610b7e565b5050509392505050565b600082601f830112610bc457610bc361053c565b5b8151610bd4848260208601610b46565b91505092915050565b600060208284031215610bf357610bf2610309565b5b600082015167ffffffffffffffff811115610c1157610c1061030e565b5b610c1d84828501610baf565b9150509291505056fea264697066735822122026083e3f9dd53e51d50005d5de8752ac91156663d3fb7b82762007158487f24a64736f6c634300081e0033";

type PermitAndSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermitAndSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermitAndSwap__factory extends ContractFactory {
  constructor(...args: PermitAndSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _permit2: AddressLike,
    _uniswapRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _permit2,
      _uniswapRouter,
      overrides || {}
    );
  }
  override deploy(
    _permit2: AddressLike,
    _uniswapRouter: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_permit2, _uniswapRouter, overrides || {}) as Promise<
      PermitAndSwap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PermitAndSwap__factory {
    return super.connect(runner) as PermitAndSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermitAndSwapInterface {
    return new Interface(_abi) as PermitAndSwapInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermitAndSwap {
    return new Contract(address, _abi, runner) as unknown as PermitAndSwap;
  }
}
