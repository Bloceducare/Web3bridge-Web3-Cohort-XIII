/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PiggyBankFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPiggyBanks"
      | "createPiggyBank"
      | "emitPenaltyReceived"
      | "emitTokenPenaltyReceived"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "userPiggyBanks"
      | "withdrawPenalties"
      | "withdrawPenaltyTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PenaltyReceived"
      | "PiggyBankCreated"
      | "TokenPenaltyReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allPiggyBanks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPiggyBank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitPenaltyReceived",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitTokenPenaltyReceived",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPiggyBanks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPenalties",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPenaltyTokens",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitPenaltyReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitTokenPenaltyReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPenalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPenaltyTokens",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PenaltyReceivedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PiggyBankCreatedEvent {
  export type InputTuple = [user: AddressLike, piggyBank: AddressLike];
  export type OutputTuple = [user: string, piggyBank: string];
  export interface OutputObject {
    user: string;
    piggyBank: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPenaltyReceivedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBankFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBankFactory;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPiggyBanks: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createPiggyBank: TypedContractMethod<[], [string], "nonpayable">;

  emitPenaltyReceived: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emitTokenPenaltyReceived: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPiggyBanks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  withdrawPenalties: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPenaltyTokens: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPiggyBanks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createPiggyBank"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "emitPenaltyReceived"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emitTokenPenaltyReceived"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPiggyBanks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPenalties"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPenaltyTokens"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PenaltyReceived"
  ): TypedContractEvent<
    PenaltyReceivedEvent.InputTuple,
    PenaltyReceivedEvent.OutputTuple,
    PenaltyReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PiggyBankCreated"
  ): TypedContractEvent<
    PiggyBankCreatedEvent.InputTuple,
    PiggyBankCreatedEvent.OutputTuple,
    PiggyBankCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPenaltyReceived"
  ): TypedContractEvent<
    TokenPenaltyReceivedEvent.InputTuple,
    TokenPenaltyReceivedEvent.OutputTuple,
    TokenPenaltyReceivedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PenaltyReceived(uint256)": TypedContractEvent<
      PenaltyReceivedEvent.InputTuple,
      PenaltyReceivedEvent.OutputTuple,
      PenaltyReceivedEvent.OutputObject
    >;
    PenaltyReceived: TypedContractEvent<
      PenaltyReceivedEvent.InputTuple,
      PenaltyReceivedEvent.OutputTuple,
      PenaltyReceivedEvent.OutputObject
    >;

    "PiggyBankCreated(address,address)": TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
    PiggyBankCreated: TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;

    "TokenPenaltyReceived(address,uint256)": TypedContractEvent<
      TokenPenaltyReceivedEvent.InputTuple,
      TokenPenaltyReceivedEvent.OutputTuple,
      TokenPenaltyReceivedEvent.OutputObject
    >;
    TokenPenaltyReceived: TypedContractEvent<
      TokenPenaltyReceivedEvent.InputTuple,
      TokenPenaltyReceivedEvent.OutputTuple,
      TokenPenaltyReceivedEvent.OutputObject
    >;
  };
}
