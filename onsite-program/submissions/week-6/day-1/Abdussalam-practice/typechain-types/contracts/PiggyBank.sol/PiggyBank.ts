/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PiggyBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountOwner"
      | "createSavingsAccount"
      | "depositEth"
      | "depositToken"
      | "factory"
      | "getEthBalance"
      | "getTokenBalance"
      | "owner"
      | "savingsAccounts"
      | "totalAccounts"
      | "withdrawEth"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EthDeposited"
      | "EthWithdrawal"
      | "SavingsAccountCreated"
      | "TokenDeposited"
      | "TokenWithdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSavingsAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "savingsAccounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSavingsAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "savingsAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace EthDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    accountId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, accountId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    accountId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthWithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    accountId: BigNumberish,
    amount: BigNumberish,
    penaltyApplied: boolean
  ];
  export type OutputTuple = [
    user: string,
    accountId: bigint,
    amount: bigint,
    penaltyApplied: boolean
  ];
  export interface OutputObject {
    user: string;
    accountId: bigint;
    amount: bigint;
    penaltyApplied: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SavingsAccountCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    accountId: BigNumberish,
    lockPeriod: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    accountId: bigint,
    lockPeriod: bigint
  ];
  export interface OutputObject {
    user: string;
    accountId: bigint;
    lockPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    accountId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    accountId: bigint,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    accountId: bigint;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawalEvent {
  export type InputTuple = [
    user: AddressLike,
    accountId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    penaltyApplied: boolean
  ];
  export type OutputTuple = [
    user: string,
    accountId: bigint,
    token: string,
    amount: bigint,
    penaltyApplied: boolean
  ];
  export interface OutputObject {
    user: string;
    accountId: bigint;
    token: string;
    amount: bigint;
    penaltyApplied: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBank extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBank;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountOwner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createSavingsAccount: TypedContractMethod<
    [lockPeriod: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositEth: TypedContractMethod<[accountId: BigNumberish], [void], "payable">;

  depositToken: TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getEthBalance: TypedContractMethod<
    [accountId: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenBalance: TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  savingsAccounts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        ethBalance: bigint;
        lockPeriod: bigint;
        depositTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  totalAccounts: TypedContractMethod<[], [bigint], "view">;

  withdrawEth: TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createSavingsAccount"
  ): TypedContractMethod<[lockPeriod: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "depositEth"
  ): TypedContractMethod<[accountId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEthBalance"
  ): TypedContractMethod<[accountId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "savingsAccounts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        ethBalance: bigint;
        lockPeriod: bigint;
        depositTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawEth"
  ): TypedContractMethod<
    [accountId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [accountId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EthDeposited"
  ): TypedContractEvent<
    EthDepositedEvent.InputTuple,
    EthDepositedEvent.OutputTuple,
    EthDepositedEvent.OutputObject
  >;
  getEvent(
    key: "EthWithdrawal"
  ): TypedContractEvent<
    EthWithdrawalEvent.InputTuple,
    EthWithdrawalEvent.OutputTuple,
    EthWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "SavingsAccountCreated"
  ): TypedContractEvent<
    SavingsAccountCreatedEvent.InputTuple,
    SavingsAccountCreatedEvent.OutputTuple,
    SavingsAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeposited"
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWithdrawal"
  ): TypedContractEvent<
    TokenWithdrawalEvent.InputTuple,
    TokenWithdrawalEvent.OutputTuple,
    TokenWithdrawalEvent.OutputObject
  >;

  filters: {
    "EthDeposited(address,uint256,uint256)": TypedContractEvent<
      EthDepositedEvent.InputTuple,
      EthDepositedEvent.OutputTuple,
      EthDepositedEvent.OutputObject
    >;
    EthDeposited: TypedContractEvent<
      EthDepositedEvent.InputTuple,
      EthDepositedEvent.OutputTuple,
      EthDepositedEvent.OutputObject
    >;

    "EthWithdrawal(address,uint256,uint256,bool)": TypedContractEvent<
      EthWithdrawalEvent.InputTuple,
      EthWithdrawalEvent.OutputTuple,
      EthWithdrawalEvent.OutputObject
    >;
    EthWithdrawal: TypedContractEvent<
      EthWithdrawalEvent.InputTuple,
      EthWithdrawalEvent.OutputTuple,
      EthWithdrawalEvent.OutputObject
    >;

    "SavingsAccountCreated(address,uint256,uint256)": TypedContractEvent<
      SavingsAccountCreatedEvent.InputTuple,
      SavingsAccountCreatedEvent.OutputTuple,
      SavingsAccountCreatedEvent.OutputObject
    >;
    SavingsAccountCreated: TypedContractEvent<
      SavingsAccountCreatedEvent.InputTuple,
      SavingsAccountCreatedEvent.OutputTuple,
      SavingsAccountCreatedEvent.OutputObject
    >;

    "TokenDeposited(address,uint256,address,uint256)": TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;

    "TokenWithdrawal(address,uint256,address,uint256,bool)": TypedContractEvent<
      TokenWithdrawalEvent.InputTuple,
      TokenWithdrawalEvent.OutputTuple,
      TokenWithdrawalEvent.OutputObject
    >;
    TokenWithdrawal: TypedContractEvent<
      TokenWithdrawalEvent.InputTuple,
      TokenWithdrawalEvent.OutputTuple,
      TokenWithdrawalEvent.OutputObject
    >;
  };
}
