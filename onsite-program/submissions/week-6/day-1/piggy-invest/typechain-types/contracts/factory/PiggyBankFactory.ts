/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PiggyBankFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "allPiggyBanks"
      | "createPiggyBank"
      | "getAllPiggyBanks"
      | "getPiggyBanksByOwner"
      | "ownerToBanks"
      | "totalPiggyBanks"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PiggyBankCreated"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allPiggyBanks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPiggyBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPiggyBanks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPiggyBanksByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToBanks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPiggyBanks",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPiggyBanksByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPiggyBanks",
    data: BytesLike
  ): Result;
}

export namespace PiggyBankCreatedEvent {
  export type InputTuple = [
    piggyBank: AddressLike,
    owner: AddressLike,
    admin: AddressLike
  ];
  export type OutputTuple = [piggyBank: string, owner: string, admin: string];
  export interface OutputObject {
    piggyBank: string;
    owner: string;
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBankFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBankFactory;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  allPiggyBanks: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createPiggyBank: TypedContractMethod<
    [owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getAllPiggyBanks: TypedContractMethod<[], [string[]], "view">;

  getPiggyBanksByOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  ownerToBanks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  totalPiggyBanks: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allPiggyBanks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createPiggyBank"
  ): TypedContractMethod<[owner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPiggyBanks"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPiggyBanksByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "ownerToBanks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalPiggyBanks"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PiggyBankCreated"
  ): TypedContractEvent<
    PiggyBankCreatedEvent.InputTuple,
    PiggyBankCreatedEvent.OutputTuple,
    PiggyBankCreatedEvent.OutputObject
  >;

  filters: {
    "PiggyBankCreated(address,address,address)": TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
    PiggyBankCreated: TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
  };
}
