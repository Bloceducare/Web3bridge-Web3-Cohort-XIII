/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BP_DENOM"
      | "BREAKING_FEE"
      | "admin"
      | "adminRescue"
      | "createSavingsPlan"
      | "depositERC20"
      | "depositETH"
      | "getAllPlans"
      | "getPlanCount"
      | "getPlanDetails"
      | "getTimeRemaining"
      | "getTotalBalance"
      | "isLocked"
      | "owner"
      | "planCounter"
      | "savingsPlans"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "PlanCreated" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BP_DENOM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BREAKING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminRescue",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSavingsPlan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLocked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "planCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BP_DENOM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BREAKING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminRescue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSavingsPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    planId: BigNumberish,
    who: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [planId: bigint, who: string, amount: bigint];
  export interface OutputObject {
    planId: bigint;
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    token: AddressLike,
    lockPeriod: BigNumberish
  ];
  export type OutputTuple = [planId: bigint, token: string, lockPeriod: bigint];
  export interface OutputObject {
    planId: bigint;
    token: string;
    lockPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    planId: BigNumberish,
    who: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    planId: bigint,
    who: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    planId: bigint;
    who: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBank extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBank;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BP_DENOM: TypedContractMethod<[], [bigint], "view">;

  BREAKING_FEE: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  adminRescue: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;

  createSavingsPlan: TypedContractMethod<
    [token: AddressLike, lockPeriod: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<[planId: BigNumberish], [void], "payable">;

  getAllPlans: TypedContractMethod<
    [],
    [
      [
        bigint[],
        bigint[],
        string[],
        bigint[],
        bigint[],
        boolean[],
        boolean[]
      ] & {
        planIds: bigint[];
        amounts: bigint[];
        tokens: string[];
        lockPeriods: bigint[];
        unlockTimes: bigint[];
        isActiveArray: boolean[];
        isETHArray: boolean[];
      }
    ],
    "view"
  >;

  getPlanCount: TypedContractMethod<[], [bigint], "view">;

  getPlanDetails: TypedContractMethod<
    [planId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        token: string;
        lockPeriod: bigint;
        unlockTime: bigint;
        isActive: boolean;
        isETH: boolean;
      }
    ],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<
    [planId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalBalance: TypedContractMethod<
    [],
    [
      [bigint, string[], bigint[]] & {
        ethTotal: bigint;
        tokenAddresses: string[];
        tokenBalances: bigint[];
      }
    ],
    "view"
  >;

  isLocked: TypedContractMethod<[planId: BigNumberish], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  planCounter: TypedContractMethod<[], [bigint], "view">;

  savingsPlans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        token: string;
        lockPeriod: bigint;
        unlockTime: bigint;
        isActive: boolean;
        isETH: boolean;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<
    [planId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BP_DENOM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BREAKING_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminRescue"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSavingsPlan"
  ): TypedContractMethod<
    [token: AddressLike, lockPeriod: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[planId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getAllPlans"
  ): TypedContractMethod<
    [],
    [
      [
        bigint[],
        bigint[],
        string[],
        bigint[],
        bigint[],
        boolean[],
        boolean[]
      ] & {
        planIds: bigint[];
        amounts: bigint[];
        tokens: string[];
        lockPeriods: bigint[];
        unlockTimes: bigint[];
        isActiveArray: boolean[];
        isETHArray: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlanCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlanDetails"
  ): TypedContractMethod<
    [planId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        token: string;
        lockPeriod: bigint;
        unlockTime: bigint;
        isActive: boolean;
        isETH: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[planId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<
    [],
    [
      [bigint, string[], bigint[]] & {
        ethTotal: bigint;
        tokenAddresses: string[];
        tokenBalances: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLocked"
  ): TypedContractMethod<[planId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "planCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "savingsPlans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean] & {
        amount: bigint;
        token: string;
        lockPeriod: bigint;
        unlockTime: bigint;
        isActive: boolean;
        isETH: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [planId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[planId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(uint256,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "PlanCreated(uint256,address,uint256)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "Withdraw(uint256,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
