/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyBankFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPiggyBanks"
      | "createPiggyBank"
      | "emergencyClosePiggyBank"
      | "getAllPiggyBanks"
      | "getFactoryBalance"
      | "getFactoryTokenBalance"
      | "getTotalBalance"
      | "getTotalPiggyBankCount"
      | "getUserBalance"
      | "getUserPiggyBankCount"
      | "getUserPiggyBanks"
      | "owner"
      | "removePiggyBank"
      | "renounceOwnership"
      | "transferOwnership"
      | "userPiggyBankCount"
      | "userPiggyBanks"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PiggyBankCreated"
      | "PiggyBankRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allPiggyBanks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPiggyBank",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyClosePiggyBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPiggyBanks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPiggyBankCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPiggyBankCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPiggyBanks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePiggyBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPiggyBankCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPiggyBanks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyClosePiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPiggyBankCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPiggyBankCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPiggyBankCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PiggyBankCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    piggyBank: AddressLike,
    lockPeriod: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    piggyBank: string,
    lockPeriod: bigint
  ];
  export interface OutputObject {
    user: string;
    piggyBank: string;
    lockPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PiggyBankRemovedEvent {
  export type InputTuple = [user: AddressLike, piggyBank: AddressLike];
  export type OutputTuple = [user: string, piggyBank: string];
  export interface OutputObject {
    user: string;
    piggyBank: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBankFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBankFactory;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPiggyBanks: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createPiggyBank: TypedContractMethod<
    [lockPeriod: BigNumberish, tokenAddress: AddressLike],
    [void],
    "payable"
  >;

  emergencyClosePiggyBank: TypedContractMethod<
    [piggyBankAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllPiggyBanks: TypedContractMethod<[], [string[]], "view">;

  getFactoryBalance: TypedContractMethod<[], [bigint], "view">;

  getFactoryTokenBalance: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getTotalBalance: TypedContractMethod<[], [bigint], "view">;

  getTotalPiggyBankCount: TypedContractMethod<[], [bigint], "view">;

  getUserBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserPiggyBankCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserPiggyBanks: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removePiggyBank: TypedContractMethod<
    [piggyBankAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPiggyBankCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  userPiggyBanks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  withdrawFees: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPiggyBanks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createPiggyBank"
  ): TypedContractMethod<
    [lockPeriod: BigNumberish, tokenAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyClosePiggyBank"
  ): TypedContractMethod<[piggyBankAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPiggyBanks"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFactoryTokenBalance"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPiggyBankCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPiggyBankCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPiggyBanks"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removePiggyBank"
  ): TypedContractMethod<[piggyBankAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPiggyBankCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPiggyBanks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PiggyBankCreated"
  ): TypedContractEvent<
    PiggyBankCreatedEvent.InputTuple,
    PiggyBankCreatedEvent.OutputTuple,
    PiggyBankCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PiggyBankRemoved"
  ): TypedContractEvent<
    PiggyBankRemovedEvent.InputTuple,
    PiggyBankRemovedEvent.OutputTuple,
    PiggyBankRemovedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PiggyBankCreated(address,address,uint256)": TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
    PiggyBankCreated: TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;

    "PiggyBankRemoved(address,address)": TypedContractEvent<
      PiggyBankRemovedEvent.InputTuple,
      PiggyBankRemovedEvent.OutputTuple,
      PiggyBankRemovedEvent.OutputObject
    >;
    PiggyBankRemoved: TypedContractEvent<
      PiggyBankRemovedEvent.InputTuple,
      PiggyBankRemovedEvent.OutputTuple,
      PiggyBankRemovedEvent.OutputObject
    >;
  };
}
