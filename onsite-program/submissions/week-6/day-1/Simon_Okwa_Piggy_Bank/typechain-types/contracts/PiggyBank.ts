/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EARLY_WITHDRAWAL_FEE"
      | "FEE_DENOMINATOR"
      | "balance"
      | "calculateEarlyWithdrawalFee"
      | "close"
      | "createdAt"
      | "deposit"
      | "emergencyClose"
      | "factory"
      | "getBalance"
      | "getEarlyWithdrawalFee"
      | "getLockEndTime"
      | "getPiggyBankDetails"
      | "getTimeRemaining"
      | "isClosed"
      | "isLockPeriodExpired"
      | "lockPeriod"
      | "owner"
      | "renounceOwnership"
      | "tokenAddress"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Closed"
      | "Deposited"
      | "EarlyWithdrawalFee"
      | "OwnershipTransferred"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EARLY_WITHDRAWAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateEarlyWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyClose",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlyWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPiggyBankDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isClosed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isLockPeriodExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EARLY_WITHDRAWAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarlyWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEarlyWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPiggyBankDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLockPeriodExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ClosedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyWithdrawalFeeEvent {
  export type InputTuple = [
    user: AddressLike,
    feeAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    feeAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    feeAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBank extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBank;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EARLY_WITHDRAWAL_FEE: TypedContractMethod<[], [bigint], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  balance: TypedContractMethod<[], [bigint], "view">;

  calculateEarlyWithdrawalFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  close: TypedContractMethod<[], [void], "nonpayable">;

  createdAt: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  emergencyClose: TypedContractMethod<[], [void], "nonpayable">;

  factory: TypedContractMethod<[], [string], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getEarlyWithdrawalFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  getLockEndTime: TypedContractMethod<[], [bigint], "view">;

  getPiggyBankDetails: TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        owner_: string;
        token: string;
        lockPeriod_: bigint;
        createdAt_: bigint;
        balance_: bigint;
        closed: boolean;
      }
    ],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<[], [bigint], "view">;

  isClosed: TypedContractMethod<[], [boolean], "view">;

  isLockPeriodExpired: TypedContractMethod<[], [boolean], "view">;

  lockPeriod: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EARLY_WITHDRAWAL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateEarlyWithdrawalFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "close"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createdAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyClose"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarlyWithdrawalFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPiggyBankDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        owner_: string;
        token: string;
        lockPeriod_: bigint;
        createdAt_: bigint;
        balance_: bigint;
        closed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isClosed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLockPeriodExpired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Closed"
  ): TypedContractEvent<
    ClosedEvent.InputTuple,
    ClosedEvent.OutputTuple,
    ClosedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EarlyWithdrawalFee"
  ): TypedContractEvent<
    EarlyWithdrawalFeeEvent.InputTuple,
    EarlyWithdrawalFeeEvent.OutputTuple,
    EarlyWithdrawalFeeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Closed(address,uint256)": TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;
    Closed: TypedContractEvent<
      ClosedEvent.InputTuple,
      ClosedEvent.OutputTuple,
      ClosedEvent.OutputObject
    >;

    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EarlyWithdrawalFee(address,uint256,uint256)": TypedContractEvent<
      EarlyWithdrawalFeeEvent.InputTuple,
      EarlyWithdrawalFeeEvent.OutputTuple,
      EarlyWithdrawalFeeEvent.OutputObject
    >;
    EarlyWithdrawalFee: TypedContractEvent<
      EarlyWithdrawalFeeEvent.InputTuple,
      EarlyWithdrawalFeeEvent.OutputTuple,
      EarlyWithdrawalFeeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
