/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyBankFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "changeAdmin"
      | "createPiggyAccount"
      | "getTotalAccounts"
      | "getUserAccountsAndBalance"
      | "totalAccounts"
      | "withdrawAdminFees"
      | "withdrawERC20Fees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "AdminFeesWithdrawn"
      | "PiggyBankCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPiggyAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountsAndBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAdminFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Fees",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPiggyAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountsAndBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Fees",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminFeesWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PiggyBankCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    piggyBank: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    piggyBank: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    owner: string;
    piggyBank: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBankFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBankFactory;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  changeAdmin: TypedContractMethod<
    [_newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  createPiggyAccount: TypedContractMethod<[], [string], "nonpayable">;

  getTotalAccounts: TypedContractMethod<[], [bigint], "view">;

  getUserAccountsAndBalance: TypedContractMethod<
    [_user: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  totalAccounts: TypedContractMethod<[], [bigint], "view">;

  withdrawAdminFees: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawERC20Fees: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "changeAdmin"
  ): TypedContractMethod<[_newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPiggyAccount"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAccountsAndBalance"
  ): TypedContractMethod<[_user: AddressLike], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "totalAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawAdminFees"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawERC20Fees"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "AdminFeesWithdrawn"
  ): TypedContractEvent<
    AdminFeesWithdrawnEvent.InputTuple,
    AdminFeesWithdrawnEvent.OutputTuple,
    AdminFeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PiggyBankCreated"
  ): TypedContractEvent<
    PiggyBankCreatedEvent.InputTuple,
    PiggyBankCreatedEvent.OutputTuple,
    PiggyBankCreatedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "AdminFeesWithdrawn(address,address,uint256,uint256)": TypedContractEvent<
      AdminFeesWithdrawnEvent.InputTuple,
      AdminFeesWithdrawnEvent.OutputTuple,
      AdminFeesWithdrawnEvent.OutputObject
    >;
    AdminFeesWithdrawn: TypedContractEvent<
      AdminFeesWithdrawnEvent.InputTuple,
      AdminFeesWithdrawnEvent.OutputTuple,
      AdminFeesWithdrawnEvent.OutputObject
    >;

    "PiggyBankCreated(address,address,uint256)": TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
    PiggyBankCreated: TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
  };
}
