/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PiggyBank {
  export type AccountStruct = {
    accountId: BigNumberish;
    name: string;
    owner: AddressLike;
    balance: BigNumberish;
    created: BigNumberish;
    accountType: BigNumberish;
    tokenAddress: AddressLike;
    plan: BigNumberish;
    state: BigNumberish;
    maturityDate: BigNumberish;
  };

  export type AccountStructOutput = [
    accountId: bigint,
    name: string,
    owner: string,
    balance: bigint,
    created: bigint,
    accountType: bigint,
    tokenAddress: string,
    plan: bigint,
    state: bigint,
    maturityDate: bigint
  ] & {
    accountId: bigint;
    name: string;
    owner: string;
    balance: bigint;
    created: bigint;
    accountType: bigint;
    tokenAddress: string;
    plan: bigint;
    state: bigint;
    maturityDate: bigint;
  };
}

export interface PiggyBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountCount"
      | "accounts"
      | "admin"
      | "adminWithdrawFees"
      | "adminWithdrawTokenFees"
      | "calculateInterest"
      | "changeAdmin"
      | "createAccount"
      | "deposit"
      | "emergencyWithdraw"
      | "getAccount"
      | "getAccountBalance"
      | "getTimeToMaturity"
      | "getUserAccountIds"
      | "getUserAccounts"
      | "interestRate"
      | "isMatured"
      | "userAccountIds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountClosed"
      | "AccountCreated"
      | "Deposit"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdrawTokenFees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeToMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMatured",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccountIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdrawTokenFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeToMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMatured", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userAccountIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AccountClosedEvent {
  export type InputTuple = [accountId: BigNumberish];
  export type OutputTuple = [accountId: bigint];
  export interface OutputObject {
    accountId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    accountId: BigNumberish,
    owner: AddressLike,
    name: string,
    plan: BigNumberish
  ];
  export type OutputTuple = [
    accountId: bigint,
    owner: string,
    name: string,
    plan: bigint
  ];
  export interface OutputObject {
    accountId: bigint;
    owner: string;
    name: string;
    plan: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    accountId: BigNumberish,
    amount: BigNumberish,
    accountType: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    accountId: bigint,
    amount: bigint,
    accountType: bigint
  ];
  export interface OutputObject {
    sender: string;
    accountId: bigint;
    amount: bigint;
    accountType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    owner: AddressLike,
    accountId: BigNumberish,
    amount: BigNumberish,
    interest: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    accountId: bigint,
    amount: bigint,
    interest: bigint
  ];
  export interface OutputObject {
    owner: string;
    accountId: bigint;
    amount: bigint;
    interest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBank extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBank;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountCount: TypedContractMethod<[], [bigint], "view">;

  accounts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        accountId: bigint;
        name: string;
        owner: string;
        balance: bigint;
        created: bigint;
        accountType: bigint;
        tokenAddress: string;
        plan: bigint;
        state: bigint;
        maturityDate: bigint;
      }
    ],
    "view"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  adminWithdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  adminWithdrawTokenFees: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateInterest: TypedContractMethod<
    [_amount: BigNumberish, _plan: BigNumberish],
    [bigint],
    "view"
  >;

  changeAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  createAccount: TypedContractMethod<
    [
      _name: string,
      _plan: BigNumberish,
      _accountType: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_amount: BigNumberish, _accountId: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_accountId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAccount: TypedContractMethod<
    [_accountId: BigNumberish],
    [PiggyBank.AccountStructOutput],
    "view"
  >;

  getAccountBalance: TypedContractMethod<
    [_accountId: BigNumberish],
    [bigint],
    "view"
  >;

  getTimeToMaturity: TypedContractMethod<
    [_accountId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserAccountIds: TypedContractMethod<[], [bigint[]], "view">;

  getUserAccounts: TypedContractMethod<
    [],
    [PiggyBank.AccountStructOutput[]],
    "view"
  >;

  interestRate: TypedContractMethod<[_plan: BigNumberish], [bigint], "view">;

  isMatured: TypedContractMethod<[_accountId: BigNumberish], [boolean], "view">;

  userAccountIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_accountId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accounts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        accountId: bigint;
        name: string;
        owner: string;
        balance: bigint;
        created: bigint;
        accountType: bigint;
        tokenAddress: string;
        plan: bigint;
        state: bigint;
        maturityDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminWithdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminWithdrawTokenFees"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateInterest"
  ): TypedContractMethod<
    [_amount: BigNumberish, _plan: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<
    [
      _name: string,
      _plan: BigNumberish,
      _accountType: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amount: BigNumberish, _accountId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_accountId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [_accountId: BigNumberish],
    [PiggyBank.AccountStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountBalance"
  ): TypedContractMethod<[_accountId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimeToMaturity"
  ): TypedContractMethod<[_accountId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAccountIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserAccounts"
  ): TypedContractMethod<[], [PiggyBank.AccountStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "interestRate"
  ): TypedContractMethod<[_plan: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isMatured"
  ): TypedContractMethod<[_accountId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "userAccountIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_accountId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AccountClosed"
  ): TypedContractEvent<
    AccountClosedEvent.InputTuple,
    AccountClosedEvent.OutputTuple,
    AccountClosedEvent.OutputObject
  >;
  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "AccountClosed(uint128)": TypedContractEvent<
      AccountClosedEvent.InputTuple,
      AccountClosedEvent.OutputTuple,
      AccountClosedEvent.OutputObject
    >;
    AccountClosed: TypedContractEvent<
      AccountClosedEvent.InputTuple,
      AccountClosedEvent.OutputTuple,
      AccountClosedEvent.OutputObject
    >;

    "AccountCreated(uint128,address,string,uint8)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;

    "Deposit(address,uint128,uint256,uint8)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Withdrawal(address,uint128,uint256,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
