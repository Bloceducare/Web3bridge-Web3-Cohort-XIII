/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyBankFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPiggyBank"
      | "deployedPiggyBanks"
      | "getDeployedPiggyBanks"
      | "getDeployedPiggyBanksCount"
      | "getUserPiggyBanks"
      | "userPiggyBanks"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PiggyBankCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createPiggyBank",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedPiggyBanks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPiggyBanks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedPiggyBanksCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPiggyBanks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPiggyBanks",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedPiggyBanksCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPiggyBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPiggyBanks",
    data: BytesLike
  ): Result;
}

export namespace PiggyBankCreatedEvent {
  export type InputTuple = [piggyBank: AddressLike, creator: AddressLike];
  export type OutputTuple = [piggyBank: string, creator: string];
  export interface OutputObject {
    piggyBank: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBankFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBankFactory;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPiggyBank: TypedContractMethod<[], [string], "nonpayable">;

  deployedPiggyBanks: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getDeployedPiggyBanks: TypedContractMethod<[], [string[]], "view">;

  getDeployedPiggyBanksCount: TypedContractMethod<[], [bigint], "view">;

  getUserPiggyBanks: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  userPiggyBanks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPiggyBank"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deployedPiggyBanks"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDeployedPiggyBanks"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDeployedPiggyBanksCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPiggyBanks"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "userPiggyBanks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "PiggyBankCreated"
  ): TypedContractEvent<
    PiggyBankCreatedEvent.InputTuple,
    PiggyBankCreatedEvent.OutputTuple,
    PiggyBankCreatedEvent.OutputObject
  >;

  filters: {
    "PiggyBankCreated(address,address)": TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
    PiggyBankCreated: TypedContractEvent<
      PiggyBankCreatedEvent.InputTuple,
      PiggyBankCreatedEvent.OutputTuple,
      PiggyBankCreatedEvent.OutputObject
    >;
  };
}
