/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FactorySavings {
  export type BankDetailsStruct = {
    bankName: string;
    bankAddress: AddressLike;
  };

  export type BankDetailsStructOutput = [
    bankName: string,
    bankAddress: string
  ] & { bankName: string; bankAddress: string };
}

export interface FactorySavingsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createBank"
      | "getTotalBalance"
      | "getTotalBanks"
      | "getUserBanks"
      | "joinBank"
      | "userBanks"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BankCreated" | "BankJoined"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createBank",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBanks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBanks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBank",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBanks",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userBanks", data: BytesLike): Result;
}

export namespace BankCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    bank: AddressLike,
    name: string
  ];
  export type OutputTuple = [creator: string, bank: string, name: string];
  export interface OutputObject {
    creator: string;
    bank: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BankJoinedEvent {
  export type InputTuple = [
    joiner: AddressLike,
    bank: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [joiner: string, bank: string, amount: bigint];
  export interface OutputObject {
    joiner: string;
    bank: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FactorySavings extends BaseContract {
  connect(runner?: ContractRunner | null): FactorySavings;
  waitForDeployment(): Promise<this>;

  interface: FactorySavingsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createBank: TypedContractMethod<
    [
      _bankName: string,
      _tokenAddress: AddressLike,
      _amount: BigNumberish,
      _lockPeriod: BigNumberish
    ],
    [void],
    "payable"
  >;

  getTotalBalance: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getTotalBanks: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserBanks: TypedContractMethod<
    [user: AddressLike],
    [FactorySavings.BankDetailsStructOutput[]],
    "view"
  >;

  joinBank: TypedContractMethod<
    [userAddress: AddressLike, bankId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  userBanks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { bankName: string; bankAddress: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createBank"
  ): TypedContractMethod<
    [
      _bankName: string,
      _tokenAddress: AddressLike,
      _amount: BigNumberish,
      _lockPeriod: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTotalBalance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBanks"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBanks"
  ): TypedContractMethod<
    [user: AddressLike],
    [FactorySavings.BankDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinBank"
  ): TypedContractMethod<
    [userAddress: AddressLike, bankId: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userBanks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, string] & { bankName: string; bankAddress: string }],
    "view"
  >;

  getEvent(
    key: "BankCreated"
  ): TypedContractEvent<
    BankCreatedEvent.InputTuple,
    BankCreatedEvent.OutputTuple,
    BankCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BankJoined"
  ): TypedContractEvent<
    BankJoinedEvent.InputTuple,
    BankJoinedEvent.OutputTuple,
    BankJoinedEvent.OutputObject
  >;

  filters: {
    "BankCreated(address,address,string)": TypedContractEvent<
      BankCreatedEvent.InputTuple,
      BankCreatedEvent.OutputTuple,
      BankCreatedEvent.OutputObject
    >;
    BankCreated: TypedContractEvent<
      BankCreatedEvent.InputTuple,
      BankCreatedEvent.OutputTuple,
      BankCreatedEvent.OutputObject
    >;

    "BankJoined(address,address,uint256)": TypedContractEvent<
      BankJoinedEvent.InputTuple,
      BankJoinedEvent.OutputTuple,
      BankJoinedEvent.OutputObject
    >;
    BankJoined: TypedContractEvent<
      BankJoinedEvent.InputTuple,
      BankJoinedEvent.OutputTuple,
      BankJoinedEvent.OutputObject
    >;
  };
}
