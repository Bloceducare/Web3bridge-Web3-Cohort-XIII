/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PiggyWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_name"
      | "accountType"
      | "deposit"
      | "depositEth"
      | "getBalance"
      | "lockFunds"
      | "setAdmin"
      | "unlockTime"
      | "walletId"
      | "withdrawEthTo"
      | "withdrawTo"
      | "withdrawTokensTo"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "walletId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawEthTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensTo",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "walletId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEthTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensTo",
    data: BytesLike
  ): Result;
}

export interface PiggyWallet extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyWallet;
  waitForDeployment(): Promise<this>;

  interface: PiggyWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _name: TypedContractMethod<[], [string], "view">;

  accountType: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[price: BigNumberish], [boolean], "nonpayable">;

  depositEth: TypedContractMethod<[], [void], "payable">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  lockFunds: TypedContractMethod<
    [durationSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<
    [adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockTime: TypedContractMethod<[], [bigint], "view">;

  walletId: TypedContractMethod<[], [bigint], "view">;

  withdrawEthTo: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [receiver: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokensTo: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[price: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "depositEth"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockFunds"
  ): TypedContractMethod<[durationSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "walletId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawEthTo"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [receiver: AddressLike, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTokensTo"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
