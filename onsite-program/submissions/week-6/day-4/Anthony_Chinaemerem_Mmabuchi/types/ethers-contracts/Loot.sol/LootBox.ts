/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface LootBoxInterface extends Interface {
    getFunction(nameOrSignature: "addReward" | "callbackGasLimit" | "claimReward" | "coordinator" | "keyHash" | "numWords" | "openBox" | "openFee" | "openStartTimestamp" | "owner" | "rawFulfillRandomWords" | "renounceOwnership" | "requestConfirmations" | "requestFulfilled" | "requestToRandomWord" | "requestToSender" | "rewards" | "setOpenFee" | "setOpenStartTimestamp" | "subscriptionId" | "totalWeight" | "transferOwnership" | "withdrawFees"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BoxOpened" | "OwnershipTransferred" | "RandomnessFulfilled" | "RewardAdded" | "RewardClaimed"): EventFragment;

    encodeFunctionData(functionFragment: 'addReward', values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'callbackGasLimit', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimReward', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'coordinator', values?: undefined): string;
encodeFunctionData(functionFragment: 'keyHash', values?: undefined): string;
encodeFunctionData(functionFragment: 'numWords', values?: undefined): string;
encodeFunctionData(functionFragment: 'openBox', values?: undefined): string;
encodeFunctionData(functionFragment: 'openFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'openStartTimestamp', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'rawFulfillRandomWords', values: [BigNumberish, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestConfirmations', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestFulfilled', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'requestToRandomWord', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'requestToSender', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'rewards', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setOpenFee', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'setOpenStartTimestamp', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'subscriptionId', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalWeight', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'callbackGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'coordinator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'keyHash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'numWords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openBox', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'openStartTimestamp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rawFulfillRandomWords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestConfirmations', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestFulfilled', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestToRandomWord', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestToSender', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setOpenFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setOpenStartTimestamp', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'subscriptionId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalWeight', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
  }

  
    export namespace BoxOpenedEvent {
      export type InputTuple = [user: AddressLike, requestId: BigNumberish];
      export type OutputTuple = [user: string, requestId: bigint];
      export interface OutputObject {user: string, requestId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RandomnessFulfilledEvent {
      export type InputTuple = [requestId: BigNumberish, randomWord: BigNumberish];
      export type OutputTuple = [requestId: bigint, randomWord: bigint];
      export interface OutputObject {requestId: bigint, randomWord: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardAddedEvent {
      export type InputTuple = [index: BigNumberish, rewardType: BigNumberish, tokenAddress: AddressLike, tokenId: BigNumberish, amount: BigNumberish, weight: BigNumberish];
      export type OutputTuple = [index: bigint, rewardType: bigint, tokenAddress: string, tokenId: bigint, amount: bigint, weight: bigint];
      export interface OutputObject {index: bigint, rewardType: bigint, tokenAddress: string, tokenId: bigint, amount: bigint, weight: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardClaimedEvent {
      export type InputTuple = [user: AddressLike, requestId: BigNumberish, rewardIndex: BigNumberish];
      export type OutputTuple = [user: string, requestId: bigint, rewardIndex: bigint];
      export interface OutputObject {user: string, requestId: bigint, rewardIndex: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface LootBox extends BaseContract {
    
    connect(runner?: ContractRunner | null): LootBox;
    waitForDeployment(): Promise<this>;

    interface: LootBoxInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addReward: TypedContractMethod<
      [_rewardType: BigNumberish, _tokenAddress: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish, _weight: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    callbackGasLimit: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    claimReward: TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    coordinator: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    keyHash: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    numWords: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    openBox: TypedContractMethod<
      [],
      [void],
      'payable'
    >
    

    
    openFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    openStartTimestamp: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    rawFulfillRandomWords: TypedContractMethod<
      [requestId: BigNumberish, randomWords: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    requestConfirmations: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    requestFulfilled: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    requestToRandomWord: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    requestToSender: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    rewards: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, bigint, bigint] & {rewardType: bigint, tokenAddress: string, tokenId: bigint, amount: bigint, weight: bigint }],
      'view'
    >
    

    
    setOpenFee: TypedContractMethod<
      [_newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setOpenStartTimestamp: TypedContractMethod<
      [_newTimestamp: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    subscriptionId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalWeight: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addReward'): TypedContractMethod<
      [_rewardType: BigNumberish, _tokenAddress: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish, _weight: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'callbackGasLimit'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'claimReward'): TypedContractMethod<
      [requestId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'coordinator'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'keyHash'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'numWords'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'openBox'): TypedContractMethod<
      [],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'openFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'openStartTimestamp'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rawFulfillRandomWords'): TypedContractMethod<
      [requestId: BigNumberish, randomWords: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestConfirmations'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'requestFulfilled'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'requestToRandomWord'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'requestToSender'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rewards'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, bigint, bigint] & {rewardType: bigint, tokenAddress: string, tokenId: bigint, amount: bigint, weight: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'setOpenFee'): TypedContractMethod<
      [_newFee: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setOpenStartTimestamp'): TypedContractMethod<
      [_newTimestamp: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'subscriptionId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalWeight'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'BoxOpened'): TypedContractEvent<BoxOpenedEvent.InputTuple, BoxOpenedEvent.OutputTuple, BoxOpenedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'RandomnessFulfilled'): TypedContractEvent<RandomnessFulfilledEvent.InputTuple, RandomnessFulfilledEvent.OutputTuple, RandomnessFulfilledEvent.OutputObject>;
getEvent(key: 'RewardAdded'): TypedContractEvent<RewardAddedEvent.InputTuple, RewardAddedEvent.OutputTuple, RewardAddedEvent.OutputObject>;
getEvent(key: 'RewardClaimed'): TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;

    filters: {
      
      'BoxOpened(address,uint256)': TypedContractEvent<BoxOpenedEvent.InputTuple, BoxOpenedEvent.OutputTuple, BoxOpenedEvent.OutputObject>;
      BoxOpened: TypedContractEvent<BoxOpenedEvent.InputTuple, BoxOpenedEvent.OutputTuple, BoxOpenedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'RandomnessFulfilled(uint256,uint256)': TypedContractEvent<RandomnessFulfilledEvent.InputTuple, RandomnessFulfilledEvent.OutputTuple, RandomnessFulfilledEvent.OutputObject>;
      RandomnessFulfilled: TypedContractEvent<RandomnessFulfilledEvent.InputTuple, RandomnessFulfilledEvent.OutputTuple, RandomnessFulfilledEvent.OutputObject>;
    

      'RewardAdded(uint256,uint8,address,uint256,uint256,uint256)': TypedContractEvent<RewardAddedEvent.InputTuple, RewardAddedEvent.OutputTuple, RewardAddedEvent.OutputObject>;
      RewardAdded: TypedContractEvent<RewardAddedEvent.InputTuple, RewardAddedEvent.OutputTuple, RewardAddedEvent.OutputObject>;
    

      'RewardClaimed(address,uint256,uint256)': TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
      RewardClaimed: TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
    
    };
  }