/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LootBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TOTAL_WEIGHT"
      | "boxPrice"
      | "erc1155Token"
      | "erc20Token"
      | "erc721Token"
      | "openBox"
      | "owner"
      | "rawFulfillRandomWords"
      | "requestToSender"
      | "rewardWeights"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BoxOpened" | "FundsWithdrawn" | "RewardAssigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boxPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc1155Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721Token",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openBox", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToSender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boxPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc1155Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc721Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BoxOpenedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAssignedEvent {
  export type InputTuple = [
    user: AddressLike,
    rewardType: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, rewardType: string, amount: bigint];
  export interface OutputObject {
    user: string;
    rewardType: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LootBox extends BaseContract {
  connect(runner?: ContractRunner | null): LootBox;
  waitForDeployment(): Promise<this>;

  interface: LootBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TOTAL_WEIGHT: TypedContractMethod<[], [bigint], "view">;

  boxPrice: TypedContractMethod<[], [bigint], "view">;

  erc1155Token: TypedContractMethod<[], [string], "view">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  erc721Token: TypedContractMethod<[], [string], "view">;

  openBox: TypedContractMethod<[], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestToSender: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewardWeights: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TOTAL_WEIGHT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "boxPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "erc1155Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openBox"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestToSender"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardWeights"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BoxOpened"
  ): TypedContractEvent<
    BoxOpenedEvent.InputTuple,
    BoxOpenedEvent.OutputTuple,
    BoxOpenedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RewardAssigned"
  ): TypedContractEvent<
    RewardAssignedEvent.InputTuple,
    RewardAssignedEvent.OutputTuple,
    RewardAssignedEvent.OutputObject
  >;

  filters: {
    "BoxOpened(address,uint256)": TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;
    BoxOpened: TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "RewardAssigned(address,string,uint256)": TypedContractEvent<
      RewardAssignedEvent.InputTuple,
      RewardAssignedEvent.OutputTuple,
      RewardAssignedEvent.OutputObject
    >;
    RewardAssigned: TypedContractEvent<
      RewardAssignedEvent.InputTuple,
      RewardAssignedEvent.OutputTuple,
      RewardAssignedEvent.OutputObject
    >;
  };
}
