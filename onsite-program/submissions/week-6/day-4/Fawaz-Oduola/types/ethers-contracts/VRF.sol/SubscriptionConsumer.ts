/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface SubscriptionConsumerInterface extends Interface {
    getFunction(nameOrSignature: "acceptOwnership" | "callbackGasLimit" | "getRequestStatus" | "keyHash" | "lastRequestId" | "numWords" | "owner" | "rawFulfillRandomWords" | "requestConfirmations" | "requestIds" | "requestRandomWords" | "s_requests" | "s_subscriptionId" | "s_vrfCoordinator" | "setCoordinator" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CoordinatorSet" | "OwnershipTransferRequested" | "OwnershipTransferred" | "RequestFulfilled" | "RequestSent"): EventFragment;

    encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'callbackGasLimit', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRequestStatus', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'keyHash', values?: undefined): string;
encodeFunctionData(functionFragment: 'lastRequestId', values?: undefined): string;
encodeFunctionData(functionFragment: 'numWords', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'rawFulfillRandomWords', values: [BigNumberish, BigNumberish[]]): string;
encodeFunctionData(functionFragment: 'requestConfirmations', values?: undefined): string;
encodeFunctionData(functionFragment: 'requestIds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'requestRandomWords', values: [boolean]): string;
encodeFunctionData(functionFragment: 's_requests', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 's_subscriptionId', values?: undefined): string;
encodeFunctionData(functionFragment: 's_vrfCoordinator', values?: undefined): string;
encodeFunctionData(functionFragment: 'setCoordinator', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'callbackGasLimit', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRequestStatus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'keyHash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'lastRequestId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'numWords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'rawFulfillRandomWords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestConfirmations', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'requestRandomWords', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 's_requests', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 's_subscriptionId', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 's_vrfCoordinator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setCoordinator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace CoordinatorSetEvent {
      export type InputTuple = [vrfCoordinator: AddressLike];
      export type OutputTuple = [vrfCoordinator: string];
      export interface OutputObject {vrfCoordinator: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferRequestedEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike];
      export type OutputTuple = [from: string, to: string];
      export interface OutputObject {from: string, to: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike];
      export type OutputTuple = [from: string, to: string];
      export interface OutputObject {from: string, to: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequestFulfilledEvent {
      export type InputTuple = [requestId: BigNumberish, randomWords: BigNumberish[]];
      export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
      export interface OutputObject {requestId: bigint, randomWords: bigint[] };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RequestSentEvent {
      export type InputTuple = [requestId: BigNumberish, numWords: BigNumberish];
      export type OutputTuple = [requestId: bigint, numWords: bigint];
      export interface OutputObject {requestId: bigint, numWords: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SubscriptionConsumer extends BaseContract {
    
    connect(runner?: ContractRunner | null): SubscriptionConsumer;
    waitForDeployment(): Promise<this>;

    interface: SubscriptionConsumerInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    acceptOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    callbackGasLimit: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getRequestStatus: TypedContractMethod<
      [_requestId: BigNumberish, ],
      [[boolean, bigint[]] & {fulfilled: boolean, randomWords: bigint[] }],
      'view'
    >
    

    
    keyHash: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    lastRequestId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    numWords: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    rawFulfillRandomWords: TypedContractMethod<
      [requestId: BigNumberish, randomWords: BigNumberish[], ],
      [void],
      'nonpayable'
    >
    

    
    requestConfirmations: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    requestIds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    requestRandomWords: TypedContractMethod<
      [enableNativePayment: boolean, ],
      [bigint],
      'nonpayable'
    >
    

    
    s_requests: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[boolean, boolean] & {fulfilled: boolean, exists: boolean }],
      'view'
    >
    

    
    s_subscriptionId: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    s_vrfCoordinator: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    setCoordinator: TypedContractMethod<
      [_vrfCoordinator: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [to: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'acceptOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'callbackGasLimit'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getRequestStatus'): TypedContractMethod<
      [_requestId: BigNumberish, ],
      [[boolean, bigint[]] & {fulfilled: boolean, randomWords: bigint[] }],
      'view'
    >;
getFunction(nameOrSignature: 'keyHash'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'lastRequestId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'numWords'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'rawFulfillRandomWords'): TypedContractMethod<
      [requestId: BigNumberish, randomWords: BigNumberish[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'requestConfirmations'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'requestIds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'requestRandomWords'): TypedContractMethod<
      [enableNativePayment: boolean, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 's_requests'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[boolean, boolean] & {fulfilled: boolean, exists: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 's_subscriptionId'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 's_vrfCoordinator'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'setCoordinator'): TypedContractMethod<
      [_vrfCoordinator: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [to: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'CoordinatorSet'): TypedContractEvent<CoordinatorSetEvent.InputTuple, CoordinatorSetEvent.OutputTuple, CoordinatorSetEvent.OutputObject>;
getEvent(key: 'OwnershipTransferRequested'): TypedContractEvent<OwnershipTransferRequestedEvent.InputTuple, OwnershipTransferRequestedEvent.OutputTuple, OwnershipTransferRequestedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'RequestFulfilled'): TypedContractEvent<RequestFulfilledEvent.InputTuple, RequestFulfilledEvent.OutputTuple, RequestFulfilledEvent.OutputObject>;
getEvent(key: 'RequestSent'): TypedContractEvent<RequestSentEvent.InputTuple, RequestSentEvent.OutputTuple, RequestSentEvent.OutputObject>;

    filters: {
      
      'CoordinatorSet(address)': TypedContractEvent<CoordinatorSetEvent.InputTuple, CoordinatorSetEvent.OutputTuple, CoordinatorSetEvent.OutputObject>;
      CoordinatorSet: TypedContractEvent<CoordinatorSetEvent.InputTuple, CoordinatorSetEvent.OutputTuple, CoordinatorSetEvent.OutputObject>;
    

      'OwnershipTransferRequested(address,address)': TypedContractEvent<OwnershipTransferRequestedEvent.InputTuple, OwnershipTransferRequestedEvent.OutputTuple, OwnershipTransferRequestedEvent.OutputObject>;
      OwnershipTransferRequested: TypedContractEvent<OwnershipTransferRequestedEvent.InputTuple, OwnershipTransferRequestedEvent.OutputTuple, OwnershipTransferRequestedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'RequestFulfilled(uint256,uint256[])': TypedContractEvent<RequestFulfilledEvent.InputTuple, RequestFulfilledEvent.OutputTuple, RequestFulfilledEvent.OutputObject>;
      RequestFulfilled: TypedContractEvent<RequestFulfilledEvent.InputTuple, RequestFulfilledEvent.OutputTuple, RequestFulfilledEvent.OutputObject>;
    

      'RequestSent(uint256,uint32)': TypedContractEvent<RequestSentEvent.InputTuple, RequestSentEvent.OutputTuple, RequestSentEvent.OutputObject>;
      RequestSent: TypedContractEvent<RequestSentEvent.InputTuple, RequestSentEvent.OutputTuple, RequestSentEvent.OutputObject>;
    
    };
  }