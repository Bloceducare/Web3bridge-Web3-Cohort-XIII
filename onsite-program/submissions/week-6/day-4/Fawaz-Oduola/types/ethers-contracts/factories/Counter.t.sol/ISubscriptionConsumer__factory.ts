/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

  import { Contract, Interface, type ContractRunner } from "ethers";
  import type { ISubscriptionConsumer, ISubscriptionConsumerInterface } from "../../Counter.t.sol/ISubscriptionConsumer.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_requestId",
        "type": "uint256"
      }
    ],
    "name": "getRequestStatus",
    "outputs": [
      {
        "internalType": "bool",
        "name": "fulfilled",
        "type": "bool"
      },
      {
        "internalType": "uint256[]",
        "name": "randomWords",
        "type": "uint256[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "bool",
        "name": "enableNativePayment",
        "type": "bool"
      }
    ],
    "name": "requestRandomWords",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "requestId",
        "type": "uint256"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  export class ISubscriptionConsumer__factory {
    static readonly abi = _abi;
    static createInterface(): ISubscriptionConsumerInterface {
      return new Interface(_abi) as ISubscriptionConsumerInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): ISubscriptionConsumer {
      return new Contract(address, _abi, runner) as unknown as ISubscriptionConsumer;
    }
  }
  