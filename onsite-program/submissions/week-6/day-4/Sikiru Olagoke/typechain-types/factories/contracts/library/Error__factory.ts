/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Error, ErrorInterface } from "../../../contracts/library/Error";

const _abi = [
  {
    inputs: [],
    name: "FailedToWithdrawFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sumOfRewardUnits",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountDistributedPerOpen",
        type: "uint256",
      },
    ],
    name: "InvalidLootboxSupply",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoPendingRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "NoTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEligible",
    type: "error",
  },
  {
    inputs: [],
    name: "OpeningNotStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "PendingOpenRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "RandomnessNotFulfilled",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountToOpen",
        type: "uint256",
      },
    ],
    name: "SupplyExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122067461913ba9c793b1f03fb6a7285937e4b2ce19f53ed4317b51f900c69a995c864736f6c63430008120033";

type ErrorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Error__factory extends ContractFactory {
  constructor(...args: ErrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Error> {
    return super.deploy(overrides || {}) as Promise<Error>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Error {
    return super.attach(address) as Error;
  }
  override connect(signer: Signer): Error__factory {
    return super.connect(signer) as Error__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorInterface {
    return new utils.Interface(_abi) as ErrorInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Error {
    return new Contract(address, _abi, signerOrProvider) as Error;
  }
}
