/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LootBox {
  export type PendingRequestStruct = {
    user: AddressLike;
    timestamp: BigNumberish;
    fulfilled: boolean;
  };

  export type PendingRequestStructOutput = [
    user: string,
    timestamp: bigint,
    fulfilled: boolean
  ] & { user: string; timestamp: bigint; fulfilled: boolean };

  export type RewardTierStruct = {
    weight: BigNumberish;
    minAmount: BigNumberish;
    maxAmount: BigNumberish;
    active: boolean;
  };

  export type RewardTierStructOutput = [
    weight: bigint,
    minAmount: bigint,
    maxAmount: bigint,
    active: boolean
  ] & { weight: bigint; minAmount: bigint; maxAmount: bigint; active: boolean };
}

export interface LootBoxInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "availableERC721Count"
      | "availableERC721Tokens"
      | "boxPrice"
      | "emergencyWithdrawNFT"
      | "emergencyWithdrawTokens"
      | "getInventoryStatus"
      | "getPendingRequest"
      | "getRewardTier"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "openBox"
      | "owner"
      | "pendingRequests"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "replenishERC721Inventory"
      | "rewardTiers"
      | "supportsInterface"
      | "tokens"
      | "totalWeight"
      | "transferOwnership"
      | "updateBoxPrice"
      | "updateRewardTier"
      | "updateTokenContracts"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BoxOpened"
      | "FundsWithdrawn"
      | "InventoryReplenished"
      | "OwnershipTransferred"
      | "RewardAssigned"
      | "RewardTierUpdated"
      | "TokenContractsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "availableERC721Count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableERC721Tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "boxPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventoryStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "openBox", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replenishERC721Inventory",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoxPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardTier",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenContracts",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "availableERC721Count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableERC721Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boxPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventoryStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replenishERC721Inventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BoxOpenedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InventoryReplenishedEvent {
  export type InputTuple = [tokenType: string, amount: BigNumberish];
  export type OutputTuple = [tokenType: string, amount: bigint];
  export interface OutputObject {
    tokenType: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAssignedEvent {
  export type InputTuple = [
    user: AddressLike,
    rewardType: string,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    rewardType: string,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    user: string;
    rewardType: string;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTierUpdatedEvent {
  export type InputTuple = [
    tierId: BigNumberish,
    weight: BigNumberish,
    minAmount: BigNumberish,
    maxAmount: BigNumberish
  ];
  export type OutputTuple = [
    tierId: bigint,
    weight: bigint,
    minAmount: bigint,
    maxAmount: bigint
  ];
  export interface OutputObject {
    tierId: bigint;
    weight: bigint;
    minAmount: bigint;
    maxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenContractsUpdatedEvent {
  export type InputTuple = [
    erc20: AddressLike,
    erc721: AddressLike,
    erc1155: AddressLike,
    erc1155TokenId: BigNumberish
  ];
  export type OutputTuple = [
    erc20: string,
    erc721: string,
    erc1155: string,
    erc1155TokenId: bigint
  ];
  export interface OutputObject {
    erc20: string;
    erc721: string;
    erc1155: string;
    erc1155TokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LootBox extends BaseContract {
  connect(runner?: ContractRunner | null): LootBox;
  waitForDeployment(): Promise<this>;

  interface: LootBoxInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  availableERC721Count: TypedContractMethod<[], [bigint], "view">;

  availableERC721Tokens: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  boxPrice: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdrawNFT: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdrawTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getInventoryStatus: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        erc20Balance: bigint;
        erc1155Balance: bigint;
        erc721Count: bigint;
      }
    ],
    "view"
  >;

  getPendingRequest: TypedContractMethod<
    [requestId: BigNumberish],
    [LootBox.PendingRequestStructOutput],
    "view"
  >;

  getRewardTier: TypedContractMethod<
    [tierId: BigNumberish],
    [LootBox.RewardTierStructOutput],
    "view"
  >;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  openBox: TypedContractMethod<[], [void], "payable">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        user: string;
        timestamp: bigint;
        fulfilled: boolean;
      }
    ],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  replenishERC721Inventory: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  rewardTiers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        weight: bigint;
        minAmount: bigint;
        maxAmount: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokens: TypedContractMethod<
    [],
    [
      [string, string, string, bigint] & {
        erc20Token: string;
        erc721Token: string;
        erc1155Token: string;
        erc1155TokenId: bigint;
      }
    ],
    "view"
  >;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBoxPrice: TypedContractMethod<
    [newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRewardTier: TypedContractMethod<
    [
      tierId: BigNumberish,
      weight: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateTokenContracts: TypedContractMethod<
    [
      _erc20: AddressLike,
      _erc721: AddressLike,
      _erc1155: AddressLike,
      _erc1155TokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "availableERC721Count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "availableERC721Tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "boxPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdrawNFT"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdrawTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getInventoryStatus"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        erc20Balance: bigint;
        erc1155Balance: bigint;
        erc721Count: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingRequest"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [LootBox.PendingRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardTier"
  ): TypedContractMethod<
    [tierId: BigNumberish],
    [LootBox.RewardTierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openBox"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        user: string;
        timestamp: bigint;
        fulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replenishERC721Inventory"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardTiers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        weight: bigint;
        minAmount: bigint;
        maxAmount: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint] & {
        erc20Token: string;
        erc721Token: string;
        erc1155Token: string;
        erc1155TokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBoxPrice"
  ): TypedContractMethod<[newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRewardTier"
  ): TypedContractMethod<
    [
      tierId: BigNumberish,
      weight: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      active: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenContracts"
  ): TypedContractMethod<
    [
      _erc20: AddressLike,
      _erc721: AddressLike,
      _erc1155: AddressLike,
      _erc1155TokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BoxOpened"
  ): TypedContractEvent<
    BoxOpenedEvent.InputTuple,
    BoxOpenedEvent.OutputTuple,
    BoxOpenedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "InventoryReplenished"
  ): TypedContractEvent<
    InventoryReplenishedEvent.InputTuple,
    InventoryReplenishedEvent.OutputTuple,
    InventoryReplenishedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAssigned"
  ): TypedContractEvent<
    RewardAssignedEvent.InputTuple,
    RewardAssignedEvent.OutputTuple,
    RewardAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RewardTierUpdated"
  ): TypedContractEvent<
    RewardTierUpdatedEvent.InputTuple,
    RewardTierUpdatedEvent.OutputTuple,
    RewardTierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenContractsUpdated"
  ): TypedContractEvent<
    TokenContractsUpdatedEvent.InputTuple,
    TokenContractsUpdatedEvent.OutputTuple,
    TokenContractsUpdatedEvent.OutputObject
  >;

  filters: {
    "BoxOpened(address,uint256)": TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;
    BoxOpened: TypedContractEvent<
      BoxOpenedEvent.InputTuple,
      BoxOpenedEvent.OutputTuple,
      BoxOpenedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "InventoryReplenished(string,uint256)": TypedContractEvent<
      InventoryReplenishedEvent.InputTuple,
      InventoryReplenishedEvent.OutputTuple,
      InventoryReplenishedEvent.OutputObject
    >;
    InventoryReplenished: TypedContractEvent<
      InventoryReplenishedEvent.InputTuple,
      InventoryReplenishedEvent.OutputTuple,
      InventoryReplenishedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardAssigned(address,string,uint256,uint256)": TypedContractEvent<
      RewardAssignedEvent.InputTuple,
      RewardAssignedEvent.OutputTuple,
      RewardAssignedEvent.OutputObject
    >;
    RewardAssigned: TypedContractEvent<
      RewardAssignedEvent.InputTuple,
      RewardAssignedEvent.OutputTuple,
      RewardAssignedEvent.OutputObject
    >;

    "RewardTierUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RewardTierUpdatedEvent.InputTuple,
      RewardTierUpdatedEvent.OutputTuple,
      RewardTierUpdatedEvent.OutputObject
    >;
    RewardTierUpdated: TypedContractEvent<
      RewardTierUpdatedEvent.InputTuple,
      RewardTierUpdatedEvent.OutputTuple,
      RewardTierUpdatedEvent.OutputObject
    >;

    "TokenContractsUpdated(address,address,address,uint256)": TypedContractEvent<
      TokenContractsUpdatedEvent.InputTuple,
      TokenContractsUpdatedEvent.OutputTuple,
      TokenContractsUpdatedEvent.OutputObject
    >;
    TokenContractsUpdated: TypedContractEvent<
      TokenContractsUpdatedEvent.InputTuple,
      TokenContractsUpdatedEvent.OutputTuple,
      TokenContractsUpdatedEvent.OutputObject
    >;
  };
}
