/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GovernanceDAO {
  export type ProposalStruct = {
    proposalId: BigNumberish;
    votesFor: BigNumberish;
    votesAgainst: BigNumberish;
    description: string;
    deadline: BigNumberish;
    isExecuted: boolean;
  };

  export type ProposalStructOutput = [
    proposalId: bigint,
    votesFor: bigint,
    votesAgainst: bigint,
    description: string,
    deadline: bigint,
    isExecuted: boolean
  ] & {
    proposalId: bigint;
    votesFor: bigint;
    votesAgainst: bigint;
    description: string;
    deadline: bigint;
    isExecuted: boolean;
  };
}

export interface GovernanceDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "createUser"
      | "gateway"
      | "getProposalById"
      | "isUser"
      | "revokeRole"
      | "unlockToken"
      | "voteAgainstProposal"
      | "voteProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProposalById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isUser", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteAgainstProposal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteAgainstProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
}

export interface GovernanceDAO extends BaseContract {
  connect(runner?: ContractRunner | null): GovernanceDAO;
  waitForDeployment(): Promise<this>;

  interface: GovernanceDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [description: string, deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createUser: TypedContractMethod<
    [userCreated: AddressLike, userRole: BigNumberish, data: string],
    [void],
    "nonpayable"
  >;

  gateway: TypedContractMethod<[], [string], "view">;

  getProposalById: TypedContractMethod<
    [proposalId: BigNumberish],
    [GovernanceDAO.ProposalStructOutput],
    "view"
  >;

  isUser: TypedContractMethod<
    [userAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [userAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  unlockToken: TypedContractMethod<
    [userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  voteAgainstProposal: TypedContractMethod<
    [owner: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  voteProposal: TypedContractMethod<
    [owner: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [description: string, deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createUser"
  ): TypedContractMethod<
    [userCreated: AddressLike, userRole: BigNumberish, data: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProposalById"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [GovernanceDAO.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUser"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<[userAddress: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockToken"
  ): TypedContractMethod<[userAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteAgainstProposal"
  ): TypedContractMethod<
    [owner: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteProposal"
  ): TypedContractMethod<
    [owner: AddressLike, proposalId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
