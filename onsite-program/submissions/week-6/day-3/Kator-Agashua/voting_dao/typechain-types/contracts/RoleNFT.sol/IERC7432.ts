/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IERC7432 {
  export type RoleStruct = {
    roleId: BytesLike;
    tokenAddress: AddressLike;
    tokenId: BigNumberish;
    recipient: AddressLike;
    expirationDate: BigNumberish;
    revocable: boolean;
    active: boolean;
  };

  export type RoleStructOutput = [
    roleId: string,
    tokenAddress: string,
    tokenId: bigint,
    recipient: string,
    expirationDate: bigint,
    revocable: boolean,
    active: boolean
  ] & {
    roleId: string;
    tokenAddress: string;
    tokenId: bigint;
    recipient: string;
    expirationDate: bigint;
    revocable: boolean;
    active: boolean;
  };
}

export interface IERC7432Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignRole"
      | "getRoleData"
      | "getRoles"
      | "hasRole"
      | "revokeRole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignRole",
    values: [BytesLike, BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "assignRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
}

export interface IERC7432 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC7432;
  waitForDeployment(): Promise<this>;

  interface: IERC7432Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignRole: TypedContractMethod<
    [
      roleId: BytesLike,
      tokenId: BigNumberish,
      recipient: AddressLike,
      expirationDate: BigNumberish,
      revocable: boolean
    ],
    [void],
    "nonpayable"
  >;

  getRoleData: TypedContractMethod<
    [roleId: BytesLike],
    [IERC7432.RoleStructOutput],
    "view"
  >;

  getRoles: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  hasRole: TypedContractMethod<
    [user: AddressLike, roleId: BytesLike],
    [boolean],
    "view"
  >;

  revokeRole: TypedContractMethod<[roleId: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignRole"
  ): TypedContractMethod<
    [
      roleId: BytesLike,
      tokenId: BigNumberish,
      recipient: AddressLike,
      expirationDate: BigNumberish,
      revocable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleData"
  ): TypedContractMethod<
    [roleId: BytesLike],
    [IERC7432.RoleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoles"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [user: AddressLike, roleId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<[roleId: BytesLike], [void], "nonpayable">;

  filters: {};
}
