{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-a8c509f43cb0f0396a08a859d9589b5fb5bc6c2f",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/RolesRegistry.sol": "project/contracts/RolesRegistry.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/IERC7432.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC7432 is IERC165 {\n    struct Role {\n        bytes32 roleId;\n        address tokenAddress;\n        uint256 tokenId;\n        address recipient;\n        uint64 expirationDate;\n        bool revocable;\n        bytes data;\n    }\n\n    event RoleGranted(\n        address indexed tokenAddress,\n        uint256 indexed tokenId,\n        bytes32 indexed roleId,\n        address grantor,\n        address recipient,\n        uint64 expirationDate,\n        bool revocable,\n        bytes data\n    );\n\n    event RoleRevoked(\n        address indexed tokenAddress,\n        uint256 indexed tokenId,\n        bytes32 indexed roleId\n    );\n\n    event RoleApprovalForAll(\n        address indexed tokenAddress,\n        address indexed operator,\n        bool approved\n    );\n\n    function grantRole(Role calldata role) external;\n\n    function revokeRole(address tokenAddress, uint256 tokenId, bytes32 roleId) external;\n\n    function setRoleApprovalForAll(address tokenAddress, address operator, bool approved) external;\n\n    function unlockToken(address tokenAddress, uint256 tokenId) external;\n\n    function recipientOf(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (address);\n\n    function expirationDateOf(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (uint64);\n\n    function isRevocable(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (bool);\n\n    function roleData(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (bytes memory);\n\n    function ownerOf(address tokenAddress, uint256 tokenId) external view returns (address);\n\n    function isRoleApprovalForAll(address tokenAddress, address operator) external view returns (bool);\n}"
      },
      "project/contracts/RolesRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./IERC7432.sol\";\n\ncontract RolesRegistry is IERC7432 {\n    struct RoleData {\n        address recipient;\n        uint64 expirationDate;\n        bool revocable;\n        bytes data;\n    }\n\n    mapping(address => mapping(uint256 => mapping(bytes32 => RoleData))) private _roles;\n    mapping(address => mapping(address => mapping(address => bool))) private _roleApprovalForAll; \n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return interfaceId == type(IERC7432).interfaceId || interfaceId == type(IERC165).interfaceId;\n    }\n\n    function grantRole(Role calldata role) external {\n        address tokenOwner = IERC721(role.tokenAddress).ownerOf(role.tokenId);\n        require(msg.sender == tokenOwner || _roleApprovalForAll[role.tokenAddress][tokenOwner][msg.sender], \"Not authorized to grant role\");\n        require(role.expirationDate > block.timestamp, \"Expiration date must be in the future\");\n\n        _roles[role.tokenAddress][role.tokenId][role.roleId] = RoleData({\n            recipient: role.recipient,\n            expirationDate: role.expirationDate,\n            revocable: role.revocable,\n            data: role.data\n        });\n\n        emit RoleGranted(\n            role.tokenAddress,\n            role.tokenId,\n            role.roleId,\n            msg.sender,\n            role.recipient,\n            role.expirationDate,\n            role.revocable,\n            role.data\n        );\n    }\n\n    function revokeRole(address tokenAddress, uint256 tokenId, bytes32 roleId) external {\n        RoleData memory roleDetails = _roles[tokenAddress][tokenId][roleId];\n        require(roleDetails.recipient != address(0), \"Role not found\");\n\n        address tokenOwner = IERC721(tokenAddress).ownerOf(tokenId);\n        bool isGrantor = msg.sender == tokenOwner || _roleApprovalForAll[tokenAddress][tokenOwner][msg.sender];\n        bool isRecipient = msg.sender == roleDetails.recipient;\n\n        require((isGrantor && roleDetails.revocable) || isRecipient, \"Not authorized to revoke\");\n\n        delete _roles[tokenAddress][tokenId][roleId];\n        emit RoleRevoked(tokenAddress, tokenId, roleId);\n    }\n\n    function setRoleApprovalForAll(address tokenAddress, address operator, bool approved) external {\n        _roleApprovalForAll[tokenAddress][msg.sender][operator] = approved;\n        emit RoleApprovalForAll(tokenAddress, operator, approved);\n    }\n\n    function unlockToken(address, uint256 ) external pure {\n        revert(\"Locking not supported in this implementation\");\n    }\n\n    function recipientOf(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (address) {\n        RoleData memory data = _roles[tokenAddress][tokenId][roleId];\n        if (data.recipient == address(0) || data.expirationDate <= block.timestamp) {\n            return address(0);\n        }\n        return data.recipient;\n    }\n\n    function expirationDateOf(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (uint64) {\n        return _roles[tokenAddress][tokenId][roleId].expirationDate;\n    }\n\n    function isRevocable(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (bool) {\n        return _roles[tokenAddress][tokenId][roleId].revocable;\n    }\n\n    function roleData(address tokenAddress, uint256 tokenId, bytes32 roleId) external view returns (bytes memory) {\n        return _roles[tokenAddress][tokenId][roleId].data;\n    }\n\n    function ownerOf(address tokenAddress, uint256 tokenId) external view returns (address) {\n        return IERC721(tokenAddress).ownerOf(tokenId);\n    }\n\n    function isRoleApprovalForAll(address tokenAddress, address operator) external view returns (bool) {\n        return _roleApprovalForAll[tokenAddress][msg.sender][operator];\n    }\n}"
      }
    }
  }
}