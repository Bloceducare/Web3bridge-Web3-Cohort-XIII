/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DAO {
  export type ProposalStruct = {
    id: BigNumberish;
    proposer: AddressLike;
    description: string;
    startTime: BigNumberish;
    endTime: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    executed: boolean;
    canceled: boolean;
  };

  export type ProposalStructOutput = [
    id: bigint,
    proposer: string,
    description: string,
    startTime: bigint,
    endTime: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    executed: boolean,
    canceled: boolean
  ] & {
    id: bigint;
    proposer: string;
    description: string;
    startTime: bigint;
    endTime: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    executed: boolean;
    canceled: boolean;
  };
}

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelProposal"
      | "createProposal"
      | "getProposal"
      | "grantRole"
      | "nftContract"
      | "revokeRole"
      | "rolesContract"
      | "setProposalExecution"
      | "voteProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalExecution",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [BigNumberish, AddressLike, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelProposal: TypedContractMethod<
    [
      _proposalId: BigNumberish,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      _description: string,
      _endTime: BigNumberish,
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [
      _recipient: AddressLike,
      _token_address: AddressLike,
      _tokenId: BigNumberish,
      _expirationDate: BigNumberish,
      _revocable: boolean,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  revokeRole: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  rolesContract: TypedContractMethod<[], [string], "view">;

  setProposalExecution: TypedContractMethod<
    [_proposalId: BigNumberish, isExecuted: boolean, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteProposal: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike,
      _vote: boolean,
      _proposalId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<
    [
      _proposalId: BigNumberish,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      _description: string,
      _endTime: BigNumberish,
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_proposalId: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _token_address: AddressLike,
      _tokenId: BigNumberish,
      _expirationDate: BigNumberish,
      _revocable: boolean,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setProposalExecution"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, isExecuted: boolean, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteProposal"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike,
      _vote: boolean,
      _proposalId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
