/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DAO {
  export type ProposalStruct = {
    title: string;
    description: string;
    numOfVote: BigNumberish;
    startTime: BigNumberish;
    dealine: BigNumberish;
    status: BigNumberish;
  };

  export type ProposalStructOutput = [
    title: string,
    description: string,
    numOfVote: bigint,
    startTime: bigint,
    dealine: bigint,
    status: bigint
  ] & {
    title: string;
    description: string;
    numOfVote: bigint;
    startTime: bigint;
    dealine: bigint;
    status: bigint;
  };
}

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create_proposal"
      | "get_proposal"
      | "get_proposals"
      | "grantRole"
      | "ownerOf"
      | "recipientOf"
      | "revokeRole"
      | "update_proposal"
      | "vote_on_proposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create_proposal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_proposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_proposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update_proposal",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote_on_proposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "create_proposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_proposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_proposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "update_proposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vote_on_proposal",
    data: BytesLike
  ): Result;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create_proposal: TypedContractMethod<
    [_title: string, _description: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  get_proposal: TypedContractMethod<
    [_index: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;

  get_proposals: TypedContractMethod<[], [DAO.ProposalStructOutput[]], "view">;

  grantRole: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;

  recipientOf: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  update_proposal: TypedContractMethod<
    [_index: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;

  vote_on_proposal: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create_proposal"
  ): TypedContractMethod<
    [_title: string, _description: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_proposal"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_proposals"
  ): TypedContractMethod<[], [DAO.ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recipientOf"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "update_proposal"
  ): TypedContractMethod<
    [_index: BigNumberish, _title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vote_on_proposal"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  filters: {};
}
