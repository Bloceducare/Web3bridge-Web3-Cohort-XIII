/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type RoleStruct = {
  tokenAddress: AddressLike;
  tokenId: BigNumberish;
  roleId: BytesLike;
  recipient: AddressLike;
  expirationDate: BigNumberish;
  revocable: boolean;
  data: BytesLike;
};

export type RoleStructOutput = [
  tokenAddress: string,
  tokenId: bigint,
  roleId: string,
  recipient: string,
  expirationDate: bigint,
  revocable: boolean,
  data: string
] & {
  tokenAddress: string;
  tokenId: bigint;
  roleId: string;
  recipient: string;
  expirationDate: bigint;
  revocable: boolean;
  data: string;
};

export interface RolesRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getRoleWeight"
      | "grantRole"
      | "hasActiveRole"
      | "isRoleApprovedForAll"
      | "isRoleRevocable"
      | "ownerOf"
      | "recipientOf"
      | "revokeRole"
      | "roleData"
      | "roleExpirationDate"
      | "setRoleApprovalForAll"
      | "unlockToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoleApprovalForAll" | "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getRoleWeight",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [RoleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveRole",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleApprovedForAll",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleRevocable",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientOf",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleData",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleExpirationDate",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleApprovalForAll",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRoleWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoleApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRoleRevocable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
}

export namespace RoleApprovalForAllEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    tokenAddress: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    tokenAddress: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    tokenId: BigNumberish,
    roleId: BytesLike,
    grantor: AddressLike,
    recipient: AddressLike,
    expirationDate: BigNumberish,
    revocable: boolean,
    data: BytesLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    tokenId: bigint,
    roleId: string,
    grantor: string,
    recipient: string,
    expirationDate: bigint,
    revocable: boolean,
    data: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    tokenId: bigint;
    roleId: string;
    grantor: string;
    recipient: string;
    expirationDate: bigint;
    revocable: boolean;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    tokenId: BigNumberish,
    roleId: BytesLike
  ];
  export type OutputTuple = [
    tokenAddress: string,
    tokenId: bigint,
    roleId: string
  ];
  export interface OutputObject {
    tokenAddress: string;
    tokenId: bigint;
    roleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RolesRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): RolesRegistry;
  waitForDeployment(): Promise<this>;

  interface: RolesRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRoleWeight: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<[_role: RoleStruct], [void], "nonpayable">;

  hasActiveRole: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [boolean],
    "view"
  >;

  isRoleApprovedForAll: TypedContractMethod<
    [tokenAddress: AddressLike, owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isRoleRevocable: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [boolean],
    "view"
  >;

  ownerOf: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  recipientOf: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [string],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [void],
    "nonpayable"
  >;

  roleData: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [string],
    "view"
  >;

  roleExpirationDate: TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [bigint],
    "view"
  >;

  setRoleApprovalForAll: TypedContractMethod<
    [tokenAddress: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  unlockToken: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRoleWeight"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<[_role: RoleStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasActiveRole"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRoleApprovedForAll"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRoleRevocable"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "recipientOf"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleData"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleExpirationDate"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, tokenId: BigNumberish, roleId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRoleApprovalForAll"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockToken"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "view"
  >;

  getEvent(
    key: "RoleApprovalForAll"
  ): TypedContractEvent<
    RoleApprovalForAllEvent.InputTuple,
    RoleApprovalForAllEvent.OutputTuple,
    RoleApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "RoleApprovalForAll(address,address,bool)": TypedContractEvent<
      RoleApprovalForAllEvent.InputTuple,
      RoleApprovalForAllEvent.OutputTuple,
      RoleApprovalForAllEvent.OutputObject
    >;
    RoleApprovalForAll: TypedContractEvent<
      RoleApprovalForAllEvent.InputTuple,
      RoleApprovalForAllEvent.OutputTuple,
      RoleApprovalForAllEvent.OutputObject
    >;

    "RoleGranted(address,uint256,bytes32,address,address,uint64,bool,bytes)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(address,uint256,bytes32)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
