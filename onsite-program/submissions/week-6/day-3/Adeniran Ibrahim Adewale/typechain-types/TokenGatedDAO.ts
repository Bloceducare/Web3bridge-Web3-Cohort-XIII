/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TokenGatedDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROLE_PROPOSER"
      | "ROLE_VOTER"
      | "cancel"
      | "castVoteWithTokens"
      | "execute"
      | "getProposalCalldatas"
      | "getProposalTargets"
      | "getProposalValues"
      | "proposalCount"
      | "proposalsData"
      | "propose"
      | "queue"
      | "rolesRegistry"
      | "state"
      | "tokenVoted"
      | "votingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROLE_PROPOSER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_VOTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithTokens",
    values: [BigNumberish, boolean, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalCalldatas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalTargets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalValues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      AddressLike[],
      BigNumberish[],
      BytesLike[],
      string,
      AddressLike,
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rolesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tokenVoted",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_PROPOSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_VOTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalCalldatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalsData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    targets: AddressLike[],
    values: BigNumberish[],
    calldatas: BytesLike[],
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    targets: string[],
    values: bigint[],
    calldatas: string[],
    startBlock: bigint,
    endBlock: bigint,
    description: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    targets: string[];
    values: bigint[];
    calldatas: string[];
    startBlock: bigint;
    endBlock: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    proposalId: BigNumberish,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    proposalId: bigint,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenGatedDAO extends BaseContract {
  connect(runner?: ContractRunner | null): TokenGatedDAO;
  waitForDeployment(): Promise<this>;

  interface: TokenGatedDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROLE_PROPOSER: TypedContractMethod<[], [string], "view">;

  ROLE_VOTER: TypedContractMethod<[], [string], "view">;

  cancel: TypedContractMethod<[arg0: BigNumberish], [void], "view">;

  castVoteWithTokens: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      tokenAddress: AddressLike,
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<[arg0: BigNumberish], [void], "payable">;

  getProposalCalldatas: TypedContractMethod<
    [proposalId: BigNumberish],
    [string[]],
    "view"
  >;

  getProposalTargets: TypedContractMethod<
    [proposalId: BigNumberish],
    [string[]],
    "view"
  >;

  getProposalValues: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint[]],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalsData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        proposer: string;
        startBlock: bigint;
        endBlock: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
        descriptionHash: string;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      tokenAddress: AddressLike,
      tokenIds: BigNumberish[],
      roleId: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  queue: TypedContractMethod<[arg0: BigNumberish], [void], "view">;

  rolesRegistry: TypedContractMethod<[], [string], "view">;

  state: TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;

  tokenVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  votingPower: TypedContractMethod<
    [voter: AddressLike, tokenAddress: AddressLike, tokenIds: BigNumberish[]],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROLE_PROPOSER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_VOTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "castVoteWithTokens"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      tokenAddress: AddressLike,
      tokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getProposalCalldatas"
  ): TypedContractMethod<[proposalId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProposalTargets"
  ): TypedContractMethod<[proposalId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProposalValues"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalsData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        proposer: string;
        startBlock: bigint;
        endBlock: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
        canceled: boolean;
        descriptionHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      targets: AddressLike[],
      values: BigNumberish[],
      calldatas: BytesLike[],
      description: string,
      tokenAddress: AddressLike,
      tokenIds: BigNumberish[],
      roleId: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queue"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "rolesRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingPower"
  ): TypedContractMethod<
    [voter: AddressLike, tokenAddress: AddressLike, tokenIds: BigNumberish[]],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,address,address[],uint256[],bytes[],uint64,uint64,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "VoteCast(address,uint256,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
