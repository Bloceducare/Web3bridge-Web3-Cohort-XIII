/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RoleGatedDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAO_ROLE"
      | "PROPOSER_ROLE"
      | "VOTER_ROLE"
      | "accessDAORole"
      | "proposalRole"
      | "proposals"
      | "roleNftContract"
      | "roles"
      | "voteRole"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROPOSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accessDAORole",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalRole",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleNftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteRole",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VOTER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessDAORole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteRole", data: BytesLike): Result;
}

export interface RoleGatedDAO extends BaseContract {
  connect(runner?: ContractRunner | null): RoleGatedDAO;
  waitForDeployment(): Promise<this>;

  interface: RoleGatedDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAO_ROLE: TypedContractMethod<[], [string], "view">;

  PROPOSER_ROLE: TypedContractMethod<[], [string], "view">;

  VOTER_ROLE: TypedContractMethod<[], [string], "view">;

  accessDAORole: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  proposalRole: TypedContractMethod<
    [tokenId: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        yesVotes: bigint;
        noVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  roleNftContract: TypedContractMethod<[], [string], "view">;

  roles: TypedContractMethod<[], [string], "view">;

  voteRole: TypedContractMethod<
    [proposalId: BigNumberish, tokenId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAO_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROPOSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VOTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accessDAORole"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposalRole"
  ): TypedContractMethod<
    [tokenId: BigNumberish, description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        yesVotes: bigint;
        noVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleNftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voteRole"
  ): TypedContractMethod<
    [proposalId: BigNumberish, tokenId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
