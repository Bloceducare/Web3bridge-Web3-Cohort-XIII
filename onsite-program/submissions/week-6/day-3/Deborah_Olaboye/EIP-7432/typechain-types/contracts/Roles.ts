/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RolesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkRole"
      | "grantRole"
      | "hasRole"
      | "hasUniqueRole"
      | "revokeRole"
      | "roleData"
      | "roleExpirationDate"
      | "roleNftContract"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RoleGranted" | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUniqueRole",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleData",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleExpirationDate",
    values: [BytesLike, AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleNftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "checkRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUniqueRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleNftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    _role: BytesLike,
    _tokenAddress: AddressLike,
    _tokenId: BigNumberish,
    _grantee: AddressLike,
    _expirationDate: BigNumberish,
    _data: BytesLike
  ];
  export type OutputTuple = [
    _role: string,
    _tokenAddress: string,
    _tokenId: bigint,
    _grantee: string,
    _expirationDate: bigint,
    _data: string
  ];
  export interface OutputObject {
    _role: string;
    _tokenAddress: string;
    _tokenId: bigint;
    _grantee: string;
    _expirationDate: bigint;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    _role: BytesLike,
    _tokenAddress: AddressLike,
    _tokenId: BigNumberish,
    _grantee: AddressLike
  ];
  export type OutputTuple = [
    _role: string,
    _tokenAddress: string,
    _tokenId: bigint,
    _grantee: string
  ];
  export interface OutputObject {
    _role: string;
    _tokenAddress: string;
    _tokenId: bigint;
    _grantee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Roles extends BaseContract {
  connect(runner?: ContractRunner | null): Roles;
  waitForDeployment(): Promise<this>;

  interface: RolesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkRole: TypedContractMethod<[_userAddress: AddressLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantee: AddressLike,
      _expirationDate: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [boolean],
    "view"
  >;

  hasUniqueRole: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [boolean],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantee: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  roleData: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [string],
    "view"
  >;

  roleExpirationDate: TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [bigint],
    "view"
  >;

  roleNftContract: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkRole"
  ): TypedContractMethod<[_userAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantee: AddressLike,
      _expirationDate: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUniqueRole"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantee: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleData"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleExpirationDate"
  ): TypedContractMethod<
    [
      _role: BytesLike,
      _tokenAddress: AddressLike,
      _tokenId: BigNumberish,
      _grantor: AddressLike,
      _grantee: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleNftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "RoleGranted(bytes32,address,uint256,address,uint64,bytes)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,uint256,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
