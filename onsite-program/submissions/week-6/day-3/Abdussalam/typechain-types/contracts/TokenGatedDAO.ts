/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenGatedDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROLE_EXECUTOR"
      | "ROLE_PROPOSER"
      | "ROLE_VOTER"
      | "execute"
      | "getProposal"
      | "hasVotingRights"
      | "membershipCollection"
      | "proposalCount"
      | "propose"
      | "rolesRegistry"
      | "vote"
      | "votingPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Executed" | "Proposed" | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROLE_EXECUTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_PROPOSER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_VOTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotingRights",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_EXECUTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_PROPOSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_VOTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotingRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
}

export namespace ExecutedEvent {
  export type InputTuple = [id: BigNumberish, passed: boolean];
  export type OutputTuple = [id: bigint, passed: boolean];
  export interface OutputObject {
    id: bigint;
    passed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    tokenId: BigNumberish,
    description: string,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    tokenId: bigint,
    description: string,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    tokenId: bigint;
    description: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    id: BigNumberish,
    voter: AddressLike,
    tokenId: BigNumberish,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    voter: string,
    tokenId: bigint,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    id: bigint;
    voter: string;
    tokenId: bigint;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenGatedDAO extends BaseContract {
  connect(runner?: ContractRunner | null): TokenGatedDAO;
  waitForDeployment(): Promise<this>;

  interface: TokenGatedDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROLE_EXECUTOR: TypedContractMethod<[], [string], "view">;

  ROLE_PROPOSER: TypedContractMethod<[], [string], "view">;

  ROLE_VOTER: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [id: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        description: string;
        deadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  hasVotingRights: TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  membershipCollection: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  propose: TypedContractMethod<
    [description: string, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  rolesRegistry: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [id: BigNumberish, tokenId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROLE_EXECUTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_PROPOSER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_VOTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [id: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        description: string;
        deadline: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVotingRights"
  ): TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "membershipCollection"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [description: string, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolesRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [id: BigNumberish, tokenId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Proposed"
  ): TypedContractEvent<
    ProposedEvent.InputTuple,
    ProposedEvent.OutputTuple,
    ProposedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "Executed(uint256,bool)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "Proposed(uint256,address,uint256,string,uint256)": TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;
    Proposed: TypedContractEvent<
      ProposedEvent.InputTuple,
      ProposedEvent.OutputTuple,
      ProposedEvent.OutputObject
    >;

    "Voted(uint256,address,uint256,bool,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
