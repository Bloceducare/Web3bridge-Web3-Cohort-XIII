/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DAO {
  export type ProposalStruct = {
    description: string;
    yesVotes: BigNumberish;
    noVotes: BigNumberish;
    executed: boolean;
  };

  export type ProposalStructOutput = [
    description: string,
    yesVotes: bigint,
    noVotes: bigint,
    executed: boolean
  ] & {
    description: string;
    yesVotes: bigint;
    noVotes: bigint;
    executed: boolean;
  };
}

export interface DAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROLE_VOTER"
      | "createProposal"
      | "getProposal"
      | "hasVotingRights"
      | "membershipNFT"
      | "proposalCount"
      | "proposals"
      | "rolesRegistry"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLE_VOTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVotingRights",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "ROLE_VOTER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasVotingRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rolesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export interface DAO extends BaseContract {
  connect(runner?: ContractRunner | null): DAO;
  waitForDeployment(): Promise<this>;

  interface: DAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROLE_VOTER: TypedContractMethod<[], [string], "view">;

  createProposal: TypedContractMethod<
    [description: string],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;

  hasVotingRights: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  membershipNFT: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        yesVotes: bigint;
        noVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  rolesRegistry: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROLE_VOTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<[description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [DAO.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVotingRights"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "membershipNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        description: string;
        yesVotes: bigint;
        noVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rolesRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
