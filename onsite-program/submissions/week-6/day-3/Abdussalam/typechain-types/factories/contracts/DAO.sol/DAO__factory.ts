/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { DAO, DAOInterface } from "../../../contracts/DAO.sol/DAO";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_membershipNFT",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rolesRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ROLE_VOTER",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    name: "createProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "getProposal",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "yesVotes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "noVotes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
        ],
        internalType: "struct DAO.Proposal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "hasVotingRights",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "membershipNFT",
    outputs: [
      {
        internalType: "contract IMembershipNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "yesVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "noVotes",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rolesRegistry",
    outputs: [
      {
        internalType: "contract IRolesRegistry7432",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "support",
        type: "bool",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516115c73803806115c78339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b61145b8061016c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639cbba816116100665780639cbba81614610135578063b817341414610153578063c7f758a814610171578063c9d27afe146101a1578063da35c664146101bd57610093565b8063013cf08b14610098578063119b70ac146100cb57806349c2a1a6146100fb578063985d0b1e14610117575b600080fd5b6100b260048036038101906100ad91906108ad565b6101db565b6040516100c29493929190610994565b60405180910390f35b6100e560048036038101906100e09190610a3e565b6102a0565b6040516100f29190610a6b565b60405180910390f35b61011560048036038101906101109190610bbb565b6104f6565b005b61011f6105e1565b60405161012c9190610c63565b60405180910390f35b61013d610605565b60405161014a9190610c97565b60405180910390f35b61015b610629565b6040516101689190610cd3565b60405180910390f35b61018b600480360381019061018691906108ad565b61064f565b6040516101989190610db9565b60405180910390f35b6101bb60048036038101906101b69190610e07565b61073d565b005b6101c5610833565b6040516101d29190610e47565b60405180910390f35b60026020528060005260406000206000915090508060000180546101fe90610e91565b80601f016020809104026020016040519081016040528092919081815260200182805461022a90610e91565b80156102775780601f1061024c57610100808354040283529160200191610277565b820191906000526020600020905b81548152906001019060200180831161025a57829003601f168201915b5050505050908060010154908060020154908060030160009054906101000a900460ff16905084565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016102fc9190610ed1565b602060405180830381865afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610f01565b905060005b818110156104ea5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f745c5986846040518363ffffffff1660e01b81526004016103a8929190610f2e565b602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610f01565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318056fda60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16837f15283fd96aa656c9df35ac2fcb112678a5f24f1ca97e591a97d1d16003dbfc9c6040518463ffffffff1660e01b815260040161048a93929190610f57565b602060405180830381865afa1580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190610fa3565b156104dc57600193505050506104f1565b508080600101915050610342565b5060009150505b919050565b6104ff336102a0565b61053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590611042565b60405180910390fd5b6003600081548092919061055190611091565b9190505550604051806080016040528082815260200160008152602001600081526020016000151581525060026000600354815260200190815260200160002060008201518160000190816105a6919061127b565b50602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555090505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f15283fd96aa656c9df35ac2fcb112678a5f24f1ca97e591a97d1d16003dbfc9c81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610657610839565b6002600083815260200190815260200160002060405180608001604052908160008201805461068590610e91565b80601f01602080910402602001604051908101604052809291908181526020018280546106b190610e91565b80156106fe5780601f106106d3576101008083540402835291602001916106fe565b820191906000526020600020905b8154815290600101906020018083116106e157829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b610746336102a0565b610785576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077c90611399565b60405180910390fd5b60006002600084815260200190815260200160002090508060030160009054906101000a900460ff16156107ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e590611405565b60405180910390fd5b81156108135780600101600081548092919061080990611091565b919050555061082e565b80600201600081548092919061082890611091565b91905055505b505050565b60035481565b60405180608001604052806060815260200160008152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61088a81610877565b811461089557600080fd5b50565b6000813590506108a781610881565b92915050565b6000602082840312156108c3576108c261086d565b5b60006108d184828501610898565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109145780820151818401526020810190506108f9565b60008484015250505050565b6000601f19601f8301169050919050565b600061093c826108da565b61094681856108e5565b93506109568185602086016108f6565b61095f81610920565b840191505092915050565b61097381610877565b82525050565b60008115159050919050565b61098e81610979565b82525050565b600060808201905081810360008301526109ae8187610931565b90506109bd602083018661096a565b6109ca604083018561096a565b6109d76060830184610985565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a0b826109e0565b9050919050565b610a1b81610a00565b8114610a2657600080fd5b50565b600081359050610a3881610a12565b92915050565b600060208284031215610a5457610a5361086d565b5b6000610a6284828501610a29565b91505092915050565b6000602082019050610a806000830184610985565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ac882610920565b810181811067ffffffffffffffff82111715610ae757610ae6610a90565b5b80604052505050565b6000610afa610863565b9050610b068282610abf565b919050565b600067ffffffffffffffff821115610b2657610b25610a90565b5b610b2f82610920565b9050602081019050919050565b82818337600083830152505050565b6000610b5e610b5984610b0b565b610af0565b905082815260208101848484011115610b7a57610b79610a8b565b5b610b85848285610b3c565b509392505050565b600082601f830112610ba257610ba1610a86565b5b8135610bb2848260208601610b4b565b91505092915050565b600060208284031215610bd157610bd061086d565b5b600082013567ffffffffffffffff811115610bef57610bee610872565b5b610bfb84828501610b8d565b91505092915050565b6000819050919050565b6000610c29610c24610c1f846109e0565b610c04565b6109e0565b9050919050565b6000610c3b82610c0e565b9050919050565b6000610c4d82610c30565b9050919050565b610c5d81610c42565b82525050565b6000602082019050610c786000830184610c54565b92915050565b6000819050919050565b610c9181610c7e565b82525050565b6000602082019050610cac6000830184610c88565b92915050565b6000610cbd82610c30565b9050919050565b610ccd81610cb2565b82525050565b6000602082019050610ce86000830184610cc4565b92915050565b600082825260208201905092915050565b6000610d0a826108da565b610d148185610cee565b9350610d248185602086016108f6565b610d2d81610920565b840191505092915050565b610d4181610877565b82525050565b610d5081610979565b82525050565b60006080830160008301518482036000860152610d738282610cff565b9150506020830151610d886020860182610d38565b506040830151610d9b6040860182610d38565b506060830151610dae6060860182610d47565b508091505092915050565b60006020820190508181036000830152610dd38184610d56565b905092915050565b610de481610979565b8114610def57600080fd5b50565b600081359050610e0181610ddb565b92915050565b60008060408385031215610e1e57610e1d61086d565b5b6000610e2c85828601610898565b9250506020610e3d85828601610df2565b9150509250929050565b6000602082019050610e5c600083018461096a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea957607f821691505b602082108103610ebc57610ebb610e62565b5b50919050565b610ecb81610a00565b82525050565b6000602082019050610ee66000830184610ec2565b92915050565b600081519050610efb81610881565b92915050565b600060208284031215610f1757610f1661086d565b5b6000610f2584828501610eec565b91505092915050565b6000604082019050610f436000830185610ec2565b610f50602083018461096a565b9392505050565b6000606082019050610f6c6000830186610ec2565b610f79602083018561096a565b610f866040830184610c88565b949350505050565b600081519050610f9d81610ddb565b92915050565b600060208284031215610fb957610fb861086d565b5b6000610fc784828501610f8e565b91505092915050565b7f4e6f7420617574686f72697a656420746f206372656174652070726f706f736160008201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b600061102c6021836108e5565b915061103782610fd0565b604082019050919050565b6000602082019050818103600083015261105b8161101f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109c82610877565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110ce576110cd611062565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261113b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110fe565b61114586836110fe565b95508019841693508086168417925050509392505050565b600061117861117361116e84610877565b610c04565b610877565b9050919050565b6000819050919050565b6111928361115d565b6111a661119e8261117f565b84845461110b565b825550505050565b600090565b6111bb6111ae565b6111c6818484611189565b505050565b5b818110156111ea576111df6000826111b3565b6001810190506111cc565b5050565b601f82111561122f57611200816110d9565b611209846110ee565b81016020851015611218578190505b61122c611224856110ee565b8301826111cb565b50505b505050565b600082821c905092915050565b600061125260001984600802611234565b1980831691505092915050565b600061126b8383611241565b9150826002028217905092915050565b611284826108da565b67ffffffffffffffff81111561129d5761129c610a90565b5b6112a78254610e91565b6112b28282856111ee565b600060209050601f8311600181146112e557600084156112d3578287015190505b6112dd858261125f565b865550611345565b601f1984166112f3866110d9565b60005b8281101561131b578489015182556001820191506020850194506020810190506112f6565b868310156113385784890151611334601f891682611241565b8355505b6001600288020188555050505b505050505050565b7f4e6f7420617574686f72697a656420746f20766f746500000000000000000000600082015250565b60006113836016836108e5565b915061138e8261134d565b602082019050919050565b600060208201905081810360008301526113b281611376565b9050919050565b7f416c726561647920657865637574656400000000000000000000000000000000600082015250565b60006113ef6010836108e5565b91506113fa826113b9565b602082019050919050565b6000602082019050818103600083015261141e816113e2565b905091905056fea2646970667358221220d8ed073b1fa7b5091b546677f4b2851b1650a95b7ba8f36bd754eb5552093be664736f6c634300081c0033";

type DAOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DAOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DAO__factory extends ContractFactory {
  constructor(...args: DAOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _membershipNFT: AddressLike,
    _rolesRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _membershipNFT,
      _rolesRegistry,
      overrides || {}
    );
  }
  override deploy(
    _membershipNFT: AddressLike,
    _rolesRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _membershipNFT,
      _rolesRegistry,
      overrides || {}
    ) as Promise<
      DAO & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DAO__factory {
    return super.connect(runner) as DAO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DAOInterface {
    return new Interface(_abi) as DAOInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DAO {
    return new Contract(address, _abi, runner) as unknown as DAO;
  }
}
