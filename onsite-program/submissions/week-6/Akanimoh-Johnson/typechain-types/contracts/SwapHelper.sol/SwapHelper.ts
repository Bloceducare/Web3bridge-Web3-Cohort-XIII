/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPermit2 {
  export type TokenPermissionsStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type TokenPermissionsStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type PermitTransferFromStruct = {
    permitted: IPermit2.TokenPermissionsStruct;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitTransferFromStructOutput = [
    permitted: IPermit2.TokenPermissionsStructOutput,
    nonce: bigint,
    deadline: bigint
  ] & {
    permitted: IPermit2.TokenPermissionsStructOutput;
    nonce: bigint;
    deadline: bigint;
  };
}

export interface SwapHelperInterface extends Interface {
  getFunction(
    nameOrSignature: "permit2" | "permitAndSwap" | "uniswapV2Router"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitAndSwap",
    values: [
      AddressLike,
      IPermit2.PermitTransferFromStruct,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
}

export interface SwapHelper extends BaseContract {
  connect(runner?: ContractRunner | null): SwapHelper;
  waitForDeployment(): Promise<this>;

  interface: SwapHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  permit2: TypedContractMethod<[], [string], "view">;

  permitAndSwap: TypedContractMethod<
    [
      owner: AddressLike,
      permit: IPermit2.PermitTransferFromStruct,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      path: AddressLike[],
      recipient: AddressLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "permit2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permitAndSwap"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      permit: IPermit2.PermitTransferFromStruct,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      path: AddressLike[],
      recipient: AddressLike,
      deadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
