/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emergencyReset"
      | "joinLottery"
      | "lotteryId"
      | "manager"
      | "maxPlayers"
      | "players"
      | "prizePool"
      | "ticketPrice"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LotteryReset" | "PlayerJoined" | "WinnerPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emergencyReset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinLottery", values: [string]): string;
  encodeFunctionData(functionFragment: "lotteryId", values?: undefined): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prizePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "emergencyReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteryId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace LotteryResetEvent {
  export type InputTuple = [newLotteryId: BigNumberish];
  export type OutputTuple = [newLotteryId: bigint];
  export interface OutputObject {
    newLotteryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [player: AddressLike, playerId: BigNumberish];
  export type OutputTuple = [player: string, playerId: bigint];
  export interface OutputObject {
    player: string;
    playerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerPaidEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emergencyReset: TypedContractMethod<[], [void], "nonpayable">;

  joinLottery: TypedContractMethod<[_name: string], [void], "payable">;

  lotteryId: TypedContractMethod<[], [bigint], "view">;

  manager: TypedContractMethod<[], [string], "view">;

  maxPlayers: TypedContractMethod<[], [bigint], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  prizePool: TypedContractMethod<[], [bigint], "view">;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        id: bigint;
        hasJoined: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emergencyReset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "joinLottery"
  ): TypedContractMethod<[_name: string], [void], "payable">;
  getFunction(
    nameOrSignature: "lotteryId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "prizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        id: bigint;
        hasJoined: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "LotteryReset"
  ): TypedContractEvent<
    LotteryResetEvent.InputTuple,
    LotteryResetEvent.OutputTuple,
    LotteryResetEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerPaid"
  ): TypedContractEvent<
    WinnerPaidEvent.InputTuple,
    WinnerPaidEvent.OutputTuple,
    WinnerPaidEvent.OutputObject
  >;

  filters: {
    "LotteryReset(uint256)": TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;
    LotteryReset: TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;

    "PlayerJoined(address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "WinnerPaid(address,uint256)": TypedContractEvent<
      WinnerPaidEvent.InputTuple,
      WinnerPaidEvent.OutputTuple,
      WinnerPaidEvent.OutputObject
    >;
    WinnerPaid: TypedContractEvent<
      WinnerPaidEvent.InputTuple,
      WinnerPaidEvent.OutputTuple,
      WinnerPaidEvent.OutputObject
    >;
  };
}
