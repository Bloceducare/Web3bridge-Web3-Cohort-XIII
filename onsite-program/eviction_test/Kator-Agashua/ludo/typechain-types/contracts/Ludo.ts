/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LudoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "colorTaken"
      | "determineWinner"
      | "gameFinished"
      | "player"
      | "players"
      | "random"
      | "registerUser"
      | "rollDice"
      | "rollsDone"
      | "stakeAmount"
      | "stakingToken"
      | "totalStaked"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DiceRolled" | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "colorTaken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "determineWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameFinished",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "random", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rollDice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rollsDone",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "colorTaken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "determineWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "random", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollDice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollsDone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
}

export namespace DiceRolledEvent {
  export type InputTuple = [player: AddressLike, roll: BigNumberish];
  export type OutputTuple = [player: string, roll: bigint];
  export interface OutputObject {
    player: string;
    roll: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [
    winner: AddressLike,
    name: string,
    score: BigNumberish
  ];
  export type OutputTuple = [winner: string, name: string, score: bigint];
  export interface OutputObject {
    winner: string;
    name: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ludo extends BaseContract {
  connect(runner?: ContractRunner | null): Ludo;
  waitForDeployment(): Promise<this>;

  interface: LudoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  colorTaken: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  determineWinner: TypedContractMethod<[], [void], "nonpayable">;

  gameFinished: TypedContractMethod<[], [boolean], "view">;

  player: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, boolean] & {
        name: string;
        playerId: bigint;
        score: bigint;
        color: bigint;
        isWinner: boolean;
        registered: boolean;
      }
    ],
    "view"
  >;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  random: TypedContractMethod<[], [bigint], "view">;

  registerUser: TypedContractMethod<
    [_name: string, colorIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  rollDice: TypedContractMethod<[], [bigint], "nonpayable">;

  rollsDone: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  stakeAmount: TypedContractMethod<[], [bigint], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "colorTaken"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "determineWinner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameFinished"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, boolean] & {
        name: string;
        playerId: bigint;
        score: bigint;
        color: bigint;
        isWinner: boolean;
        registered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "random"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [_name: string, colorIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollDice"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "rollsDone"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DiceRolled"
  ): TypedContractEvent<
    DiceRolledEvent.InputTuple,
    DiceRolledEvent.OutputTuple,
    DiceRolledEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "DiceRolled(address,uint256)": TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;
    DiceRolled: TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;

    "WinnerDeclared(address,string,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
