/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Lottery {
  export type ParticipantsStruct = { user: AddressLike };

  export type ParticipantsStructOutput = [user: string] & { user: string };
}

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllParticipants"
      | "joinLottery"
      | "participants"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PlayerJoined" | "WinnerChosen"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinLottery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerChosenEvent {
  export type InputTuple = [winner: AddressLike, prize: BigNumberish];
  export type OutputTuple = [winner: string, prize: bigint];
  export interface OutputObject {
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllParticipants: TypedContractMethod<
    [],
    [Lottery.ParticipantsStructOutput[]],
    "view"
  >;

  joinLottery: TypedContractMethod<[], [void], "payable">;

  participants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllParticipants"
  ): TypedContractMethod<[], [Lottery.ParticipantsStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "joinLottery"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerChosen"
  ): TypedContractEvent<
    WinnerChosenEvent.InputTuple,
    WinnerChosenEvent.OutputTuple,
    WinnerChosenEvent.OutputObject
  >;

  filters: {
    "PlayerJoined(address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "WinnerChosen(address,uint256)": TypedContractEvent<
      WinnerChosenEvent.InputTuple,
      WinnerChosenEvent.OutputTuple,
      WinnerChosenEvent.OutputObject
    >;
    WinnerChosen: TypedContractEvent<
      WinnerChosenEvent.InputTuple,
      WinnerChosenEvent.OutputTuple,
      WinnerChosenEvent.OutputObject
    >;
  };
}
