/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LotteryGameInterface extends Interface {
  getFunction(nameOrSignature: "getWinner" | "joinLottery"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LastLotteryWinner" | "PlayerJoins"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinLottery",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinLottery",
    data: BytesLike
  ): Result;
}

export namespace LastLotteryWinnerEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinsEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LotteryGame extends BaseContract {
  connect(runner?: ContractRunner | null): LotteryGame;
  waitForDeployment(): Promise<this>;

  interface: LotteryGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getWinner: TypedContractMethod<[], [void], "payable">;

  joinLottery: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "joinLottery"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "LastLotteryWinner"
  ): TypedContractEvent<
    LastLotteryWinnerEvent.InputTuple,
    LastLotteryWinnerEvent.OutputTuple,
    LastLotteryWinnerEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoins"
  ): TypedContractEvent<
    PlayerJoinsEvent.InputTuple,
    PlayerJoinsEvent.OutputTuple,
    PlayerJoinsEvent.OutputObject
  >;

  filters: {
    "LastLotteryWinner(address)": TypedContractEvent<
      LastLotteryWinnerEvent.InputTuple,
      LastLotteryWinnerEvent.OutputTuple,
      LastLotteryWinnerEvent.OutputObject
    >;
    LastLotteryWinner: TypedContractEvent<
      LastLotteryWinnerEvent.InputTuple,
      LastLotteryWinnerEvent.OutputTuple,
      LastLotteryWinnerEvent.OutputObject
    >;

    "PlayerJoins(address)": TypedContractEvent<
      PlayerJoinsEvent.InputTuple,
      PlayerJoinsEvent.OutputTuple,
      PlayerJoinsEvent.OutputObject
    >;
    PlayerJoins: TypedContractEvent<
      PlayerJoinsEvent.InputTuple,
      PlayerJoinsEvent.OutputTuple,
      PlayerJoinsEvent.OutputObject
    >;
  };
}
