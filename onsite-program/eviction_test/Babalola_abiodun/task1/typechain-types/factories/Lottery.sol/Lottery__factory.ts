/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Lottery, LotteryInterface } from "../../Lottery.sol/Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "PlayerJoined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
    ],
    name: "WinnerChosen",
    type: "event",
  },
  {
    inputs: [],
    name: "getAllParticipants",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
        ],
        internalType: "struct Lottery.Participants[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinLottery",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "participants",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052662386f26fc10000600255348015601a57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360146101000a81548160ff021916908315150217905550610f1e806100866000396000f3fe6080604052600436106100435760003560e01c8063195ec9ee1461004f57806324600fc31461007a57806335c1d349146100915780636c77f989146100ce5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b506100646100d8565b6040516100719190610910565b60405180910390f35b34801561008657600080fd5b5061008f610189565b005b34801561009d57600080fd5b506100b860048036038101906100b3919061096d565b6102d4565b6040516100c591906109a9565b60405180910390f35b6100d6610313565b005b60606000805480602002602001604051908101604052809291908181526020016000905b82821015610180578382906000526020600020016040518060200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050815260200190600101906100fc565b50505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021090610a21565b60405180910390fd5b600360149054906101000a900460ff1615610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090610ab3565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156102d1573d6000803e3d6000fd5b50565b600181815481106102e457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360149054906101000a900460ff16610362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035990610b1f565b60405180910390fd5b60025434146103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d90610b8b565b60405180910390fd5b6103af33610553565b156103ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e690610c1d565b60405180910390fd5b6103f761079d565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000819080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507f31e760aa525306aba638a784082a013b6a1cc0a9a1789f3f22281c0453b10b1f3360405161053291906109a9565b60405180910390a1600a600180549050036105505761054f6105fb565b5b50565b600080600090505b6001805490508110156105f0578273ffffffffffffffffffffffffffffffffffffffff166001828154811061059357610592610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105e35760019150506105f6565b808060010191505061055b565b50600090505b919050565b600a60018054905014610643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063a90610cb8565b60405180910390fd5b6000600360146101000a81548160ff0219169083151502179055506000600a4244600160405160200161067893929190610e17565b6040516020818303038152906040528051906020012060001c61069b9190610e7f565b90506000600182815481106106b3576106b2610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060004790508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561072b573d6000803e3d6000fd5b507fc5d1e2a43e1052756e222065802cb80a029bfaf7045b3df42c5c87b92e48de41828260405161075d929190610ebf565b60405180910390a161076d610772565b505050565b6001600061078091906107c6565b6001600360146101000a81548160ff021916908315150217905550565b6040518060200160405280600073ffffffffffffffffffffffffffffffffffffffff1681525090565b50805460008255906000526020600020908101906107e491906107e7565b50565b5b808211156108005760008160009055506001016107e8565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085b82610830565b9050919050565b61086b81610850565b82525050565b6020820160008201516108876000850182610862565b50505050565b60006108998383610871565b60208301905092915050565b6000602082019050919050565b60006108bd82610804565b6108c7818561080f565b93506108d283610820565b8060005b838110156109035781516108ea888261088d565b97506108f5836108a5565b9250506001810190506108d6565b5085935050505092915050565b6000602082019050818103600083015261092a81846108b2565b905092915050565b600080fd5b6000819050919050565b61094a81610937565b811461095557600080fd5b50565b60008135905061096781610941565b92915050565b60006020828403121561098357610982610932565b5b600061099184828501610958565b91505092915050565b6109a381610850565b82525050565b60006020820190506109be600083018461099a565b92915050565b600082825260208201905092915050565b7f554e415554484f52495345440000000000000000000000000000000000000000600082015250565b6000610a0b600c836109c4565b9150610a16826109d5565b602082019050919050565b60006020820190508181036000830152610a3a816109fe565b9050919050565b7f43616e6e6f7420776974686472617720647572696e6720616374697665206c6f60008201527f7474657279000000000000000000000000000000000000000000000000000000602082015250565b6000610a9d6025836109c4565b9150610aa882610a41565b604082019050919050565b60006020820190508181036000830152610acc81610a90565b9050919050565b7f496e6163746976654c6f74746572790000000000000000000000000000000000600082015250565b6000610b09600f836109c4565b9150610b1482610ad3565b602082019050919050565b60006020820190508181036000830152610b3881610afc565b9050919050565b7f456e7472792066656520697320302e3031204554480000000000000000000000600082015250565b6000610b756015836109c4565b9150610b8082610b3f565b602082019050919050565b60006020820190508181036000830152610ba481610b68565b9050919050565b7f596f75206861766520616c7265616479206a6f696e6564207468697320726f7560008201527f6e64000000000000000000000000000000000000000000000000000000000000602082015250565b6000610c076022836109c4565b9150610c1282610bab565b604082019050919050565b60006020820190508181036000830152610c3681610bfa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6565642065786163746c7920313020706c6179657273000000000000000000600082015250565b6000610ca26017836109c4565b9150610cad82610c6c565b602082019050919050565b60006020820190508181036000830152610cd181610c95565b9050919050565b6000819050919050565b610cf3610cee82610937565b610cd8565b82525050565b600081549050919050565b600081905092915050565b60008190508160005260206000209050919050565b610d2d81610850565b82525050565b6000610d3f8383610d24565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d8b610d8683610d4b565b610d58565b9050919050565b6000610d9e8254610d78565b9050919050565b6000600182019050919050565b6000610dbd82610cf9565b610dc78185610d04565b9350610dd283610d0f565b8060005b83811015610e0a57610de782610d92565b610df18882610d33565b9750610dfc83610da5565b925050600181019050610dd6565b5085935050505092915050565b6000610e238286610ce2565b602082019150610e338285610ce2565b602082019150610e438284610db2565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8a82610937565b9150610e9583610937565b925082610ea557610ea4610e50565b5b828206905092915050565b610eb981610937565b82525050565b6000604082019050610ed4600083018561099a565b610ee16020830184610eb0565b939250505056fea2646970667358221220a6f8d7b37b54f1f3802516e76961df75ddc9ed1e0be2e8bb0e048727d26b3abe64736f6c634300081e0033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
