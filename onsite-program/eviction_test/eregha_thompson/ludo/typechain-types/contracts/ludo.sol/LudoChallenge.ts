/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LudoChallengeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LUDO_TOKEN"
      | "gameOwner"
      | "game_state"
      | "playerCount"
      | "players"
      | "register_user"
      | "rollDice"
      | "stake_token"
      | "start_game"
      | "tokenAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GameStarted" | "PlayerRegistered" | "TokensStaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "LUDO_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "game_state",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register_user",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rollDice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake_token",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "start_game",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LUDO_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game_state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "register_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollDice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stake_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start_game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
}

export namespace GameStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    player: AddressLike,
    name: string,
    color: BigNumberish
  ];
  export type OutputTuple = [player: string, name: string, color: bigint];
  export interface OutputObject {
    player: string;
    name: string;
    color: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LudoChallenge extends BaseContract {
  connect(runner?: ContractRunner | null): LudoChallenge;
  waitForDeployment(): Promise<this>;

  interface: LudoChallengeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LUDO_TOKEN: TypedContractMethod<[], [string], "view">;

  gameOwner: TypedContractMethod<[], [string], "view">;

  game_state: TypedContractMethod<[], [bigint], "view">;

  playerCount: TypedContractMethod<[], [bigint], "view">;

  players: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        name: string;
        score: bigint;
        color: bigint;
        player_address: string;
      }
    ],
    "view"
  >;

  register_user: TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "nonpayable"
  >;

  rollDice: TypedContractMethod<[], [bigint], "nonpayable">;

  stake_token: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  start_game: TypedContractMethod<
    [_minimumStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LUDO_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "game_state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string] & {
        name: string;
        score: bigint;
        color: bigint;
        player_address: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "register_user"
  ): TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollDice"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "stake_token"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "start_game"
  ): TypedContractMethod<[_minimumStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;

  filters: {
    "GameStarted()": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "PlayerRegistered(address,string,uint8)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "TokensStaked(address,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
  };
}
