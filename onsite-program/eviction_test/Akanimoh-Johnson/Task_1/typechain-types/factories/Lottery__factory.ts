/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyJoined",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientFee",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxPlayersReached",
    type: "error",
  },
  {
    inputs: [],
    name: "NoWinnerYet",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "PlayerJoined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
    ],
    name: "WinnerSelected",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasJoined",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isReset",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinLottery",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "selectWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060018060146101000a81548160ff021916908315150217905550610b198061003a6000396000f3fe6080604052600436106100555760003560e01c806333a99e041461005a57806357b082fc146100715780636c77f9891461009c578063877f4e12146100a6578063dfbf53ae146100e3578063f71d96cb1461010e575b600080fd5b34801561006657600080fd5b5061006f61014b565b005b34801561007d57600080fd5b506100866103cd565b60405161009391906107b8565b60405180910390f35b6100a46103e0565b005b3480156100b257600080fd5b506100cd60048036038101906100c89190610836565b6105f8565b6040516100da91906107b8565b60405180910390f35b3480156100ef57600080fd5b506100f8610618565b6040516101059190610872565b60405180910390f35b34801561011a57600080fd5b50610135600480360381019061013091906108c3565b61063e565b6040516101429190610872565b60405180910390f35b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60008054905010156101f0576040517f758a704a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054905042610202919061091f565b8154811061021357610212610950565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060004790506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516102cb906109b0565b60006040518083038185875af1925050503d8060008114610308576040519150601f19603f3d011682016040523d82523d6000602084013e61030d565b606091505b5050905080610351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034890610a22565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f75060f9e79552df167b73353fee6237a75bb5ba8ea022f77224e32f152138bcb836040516103b99190610a51565b60405180910390a26103c961067d565b5050565b600160149054906101000a900460ff1681565b662386f26fc100003414610420576040517f025dbdd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104a3576040517e3b268200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a600080549050106104e2576040517f94d0eef900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f31e760aa525306aba638a784082a013b6a1cc0a9a1789f3f22281c0453b10b1f60405160405180910390a2600a600080549050036105f6576105f561014b565b5b565b60026020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818154811061064e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005b600080549050811015610735576000600260008084815481106106a6576106a5610950565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061072d90610a9b565b915050610680565b50600080610743919061075f565b60018060146101000a81548160ff021916908315150217905550565b508054600082559060005260206000209081019061077d9190610780565b50565b5b80821115610799576000816000905550600101610781565b5090565b60008115159050919050565b6107b28161079d565b82525050565b60006020820190506107cd60008301846107a9565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610803826107d8565b9050919050565b610813816107f8565b811461081e57600080fd5b50565b6000813590506108308161080a565b92915050565b60006020828403121561084c5761084b6107d3565b5b600061085a84828501610821565b91505092915050565b61086c816107f8565b82525050565b60006020820190506108876000830184610863565b92915050565b6000819050919050565b6108a08161088d565b81146108ab57600080fd5b50565b6000813590506108bd81610897565b92915050565b6000602082840312156108d9576108d86107d3565b5b60006108e7848285016108ae565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061092a8261088d565b91506109358361088d565b925082610945576109446108f0565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b600061099a60008361097f565b91506109a58261098a565b600082019050919050565b60006109bb8261098d565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610a0c600f836109c5565b9150610a17826109d6565b602082019050919050565b60006020820190508181036000830152610a3b816109ff565b9050919050565b610a4b8161088d565b82525050565b6000602082019050610a666000830184610a42565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610aa68261088d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ad857610ad7610a6c565b5b60018201905091905056fea2646970667358221220cc794b723f6a1d5804375b8a957f3d0f9b8eb8653a8fcc03ae713a2ccfa05c3a64736f6c63430008140033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
