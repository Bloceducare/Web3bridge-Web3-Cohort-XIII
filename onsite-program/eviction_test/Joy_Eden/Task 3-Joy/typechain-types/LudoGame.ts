/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LudoGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "colorToPlayer"
      | "currentPlayer"
      | "currentPlayerIndex"
      | "gameState"
      | "getAllPlayers"
      | "getGameInfo"
      | "getPlayerInfo"
      | "minStakeAmount"
      | "playerAddresses"
      | "players"
      | "registerPlayer"
      | "resetGame"
      | "rollDice"
      | "totalStakedAmount"
      | "winner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DiceRolled"
      | "GameEnded"
      | "GameStarted"
      | "PlayerMoved"
      | "PlayerRegistered"
      | "TokensStaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "colorToPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "rollDice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "colorToPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollDice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
}

export namespace DiceRolledEvent {
  export type InputTuple = [player: AddressLike, roll: BigNumberish];
  export type OutputTuple = [player: string, roll: bigint];
  export interface OutputObject {
    player: string;
    roll: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike, payout: BigNumberish];
  export type OutputTuple = [winner: string, payout: bigint];
  export interface OutputObject {
    winner: string;
    payout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerMovedEvent {
  export type InputTuple = [player: AddressLike, newPosition: BigNumberish];
  export type OutputTuple = [player: string, newPosition: bigint];
  export interface OutputObject {
    player: string;
    newPosition: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRegisteredEvent {
  export type InputTuple = [
    player: AddressLike,
    name: string,
    color: BigNumberish
  ];
  export type OutputTuple = [player: string, name: string, color: bigint];
  export interface OutputObject {
    player: string;
    name: string;
    color: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LudoGame extends BaseContract {
  connect(runner?: ContractRunner | null): LudoGame;
  waitForDeployment(): Promise<this>;

  interface: LudoGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  colorToPlayer: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  currentPlayer: TypedContractMethod<[], [string], "view">;

  currentPlayerIndex: TypedContractMethod<[], [bigint], "view">;

  gameState: TypedContractMethod<[], [bigint], "view">;

  getAllPlayers: TypedContractMethod<[], [string[]], "view">;

  getGameInfo: TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint, string] & {
        state: bigint;
        currentTurn: string;
        totalStaked: bigint;
        playerCount: bigint;
        gameWinner: string;
      }
    ],
    "view"
  >;

  getPlayerInfo: TypedContractMethod<
    [playerAddr: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        color: bigint;
        score: bigint;
        position: bigint;
        isRegistered: boolean;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;

  minStakeAmount: TypedContractMethod<[], [bigint], "view">;

  playerAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        addr: string;
        name: string;
        color: bigint;
        score: bigint;
        position: bigint;
        isRegistered: boolean;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;

  registerPlayer: TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "payable"
  >;

  resetGame: TypedContractMethod<[], [void], "nonpayable">;

  rollDice: TypedContractMethod<[], [bigint], "nonpayable">;

  totalStakedAmount: TypedContractMethod<[], [bigint], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "colorToPlayer"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "currentPlayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentPlayerIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint, string] & {
        state: bigint;
        currentTurn: string;
        totalStaked: bigint;
        playerCount: bigint;
        gameWinner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerInfo"
  ): TypedContractMethod<
    [playerAddr: AddressLike],
    [
      [string, bigint, bigint, bigint, boolean, bigint] & {
        name: string;
        color: bigint;
        score: bigint;
        position: bigint;
        isRegistered: boolean;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "minStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "playerAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint] & {
        addr: string;
        name: string;
        color: bigint;
        score: bigint;
        position: bigint;
        isRegistered: boolean;
        stakedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerPlayer"
  ): TypedContractMethod<
    [_name: string, _color: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "resetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollDice"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalStakedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DiceRolled"
  ): TypedContractEvent<
    DiceRolledEvent.InputTuple,
    DiceRolledEvent.OutputTuple,
    DiceRolledEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerMoved"
  ): TypedContractEvent<
    PlayerMovedEvent.InputTuple,
    PlayerMovedEvent.OutputTuple,
    PlayerMovedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRegistered"
  ): TypedContractEvent<
    PlayerRegisteredEvent.InputTuple,
    PlayerRegisteredEvent.OutputTuple,
    PlayerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;

  filters: {
    "DiceRolled(address,uint256)": TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;
    DiceRolled: TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;

    "GameEnded(address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted()": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "PlayerMoved(address,uint256)": TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;
    PlayerMoved: TypedContractEvent<
      PlayerMovedEvent.InputTuple,
      PlayerMovedEvent.OutputTuple,
      PlayerMovedEvent.OutputObject
    >;

    "PlayerRegistered(address,string,uint8)": TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;
    PlayerRegistered: TypedContractEvent<
      PlayerRegisteredEvent.InputTuple,
      PlayerRegisteredEvent.OutputTuple,
      PlayerRegisteredEvent.OutputObject
    >;

    "TokensStaked(address,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
  };
}
