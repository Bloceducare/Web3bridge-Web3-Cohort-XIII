/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LudoGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOARD_SIZE"
      | "FINAL_POSITION"
      | "HOME_PATH_SIZE"
      | "MAX_PLAYERS"
      | "TOKENS_PER_PLAYER"
      | "activeGameOf"
      | "createGame"
      | "currentPlayer"
      | "defaultStakeAmount"
      | "emergencyWithdraw"
      | "gameInfo"
      | "games"
      | "joinGame"
      | "ludoToken"
      | "owner"
      | "playerInfo"
      | "renounceOwnership"
      | "rollAndPlay"
      | "setDefaultStake"
      | "stake"
      | "startSquare"
      | "totalGames"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DiceRolled"
      | "GameCreated"
      | "GameEnded"
      | "GameStarted"
      | "OwnershipTransferred"
      | "PlayerJoined"
      | "PlayerStaked"
      | "TokenMoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BOARD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FINAL_POSITION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HOME_PATH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKENS_PER_PLAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeGameOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ludoToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollAndPlay",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startSquare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "BOARD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FINAL_POSITION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HOME_PATH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKENS_PER_PLAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeGameOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ludoToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollAndPlay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSquare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DiceRolledEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    dice: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, player: string, dice: bigint];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    dice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameId: BigNumberish, stake: BigNumberish];
  export type OutputTuple = [gameId: bigint, stake: bigint];
  export interface OutputObject {
    gameId: bigint;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    prize: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, winner: string, prize: bigint];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [gameId: BigNumberish];
  export type OutputTuple = [gameId: bigint];
  export interface OutputObject {
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    name: string,
    color: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    name: string,
    color: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    name: string;
    color: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerStakedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, player: string, amount: bigint];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMovedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    tokenIndex: BigNumberish,
    fromPos: BigNumberish,
    toPos: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    tokenIndex: bigint,
    fromPos: bigint,
    toPos: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    tokenIndex: bigint;
    fromPos: bigint;
    toPos: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LudoGame extends BaseContract {
  connect(runner?: ContractRunner | null): LudoGame;
  waitForDeployment(): Promise<this>;

  interface: LudoGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOARD_SIZE: TypedContractMethod<[], [bigint], "view">;

  FINAL_POSITION: TypedContractMethod<[], [bigint], "view">;

  HOME_PATH_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  TOKENS_PER_PLAYER: TypedContractMethod<[], [bigint], "view">;

  activeGameOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createGame: TypedContractMethod<[stake: BigNumberish], [void], "nonpayable">;

  currentPlayer: TypedContractMethod<[gameId: BigNumberish], [string], "view">;

  defaultStakeAmount: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  gameInfo: TypedContractMethod<
    [gameId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint, string, bigint]],
    "view"
  >;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        id: bigint;
        playerCount: bigint;
        currentTurnIndex: bigint;
        stakeAmount: bigint;
        prizePool: bigint;
        state: bigint;
        winner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  joinGame: TypedContractMethod<
    [gameId: BigNumberish, name: string, color: BigNumberish],
    [void],
    "nonpayable"
  >;

  ludoToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  playerInfo: TypedContractMethod<
    [gameId: BigNumberish, idx: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        [bigint, bigint, bigint, bigint],
        boolean
      ]
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rollAndPlay: TypedContractMethod<
    [gameId: BigNumberish, tokenIdx: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultStake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  startSquare: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  totalGames: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOARD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FINAL_POSITION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HOME_PATH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKENS_PER_PLAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeGameOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[stake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentPlayer"
  ): TypedContractMethod<[gameId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "defaultStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [[bigint, bigint, bigint, bigint, bigint, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, string, bigint] & {
        id: bigint;
        playerCount: bigint;
        currentTurnIndex: bigint;
        stakeAmount: bigint;
        prizePool: bigint;
        state: bigint;
        winner: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [gameId: BigNumberish, name: string, color: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ludoToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerInfo"
  ): TypedContractMethod<
    [gameId: BigNumberish, idx: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        [bigint, bigint, bigint, bigint],
        boolean
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rollAndPlay"
  ): TypedContractMethod<
    [gameId: BigNumberish, tokenIdx: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultStake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSquare"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalGames"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DiceRolled"
  ): TypedContractEvent<
    DiceRolledEvent.InputTuple,
    DiceRolledEvent.OutputTuple,
    DiceRolledEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerStaked"
  ): TypedContractEvent<
    PlayerStakedEvent.InputTuple,
    PlayerStakedEvent.OutputTuple,
    PlayerStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMoved"
  ): TypedContractEvent<
    TokenMovedEvent.InputTuple,
    TokenMovedEvent.OutputTuple,
    TokenMovedEvent.OutputObject
  >;

  filters: {
    "DiceRolled(uint256,address,uint256)": TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;
    DiceRolled: TypedContractEvent<
      DiceRolledEvent.InputTuple,
      DiceRolledEvent.OutputTuple,
      DiceRolledEvent.OutputObject
    >;

    "GameCreated(uint256,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameEnded(uint256,address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted(uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlayerJoined(uint256,address,string,uint8)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PlayerStaked(uint256,address,uint256)": TypedContractEvent<
      PlayerStakedEvent.InputTuple,
      PlayerStakedEvent.OutputTuple,
      PlayerStakedEvent.OutputObject
    >;
    PlayerStaked: TypedContractEvent<
      PlayerStakedEvent.InputTuple,
      PlayerStakedEvent.OutputTuple,
      PlayerStakedEvent.OutputObject
    >;

    "TokenMoved(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      TokenMovedEvent.InputTuple,
      TokenMovedEvent.OutputTuple,
      TokenMovedEvent.OutputObject
    >;
    TokenMoved: TypedContractEvent<
      TokenMovedEvent.InputTuple,
      TokenMovedEvent.OutputTuple,
      TokenMovedEvent.OutputObject
    >;
  };
}
