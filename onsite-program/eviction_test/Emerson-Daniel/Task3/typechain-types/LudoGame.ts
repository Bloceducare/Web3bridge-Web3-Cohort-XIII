/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LudoGameInterface extends utils.Interface {
  functions: {
    "BOARD_SIZE()": FunctionFragment;
    "MAX_PLAYERS()": FunctionFragment;
    "STAKE_AMOUNT()": FunctionFragment;
    "WINNING_POSITION()": FunctionFragment;
    "colorTaken(uint8)": FunctionFragment;
    "currentPlayerIndex()": FunctionFragment;
    "gameState()": FunctionFragment;
    "gameToken()": FunctionFragment;
    "getCurrentPlayer()": FunctionFragment;
    "getGameInfo()": FunctionFragment;
    "getPlayerInfo(address)": FunctionFragment;
    "playerAddresses(uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "registerPlayer(string,uint8)": FunctionFragment;
    "resetGame()": FunctionFragment;
    "rollDice()": FunctionFragment;
    "stakeTokens()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "winner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BOARD_SIZE"
      | "MAX_PLAYERS"
      | "STAKE_AMOUNT"
      | "WINNING_POSITION"
      | "colorTaken"
      | "currentPlayerIndex"
      | "gameState"
      | "gameToken"
      | "getCurrentPlayer"
      | "getGameInfo"
      | "getPlayerInfo"
      | "playerAddresses"
      | "players"
      | "registerPlayer"
      | "resetGame"
      | "rollDice"
      | "stakeTokens"
      | "totalStaked"
      | "winner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BOARD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WINNING_POSITION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "colorTaken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameState", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPlayer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "resetGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "rollDice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BOARD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WINNING_POSITION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "colorTaken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollDice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "DiceRolled(address,uint256)": EventFragment;
    "GameStarted()": EventFragment;
    "GameWon(address,uint256)": EventFragment;
    "PlayerMoved(address,uint256)": EventFragment;
    "PlayerRegistered(address,string,uint8)": EventFragment;
    "PlayerStaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiceRolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameWon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerStaked"): EventFragment;
}

export interface DiceRolledEventObject {
  player: string;
  diceValue: BigNumber;
}
export type DiceRolledEvent = TypedEvent<
  [string, BigNumber],
  DiceRolledEventObject
>;

export type DiceRolledEventFilter = TypedEventFilter<DiceRolledEvent>;

export interface GameStartedEventObject {}
export type GameStartedEvent = TypedEvent<[], GameStartedEventObject>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface GameWonEventObject {
  winner: string;
  prize: BigNumber;
}
export type GameWonEvent = TypedEvent<[string, BigNumber], GameWonEventObject>;

export type GameWonEventFilter = TypedEventFilter<GameWonEvent>;

export interface PlayerMovedEventObject {
  player: string;
  newPosition: BigNumber;
}
export type PlayerMovedEvent = TypedEvent<
  [string, BigNumber],
  PlayerMovedEventObject
>;

export type PlayerMovedEventFilter = TypedEventFilter<PlayerMovedEvent>;

export interface PlayerRegisteredEventObject {
  player: string;
  name: string;
  color: number;
}
export type PlayerRegisteredEvent = TypedEvent<
  [string, string, number],
  PlayerRegisteredEventObject
>;

export type PlayerRegisteredEventFilter =
  TypedEventFilter<PlayerRegisteredEvent>;

export interface PlayerStakedEventObject {
  player: string;
  amount: BigNumber;
}
export type PlayerStakedEvent = TypedEvent<
  [string, BigNumber],
  PlayerStakedEventObject
>;

export type PlayerStakedEventFilter = TypedEventFilter<PlayerStakedEvent>;

export interface LudoGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LudoGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOARD_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PLAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WINNING_POSITION(overrides?: CallOverrides): Promise<[BigNumber]>;

    colorTaken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameState(overrides?: CallOverrides): Promise<[number]>;

    gameToken(overrides?: CallOverrides): Promise<[string]>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<[string]>;

    getGameInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, string] & {
        state: number;
        playersCount: BigNumber;
        stakedAmount: BigNumber;
        currentPlayer: string;
        gameWinner: string;
      }
    >;

    getPlayerInfo(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, boolean, boolean] & {
        name: string;
        color: number;
        score: BigNumber;
        position: BigNumber;
        isRegistered: boolean;
        hasStaked: boolean;
      }
    >;

    playerAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean] & {
        name: string;
        playerAddress: string;
        color: number;
        score: BigNumber;
        position: BigNumber;
        isRegistered: boolean;
        hasStaked: boolean;
      }
    >;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollDice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    winner(overrides?: CallOverrides): Promise<[string]>;
  };

  BOARD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  WINNING_POSITION(overrides?: CallOverrides): Promise<BigNumber>;

  colorTaken(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

  gameState(overrides?: CallOverrides): Promise<number>;

  gameToken(overrides?: CallOverrides): Promise<string>;

  getCurrentPlayer(overrides?: CallOverrides): Promise<string>;

  getGameInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, string, string] & {
      state: number;
      playersCount: BigNumber;
      stakedAmount: BigNumber;
      currentPlayer: string;
      gameWinner: string;
    }
  >;

  getPlayerInfo(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, boolean, boolean] & {
      name: string;
      color: number;
      score: BigNumber;
      position: BigNumber;
      isRegistered: boolean;
      hasStaked: boolean;
    }
  >;

  playerAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  players(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber, BigNumber, boolean, boolean] & {
      name: string;
      playerAddress: string;
      color: number;
      score: BigNumber;
      position: BigNumber;
      isRegistered: boolean;
      hasStaked: boolean;
    }
  >;

  registerPlayer(
    _name: PromiseOrValue<string>,
    _color: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollDice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  winner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BOARD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    WINNING_POSITION(overrides?: CallOverrides): Promise<BigNumber>;

    colorTaken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

    gameState(overrides?: CallOverrides): Promise<number>;

    gameToken(overrides?: CallOverrides): Promise<string>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<string>;

    getGameInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, string, string] & {
        state: number;
        playersCount: BigNumber;
        stakedAmount: BigNumber;
        currentPlayer: string;
        gameWinner: string;
      }
    >;

    getPlayerInfo(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, boolean, boolean] & {
        name: string;
        color: number;
        score: BigNumber;
        position: BigNumber;
        isRegistered: boolean;
        hasStaked: boolean;
      }
    >;

    playerAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber, BigNumber, boolean, boolean] & {
        name: string;
        playerAddress: string;
        color: number;
        score: BigNumber;
        position: BigNumber;
        isRegistered: boolean;
        hasStaked: boolean;
      }
    >;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetGame(overrides?: CallOverrides): Promise<void>;

    rollDice(overrides?: CallOverrides): Promise<BigNumber>;

    stakeTokens(overrides?: CallOverrides): Promise<void>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DiceRolled(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      diceValue?: null
    ): DiceRolledEventFilter;
    DiceRolled(
      player?: PromiseOrValue<string> | null,
      diceValue?: null
    ): DiceRolledEventFilter;

    "GameStarted()"(): GameStartedEventFilter;
    GameStarted(): GameStartedEventFilter;

    "GameWon(address,uint256)"(
      winner?: PromiseOrValue<string> | null,
      prize?: null
    ): GameWonEventFilter;
    GameWon(
      winner?: PromiseOrValue<string> | null,
      prize?: null
    ): GameWonEventFilter;

    "PlayerMoved(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerMovedEventFilter;
    PlayerMoved(
      player?: PromiseOrValue<string> | null,
      newPosition?: null
    ): PlayerMovedEventFilter;

    "PlayerRegistered(address,string,uint8)"(
      player?: PromiseOrValue<string> | null,
      name?: null,
      color?: null
    ): PlayerRegisteredEventFilter;
    PlayerRegistered(
      player?: PromiseOrValue<string> | null,
      name?: null,
      color?: null
    ): PlayerRegisteredEventFilter;

    "PlayerStaked(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerStakedEventFilter;
    PlayerStaked(
      player?: PromiseOrValue<string> | null,
      amount?: null
    ): PlayerStakedEventFilter;
  };

  estimateGas: {
    BOARD_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    WINNING_POSITION(overrides?: CallOverrides): Promise<BigNumber>;

    colorTaken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

    gameState(overrides?: CallOverrides): Promise<BigNumber>;

    gameToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<BigNumber>;

    getGameInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerInfo(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollDice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BOARD_SIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PLAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WINNING_POSITION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    colorTaken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPlayerIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerInfo(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerPlayer(
      _name: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollDice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
