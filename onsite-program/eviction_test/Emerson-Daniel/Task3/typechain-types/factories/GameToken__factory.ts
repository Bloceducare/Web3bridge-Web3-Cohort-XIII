/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { GameToken, GameTokenInterface } from "../GameToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600f81526020017f4c75646f2047616d6520546f6b656e0000000000000000000000000000000000815250600090816200004a919062000443565b506040518060400160405280600381526020017f4c475400000000000000000000000000000000000000000000000000000000008152506001908162000091919062000443565b506012600260006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b5060405162001891380380620018918339818101604052810190620000e1919062000560565b600260009054906101000a900460ff16600a620000ff919062000722565b816200010c919062000773565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600354604051620001ba9190620007cf565b60405180910390a350620007ec565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200024b57607f821691505b60208210810362000261576200026062000203565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002cb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200028c565b620002d786836200028c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003246200031e6200031884620002ef565b620002f9565b620002ef565b9050919050565b6000819050919050565b620003408362000303565b620003586200034f826200032b565b84845462000299565b825550505050565b600090565b6200036f62000360565b6200037c81848462000335565b505050565b5b81811015620003a4576200039860008262000365565b60018101905062000382565b5050565b601f821115620003f357620003bd8162000267565b620003c8846200027c565b81016020851015620003d8578190505b620003f0620003e7856200027c565b83018262000381565b50505b505050565b600082821c905092915050565b60006200041860001984600802620003f8565b1980831691505092915050565b600062000433838362000405565b9150826002028217905092915050565b6200044e82620001c9565b67ffffffffffffffff8111156200046a5762000469620001d4565b5b62000476825462000232565b62000483828285620003a8565b600060209050601f831160018114620004bb5760008415620004a6578287015190505b620004b2858262000425565b86555062000522565b601f198416620004cb8662000267565b60005b82811015620004f557848901518255600182019150602085019450602081019050620004ce565b8683101562000515578489015162000511601f89168262000405565b8355505b6001600288020188555050505b505050505050565b600080fd5b6200053a81620002ef565b81146200054657600080fd5b50565b6000815190506200055a816200052f565b92915050565b6000602082840312156200057957620005786200052a565b5b6000620005898482850162000549565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200062057808604811115620005f857620005f762000592565b5b6001851615620006085780820291505b80810290506200061885620005c1565b9450620005d8565b94509492505050565b6000826200063b57600190506200070e565b816200064b57600090506200070e565b81600181146200066457600281146200066f57620006a5565b60019150506200070e565b60ff84111562000684576200068362000592565b5b8360020a9150848211156200069e576200069d62000592565b5b506200070e565b5060208310610133831016604e8410600b8410161715620006df5782820a905083811115620006d957620006d862000592565b5b6200070e565b620006ee8484846001620005ce565b9250905081840481111562000708576200070762000592565b5b81810290505b9392505050565b600060ff82169050919050565b60006200072f82620002ef565b91506200073c8362000715565b92506200076b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000629565b905092915050565b60006200078082620002ef565b91506200078d83620002ef565b92508282026200079d81620002ef565b91508282048414831517620007b757620007b662000592565b5b5092915050565b620007c981620002ef565b82525050565b6000602082019050620007e66000830184620007be565b92915050565b61109580620007fc6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610bd2565b60405180910390f35b6100db60048036038101906100d69190610c8d565b6102b5565b6040516100e89190610ce8565b60405180910390f35b6100f96103a7565b6040516101069190610d12565b60405180910390f35b61012960048036038101906101249190610d2d565b6103ad565b6040516101369190610ce8565b60405180910390f35b61014761070e565b6040516101549190610d9c565b60405180910390f35b61017760048036038101906101729190610c8d565b610721565b005b610193600480360381019061018e9190610db7565b610869565b6040516101a09190610d12565b60405180910390f35b6101b1610881565b6040516101be9190610bd2565b60405180910390f35b6101e160048036038101906101dc9190610c8d565b61090f565b6040516101ee9190610ce8565b60405180910390f35b610211600480360381019061020c9190610de4565b610b1d565b60405161021e9190610d12565b60405180910390f35b6000805461023490610e53565b80601f016020809104026020016040519081016040528092919081815260200182805461026090610e53565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103959190610d12565b60405180910390a36001905092915050565b60035481565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042890610ed0565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610f3c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361055f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055690610fa8565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ae9190610ff7565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610604919061102b565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106979190610ff7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106fb9190610d12565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610790576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078790610fa8565b60405180910390fd5b80600360008282546107a2919061102b565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107f8919061102b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161085d9190610d12565b60405180910390a35050565b60046020528060005260406000206000915090505481565b6001805461088e90610e53565b80601f01602080910402602001604051908101604052809291908181526020018280546108ba90610e53565b80156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098a90610ed0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990610fa8565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a519190610ff7565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610aa7919061102b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b0b9190610d12565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b7c578082015181840152602081019050610b61565b60008484015250505050565b6000601f19601f8301169050919050565b6000610ba482610b42565b610bae8185610b4d565b9350610bbe818560208601610b5e565b610bc781610b88565b840191505092915050565b60006020820190508181036000830152610bec8184610b99565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c2482610bf9565b9050919050565b610c3481610c19565b8114610c3f57600080fd5b50565b600081359050610c5181610c2b565b92915050565b6000819050919050565b610c6a81610c57565b8114610c7557600080fd5b50565b600081359050610c8781610c61565b92915050565b60008060408385031215610ca457610ca3610bf4565b5b6000610cb285828601610c42565b9250506020610cc385828601610c78565b9150509250929050565b60008115159050919050565b610ce281610ccd565b82525050565b6000602082019050610cfd6000830184610cd9565b92915050565b610d0c81610c57565b82525050565b6000602082019050610d276000830184610d03565b92915050565b600080600060608486031215610d4657610d45610bf4565b5b6000610d5486828701610c42565b9350506020610d6586828701610c42565b9250506040610d7686828701610c78565b9150509250925092565b600060ff82169050919050565b610d9681610d80565b82525050565b6000602082019050610db16000830184610d8d565b92915050565b600060208284031215610dcd57610dcc610bf4565b5b6000610ddb84828501610c42565b91505092915050565b60008060408385031215610dfb57610dfa610bf4565b5b6000610e0985828601610c42565b9250506020610e1a85828601610c42565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e6b57607f821691505b602082108103610e7e57610e7d610e24565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610eba601483610b4d565b9150610ec582610e84565b602082019050919050565b60006020820190508181036000830152610ee981610ead565b9050919050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000610f26601683610b4d565b9150610f3182610ef0565b602082019050919050565b60006020820190508181036000830152610f5581610f19565b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000610f92600f83610b4d565b9150610f9d82610f5c565b602082019050919050565b60006020820190508181036000830152610fc181610f85565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061100282610c57565b915061100d83610c57565b925082820390508181111561102557611024610fc8565b5b92915050565b600061103682610c57565b915061104183610c57565b925082820190508082111561105957611058610fc8565b5b9291505056fea2646970667358221220c9778734f0e5fdca4236aef39c323d91f4ca979d9cee2614890cb956ce79a4df64736f6c63430008180033";

type GameTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GameTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GameToken__factory extends ContractFactory {
  constructor(...args: GameTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GameToken> {
    return super.deploy(_initialSupply, overrides || {}) as Promise<GameToken>;
  }
  override getDeployTransaction(
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_initialSupply, overrides || {});
  }
  override attach(address: string): GameToken {
    return super.attach(address) as GameToken;
  }
  override connect(signer: Signer): GameToken__factory {
    return super.connect(signer) as GameToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GameTokenInterface {
    return new utils.Interface(_abi) as GameTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GameToken {
    return new Contract(address, _abi, signerOrProvider) as GameToken;
  }
}
