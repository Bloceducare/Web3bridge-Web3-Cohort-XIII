{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-5da9b317e4d971d4b1135aa2f295a0e6292aa640",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Lottery.sol": "project/contracts/Lottery.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/interfaces/ILottery.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface ILottery {\n    event PlayerJoined(address indexed player);\n    event WinnerSelected(address indexed winner, uint256 prize);\n\n    function join() external payable;\n    function getPlayers() external view returns (address[] memory);\n    function getWinner() external view returns (address);\n    function getPrizePool() external view returns (uint256);\n    function getEntryFee() external view returns (uint256);\n    function getPlayerCount() external view returns (uint256);\n}"
      },
      "project/contracts/interfaces/IVRFCoordinatorV2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IVRFCoordinatorV2 {\n    function requestRandomWords(\n        bytes32 keyHash,\n        uint64 subId,\n        uint16 minimumRequestConfirmations,\n        uint32 callbackGasLimit,\n        uint32 numWords\n    ) external returns (uint256 requestId);\n}"
      },
      "project/contracts/libraries/Errors.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Errors {\n    error IncorrectFee(uint256 required, uint256 sent);\n    error AlreadyEntered();\n    error NotEnoughPlayers();\n    error NoPlayers();\n    error LotteryClosed();\n    error RandomnessPending();\n    error OnlyAdmin();\n    error TransferFailed();\n}"
      },
      "project/contracts/Lottery.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILottery.sol\";\nimport \"./interfaces/IVRFCoordinatorV2.sol\";\nimport \"./libraries/Errors.sol\";\n\ncontract Lottery is ReentrancyGuard, Ownable, ILottery {\n    uint256 public constant MAX_PLAYERS = 10;\n    uint256 public immutable entryFee;\n    address[] public players;\n    address public winner;\n    bool public isRandomnessPending;\n\n    IVRFCoordinatorV2 public vrfCoordinator;\n    bytes32 public keyHash;\n    uint64 public subscriptionId;\n\n    mapping(uint256 => bool) public requestFulfilled;\n\n    constructor(\n        address _vrfCoordinator,\n        uint64 _subscriptionId,\n        bytes32 _keyHash,\n        uint256 _entryFee\n    ) Ownable(msg.sender) {\n        vrfCoordinator = IVRFCoordinatorV2(_vrfCoordinator);\n        subscriptionId = _subscriptionId;\n        keyHash = _keyHash;\n        entryFee = _entryFee;\n    }\n\n    function join() external payable override nonReentrant {\n        if (msg.value != entryFee) revert Errors.IncorrectFee(entryFee, msg.value);\n        if (players.length >= MAX_PLAYERS) revert Errors.LotteryClosed();\n        if (isRandomnessPending) revert Errors.RandomnessPending();\n\n        for (uint256 i = 0; i < players.length; i++) {\n            if (players[i] == msg.sender) revert Errors.AlreadyEntered();\n        }\n\n        players.push(msg.sender);\n        emit PlayerJoined(msg.sender);\n\n        if (players.length == MAX_PLAYERS) {\n            _requestRandomness();\n        }\n    }\n\n    function _requestRandomness() internal {\n        isRandomnessPending = true;\n        uint256 requestId = vrfCoordinator.requestRandomWords(\n            keyHash,\n            subscriptionId,\n            3, // minimumConfirmations\n            200000, // callbackGasLimit\n            1 // numWords\n        );\n        requestFulfilled[requestId] = false;\n    }\n\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n        if (msg.sender != address(vrfCoordinator)) revert Errors.OnlyAdmin(); // Only VRF can call\n        if (requestFulfilled[requestId]) revert Errors.RandomnessPending(); // Already fulfilled\n\n        requestFulfilled[requestId] = true;\n        isRandomnessPending = false;\n\n        uint256 random = randomWords[0] % MAX_PLAYERS;\n        winner = players[random];\n\n        uint256 prize = address(this).balance;\n        (bool success, ) = winner.call{value: prize}(\"\");\n        if (!success) revert Errors.TransferFailed();\n\n        emit WinnerSelected(winner, prize);\n\n        // Reset for next round\n        delete players;\n        winner = address(0);\n    }\n\n    function getPlayers() external view override returns (address[] memory) {\n        return players;\n    }\n\n    function getWinner() external view override returns (address) {\n        return winner;\n    }\n\n    function getPrizePool() external view override returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getEntryFee() external view override returns (uint256) {\n        return entryFee;\n    }\n\n    function getPlayerCount() external view override returns (uint256) {\n        return players.length;\n    }\n}"
      }
    }
  }
}