/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { TokenA, TokenAInterface } from "../TokenA";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161161438038061161483398181016040528101906100329190610181565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a610081919061031d565b8161008c9190610368565b600081905550600054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60005460405161013891906103b9565b60405180910390a3506103d4565b600080fd5b6000819050919050565b61015e8161014b565b811461016957600080fd5b50565b60008151905061017b81610155565b92915050565b60006020828403121561019757610196610146565b5b60006101a58482850161016c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610234578086048111156102105761020f6101ae565b5b600185161561021f5780820291505b808102905061022d856101dd565b94506101f4565b94509492505050565b60008261024d5760019050610309565b8161025b5760009050610309565b8160018114610271576002811461027b576102aa565b6001915050610309565b60ff84111561028d5761028c6101ae565b5b8360020a9150848211156102a4576102a36101ae565b5b50610309565b5060208310610133831016604e8410600b84101617156102df5782820a9050838111156102da576102d96101ae565b5b610309565b6102ec84848460016101ea565b92509050818404811115610303576103026101ae565b5b81810290505b9392505050565b600060ff82169050919050565b60006103288261014b565b915061033383610310565b92506103607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461023d565b905092915050565b60006103738261014b565b915061037e8361014b565b925082820261038c8161014b565b915082820484148315176103a3576103a26101ae565b5b5092915050565b6103b38161014b565b82525050565b60006020820190506103ce60008301846103aa565b92915050565b611231806103e36000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c5780639dc29fac116100665780639dc29fac14610216578063a9059cbb14610232578063dd62ed3e14610262578063f2fde38b14610292576100cf565b806370a08231146101aa5780638da5cb5b146101da57806395d89b41146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce5671461017057806340c10f191461018e575b600080fd5b6100dc6102ae565b6040516100e99190610e7c565b60405180910390f35b61010c60048036038101906101079190610f37565b6102e7565b6040516101199190610f92565b60405180910390f35b61012a61043e565b6040516101379190610fbc565b60405180910390f35b61015a60048036038101906101559190610fd7565b610447565b6040516101679190610f92565b60405180910390f35b61017861078c565b6040516101859190611046565b60405180910390f35b6101a860048036038101906101a39190610f37565b610791565b005b6101c460048036038101906101bf9190611061565b610956565b6040516101d19190610fbc565b60405180910390f35b6101e261099f565b6040516101ef919061109d565b60405180910390f35b6102006109c5565b60405161020d9190610e7c565b60405180910390f35b610230600480360381019061022b9190610f37565b6109fe565b005b61024c60048036038101906102479190610f37565b610a39565b6040516102599190610f92565b60405180910390f35b61027c600480360381019061027791906110b8565b610c34565b6040516102899190610fbc565b60405180910390f35b6102ac60048036038101906102a79190611061565b610cbb565b005b6040518060400160405280600f81526020017f5374616b696e6720546f6b656e2041000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361034e576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161042c9190610fbc565b60405180910390a36001905092915050565b60008054905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104ae576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610527576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105dd576040517f13be252b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461062c9190611127565b9250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610682919061115b565b9250508190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107159190611127565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107799190610fbc565b60405180910390a3600190509392505050565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610818576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361087e576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008082825461088f919061115b565b9250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e5919061115b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161094a9190610fbc565b60405180910390a35050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600481526020017f53544b410000000000000000000000000000000000000000000000000000000081525081565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a30906111db565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aa0576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b19576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b689190611127565b9250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bbe919061115b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c229190610fbc565b60405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d42576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610da8576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e26578082015181840152602081019050610e0b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e4e82610dec565b610e588185610df7565b9350610e68818560208601610e08565b610e7181610e32565b840191505092915050565b60006020820190508181036000830152610e968184610e43565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ece82610ea3565b9050919050565b610ede81610ec3565b8114610ee957600080fd5b50565b600081359050610efb81610ed5565b92915050565b6000819050919050565b610f1481610f01565b8114610f1f57600080fd5b50565b600081359050610f3181610f0b565b92915050565b60008060408385031215610f4e57610f4d610e9e565b5b6000610f5c85828601610eec565b9250506020610f6d85828601610f22565b9150509250929050565b60008115159050919050565b610f8c81610f77565b82525050565b6000602082019050610fa76000830184610f83565b92915050565b610fb681610f01565b82525050565b6000602082019050610fd16000830184610fad565b92915050565b600080600060608486031215610ff057610fef610e9e565b5b6000610ffe86828701610eec565b935050602061100f86828701610eec565b925050604061102086828701610f22565b9150509250925092565b600060ff82169050919050565b6110408161102a565b82525050565b600060208201905061105b6000830184611037565b92915050565b60006020828403121561107757611076610e9e565b5b600061108584828501610eec565b91505092915050565b61109781610ec3565b82525050565b60006020820190506110b2600083018461108e565b92915050565b600080604083850312156110cf576110ce610e9e565b5b60006110dd85828601610eec565b92505060206110ee85828601610eec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113282610f01565b915061113d83610f01565b9250828203905081811115611155576111546110f8565b5b92915050565b600061116682610f01565b915061117183610f01565b9250828201905080821115611189576111886110f8565b5b92915050565b7f546f6b656e413a206275726e206e6f7420696d706c656d656e74656400000000600082015250565b60006111c5601c83610df7565b91506111d08261118f565b602082019050919050565b600060208201905081810360008301526111f4816111b8565b905091905056fea2646970667358221220851731c137c92210cde4ddf4b059e4eba15488cdfd6dd9a6760e3a4ff8d8251b64736f6c634300081c0033";

type TokenAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenA__factory extends ContractFactory {
  constructor(...args: TokenAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_initialSupply, overrides || {});
  }
  override deploy(
    _initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_initialSupply, overrides || {}) as Promise<
      TokenA & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenA__factory {
    return super.connect(runner) as TokenA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenAInterface {
    return new Interface(_abi) as TokenAInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TokenA {
    return new Contract(address, _abi, runner) as unknown as TokenA;
  }
}
