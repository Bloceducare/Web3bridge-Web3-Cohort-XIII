/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StakingFactory {
  export type StakingSystemStruct = {
    tokenA: AddressLike;
    tokenB: AddressLike;
    stakingContract: AddressLike;
    lockPeriod: BigNumberish;
    deployedAt: BigNumberish;
  };

  export type StakingSystemStructOutput = [
    tokenA: string,
    tokenB: string,
    stakingContract: string,
    lockPeriod: bigint,
    deployedAt: bigint
  ] & {
    tokenA: string;
    tokenB: string;
    stakingContract: string;
    lockPeriod: bigint;
    deployedAt: bigint;
  };
}

export interface StakingFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allSystems"
      | "deployStakingSystem"
      | "deployedSystems"
      | "getAllDeployments"
      | "getDeploymentCount"
      | "getUserDeployments"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "StakingSystemDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "allSystems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployStakingSystem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedSystems",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDeployments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeploymentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeployments",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allSystems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployStakingSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedSystems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDeployments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeploymentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeployments",
    data: BytesLike
  ): Result;
}

export namespace StakingSystemDeployedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    stakingContract: AddressLike,
    lockPeriod: BigNumberish
  ];
  export type OutputTuple = [
    tokenA: string,
    tokenB: string,
    stakingContract: string,
    lockPeriod: bigint
  ];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    stakingContract: string;
    lockPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingFactory extends BaseContract {
  connect(runner?: ContractRunner | null): StakingFactory;
  waitForDeployment(): Promise<this>;

  interface: StakingFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allSystems: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
        lockPeriod: bigint;
        deployedAt: bigint;
      }
    ],
    "view"
  >;

  deployStakingSystem: TypedContractMethod<
    [tokenAInitialSupply: BigNumberish, lockPeriodInDays: BigNumberish],
    [
      [string, string, string] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
      }
    ],
    "nonpayable"
  >;

  deployedSystems: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
        lockPeriod: bigint;
        deployedAt: bigint;
      }
    ],
    "view"
  >;

  getAllDeployments: TypedContractMethod<
    [],
    [StakingFactory.StakingSystemStructOutput[]],
    "view"
  >;

  getDeploymentCount: TypedContractMethod<[], [bigint], "view">;

  getUserDeployments: TypedContractMethod<
    [user: AddressLike],
    [StakingFactory.StakingSystemStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allSystems"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
        lockPeriod: bigint;
        deployedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deployStakingSystem"
  ): TypedContractMethod<
    [tokenAInitialSupply: BigNumberish, lockPeriodInDays: BigNumberish],
    [
      [string, string, string] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedSystems"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        tokenA: string;
        tokenB: string;
        stakingContract: string;
        lockPeriod: bigint;
        deployedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllDeployments"
  ): TypedContractMethod<
    [],
    [StakingFactory.StakingSystemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeploymentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserDeployments"
  ): TypedContractMethod<
    [user: AddressLike],
    [StakingFactory.StakingSystemStructOutput[]],
    "view"
  >;

  getEvent(
    key: "StakingSystemDeployed"
  ): TypedContractEvent<
    StakingSystemDeployedEvent.InputTuple,
    StakingSystemDeployedEvent.OutputTuple,
    StakingSystemDeployedEvent.OutputObject
  >;

  filters: {
    "StakingSystemDeployed(address,address,address,uint256)": TypedContractEvent<
      StakingSystemDeployedEvent.InputTuple,
      StakingSystemDeployedEvent.OutputTuple,
      StakingSystemDeployedEvent.OutputObject
    >;
    StakingSystemDeployed: TypedContractEvent<
      StakingSystemDeployedEvent.InputTuple,
      StakingSystemDeployedEvent.OutputTuple,
      StakingSystemDeployedEvent.OutputObject
    >;
  };
}
