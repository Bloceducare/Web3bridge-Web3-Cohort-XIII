/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ENTRY_FEE"
      | "MAX_PLAYERS"
      | "enterLottery"
      | "getPlayerCount"
      | "getPlayers"
      | "getPrizePool"
      | "hasEntered"
      | "isPlayerEntered"
      | "lotteryRound"
      | "players"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LotteryReset" | "PlayerJoined" | "WinnerSelected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "ENTRY_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterLottery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasEntered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerEntered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ENTRY_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasEntered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerEntered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
}

export namespace LotteryResetEvent {
  export type InputTuple = [newRound: BigNumberish];
  export type OutputTuple = [newRound: bigint];
  export interface OutputObject {
    newRound: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [player: AddressLike, round: BigNumberish];
  export type OutputTuple = [player: string, round: bigint];
  export interface OutputObject {
    player: string;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [
    winner: AddressLike,
    prize: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [winner: string, prize: bigint, round: bigint];
  export interface OutputObject {
    winner: string;
    prize: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lottery extends BaseContract {
  connect(runner?: ContractRunner | null): Lottery;
  waitForDeployment(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ENTRY_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_PLAYERS: TypedContractMethod<[], [bigint], "view">;

  enterLottery: TypedContractMethod<[], [void], "payable">;

  getPlayerCount: TypedContractMethod<[], [bigint], "view">;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getPrizePool: TypedContractMethod<[], [bigint], "view">;

  hasEntered: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPlayerEntered: TypedContractMethod<
    [player: AddressLike],
    [boolean],
    "view"
  >;

  lotteryRound: TypedContractMethod<[], [bigint], "view">;

  players: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ENTRY_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PLAYERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enterLottery"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getPlayerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPrizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasEntered"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlayerEntered"
  ): TypedContractMethod<[player: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lotteryRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "LotteryReset"
  ): TypedContractEvent<
    LotteryResetEvent.InputTuple,
    LotteryResetEvent.OutputTuple,
    LotteryResetEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;

  filters: {
    "LotteryReset(uint256)": TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;
    LotteryReset: TypedContractEvent<
      LotteryResetEvent.InputTuple,
      LotteryResetEvent.OutputTuple,
      LotteryResetEvent.OutputObject
    >;

    "PlayerJoined(address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "WinnerSelected(address,uint256,uint256)": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
  };
}
