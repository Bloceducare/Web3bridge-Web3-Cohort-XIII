/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "AlreadyEntered",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "sent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
    ],
    name: "InvalidEntryFee",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newRound",
        type: "uint256",
      },
    ],
    name: "LotteryReset",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
    ],
    name: "PlayerJoined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
    ],
    name: "WinnerSelected",
    type: "event",
  },
  {
    inputs: [],
    name: "ENTRY_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_PLAYERS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterLottery",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayerCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrizePool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasEntered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "isPlayerEntered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lotteryRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50610e3d8061001f6000396000f3fe6080604052600436106100915760003560e01c8063c2e5220611610059578063c2e522061461015e578063c519642614610189578063d604e29b146101b4578063f6d361cc146101f1578063f71d96cb1461021c57610091565b806324d70dea146100965780634411b3eb146100d3578063884bf67c146100fe5780638b5b9ccc14610129578063c1af578514610154575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b8919061090f565b610259565b6040516100ca9190610957565b60405180910390f35b3480156100df57600080fd5b506100e8610279565b6040516100f5919061098b565b60405180910390f35b34801561010a57600080fd5b5061011361027e565b604051610120919061098b565b60405180910390f35b34801561013557600080fd5b5061013e610286565b60405161014b9190610a64565b60405180910390f35b61015c610314565b005b34801561016a57600080fd5b50610173610519565b604051610180919061098b565b60405180910390f35b34801561019557600080fd5b5061019e610525565b6040516101ab919061098b565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061090f565b61052b565b6040516101e89190610957565b60405180910390f35b3480156101fd57600080fd5b50610206610581565b604051610213919061098b565b60405180910390f35b34801561022857600080fd5b50610243600480360381019061023e9190610ab2565b61058c565b6040516102509190610aee565b60405180910390f35b60016020528060005260406000206000915054906101000a900460ff1681565b600a81565b600047905090565b6060600080548060200260200160405190810160405280929190818152602001828054801561030a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102c0575b5050505050905090565b662386f26fc1000034146103685734662386f26fc100006040517f35a85b9f00000000000000000000000000000000000000000000000000000000815260040161035f929190610b09565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156103f757336040517fcace26950000000000000000000000000000000000000000000000000000000081526004016103ee9190610aee565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f3330a6773675f31f62070870f40379f8c6d42e3761410011a4dfc42b18043d2f6002546040516104f9919061098b565b60405180910390a2600a60008054905003610517576105166105cb565b5b565b60008080549050905090565b60025481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b662386f26fc1000081565b6000818154811061059c57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080549050424460006002546040516020016105ec9493929190610c71565b6040516020818303038152906040528051906020012060001c61060f9190610cea565b9050600080828154811061062657610625610d1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161067e90610d7b565b60006040518083038185875af1925050503d80600081146106bb576040519150601f19603f3d011682016040523d82523d6000602084013e6106c0565b606091505b50509050806106fb576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f866efae43947560fe9d0de9013bc323d5718730d5c1543261b48a7bcb0717b9383600254604051610745929190610b09565b60405180910390a261075561075b565b50505050565b60005b60008054905081101561080d5760006001600080848154811061078457610783610d1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808060010191505061075e565b5060008061081b919061086e565b6002600081548092919061082e90610dbf565b91905055507f6564d21026f38ac4bc4ef082b01864f3ae6869e139a373fdf664a27a6c6dbebb600254604051610864919061098b565b60405180910390a1565b508054600082559060005260206000209081019061088c919061088f565b50565b5b808211156108a8576000816000905550600101610890565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108dc826108b1565b9050919050565b6108ec816108d1565b81146108f757600080fd5b50565b600081359050610909816108e3565b92915050565b600060208284031215610925576109246108ac565b5b6000610933848285016108fa565b91505092915050565b60008115159050919050565b6109518161093c565b82525050565b600060208201905061096c6000830184610948565b92915050565b6000819050919050565b61098581610972565b82525050565b60006020820190506109a0600083018461097c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109db816108d1565b82525050565b60006109ed83836109d2565b60208301905092915050565b6000602082019050919050565b6000610a11826109a6565b610a1b81856109b1565b9350610a26836109c2565b8060005b83811015610a57578151610a3e88826109e1565b9750610a49836109f9565b925050600181019050610a2a565b5085935050505092915050565b60006020820190508181036000830152610a7e8184610a06565b905092915050565b610a8f81610972565b8114610a9a57600080fd5b50565b600081359050610aac81610a86565b92915050565b600060208284031215610ac857610ac76108ac565b5b6000610ad684828501610a9d565b91505092915050565b610ae8816108d1565b82525050565b6000602082019050610b036000830184610adf565b92915050565b6000604082019050610b1e600083018561097c565b610b2b602083018461097c565b9392505050565b6000819050919050565b610b4d610b4882610972565b610b32565b82525050565b600081549050919050565b600081905092915050565b60008190508160005260206000209050919050565b610b87816108d1565b82525050565b6000610b998383610b7e565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610be5610be083610ba5565b610bb2565b9050919050565b6000610bf88254610bd2565b9050919050565b6000600182019050919050565b6000610c1782610b53565b610c218185610b5e565b9350610c2c83610b69565b8060005b83811015610c6457610c4182610bec565b610c4b8882610b8d565b9750610c5683610bff565b925050600181019050610c30565b5085935050505092915050565b6000610c7d8287610b3c565b602082019150610c8d8286610b3c565b602082019150610c9d8285610c0c565b9150610ca98284610b3c565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cf582610972565b9150610d0083610972565b925082610d1057610d0f610cbb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000610d65600083610d4a565b9150610d7082610d55565b600082019050919050565b6000610d8682610d58565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dca82610972565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610dfc57610dfb610d90565b5b60018201905091905056fea264697066735822122003f0b6165fb4b67c36f009e5cb236042e7d256e4f7dd0d5b0d1f8eda2f446d1064736f6c634300081c0033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
