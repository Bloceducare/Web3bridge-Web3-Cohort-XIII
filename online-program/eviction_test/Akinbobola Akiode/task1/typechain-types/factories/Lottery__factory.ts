/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../common";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_entryFeeWei",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyEnteredThisRound",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntryFee",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
    ],
    name: "PlayerJoined",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "round",
        type: "uint256",
      },
    ],
    name: "WinnerSelected",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_PLAYERS_PER_ROUND",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterLottery",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryFeeWei",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPlayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "playersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405260405161063e38038061063e833981016040819052602091602b565b608052600180556043565b600060208284031215603c57600080fd5b5051919050565b6080516105da6100646000396000818160af01526101c401526105da6000f3fe6080604052600436106100705760003560e01c80638b5b9ccc1161004e5780638b5b9ccc146100e7578063a3f67d6d14610109578063c1af57851461011e578063f71d96cb1461012857600080fd5b806314b1e0e4146100755780635e511ba21461009d5780638a19c8bc146100d1575b600080fd5b34801561008157600080fd5b5061008a600a81565b6040519081526020015b60405180910390f35b3480156100a957600080fd5b5061008a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156100dd57600080fd5b5061008a60015481565b3480156100f357600080fd5b506100fc610160565b6040516100949190610498565b34801561011557600080fd5b5060005461008a565b6101266101c2565b005b34801561013457600080fd5b506101486101433660046104e4565b6102c8565b6040516001600160a01b039091168152602001610094565b606060008054806020026020016040519081016040528092919081815260200182805480156101b857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161019a575b5050505050905090565b7f0000000000000000000000000000000000000000000000000000000000000000341461020257604051636fe6a4c960e01b815260040160405180910390fd5b600154336000908152600260205260409020540361023357604051630b2f7ded60e21b815260040160405180910390fd5b600180543360008181526002602052604080822093909355805480850182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319168317905592549151919290917f3330a6773675f31f62070870f40379f8c6d42e3761410011a4dfc42b18043d2f9190a3600054600919016102c6576102c66102f2565b565b600081815481106102d857600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054479190610301610422565b61030b91906104fd565b905060008082815481106103215761032161051f565b600091825260209182902001546001546040518681526001600160a01b0390921693509183917f866efae43947560fe9d0de9013bc323d5718730d5c1543261b48a7bcb0717b93910160405180910390a361037d60008061045e565b60018054810190556040516000906001600160a01b0383169085908381818185875af1925050503d80600081146103d0576040519150601f19603f3d011682016040523d82523d6000602084013e6103d5565b606091505b505090508061041c5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640160405180910390fd5b50505050565b60004442600030600154604051602001610440959493929190610535565b6040516020818303038152906040528051906020012060001c905090565b508054600082559060005260206000209081019061047c919061047f565b50565b5b808211156104945760008155600101610480565b5090565b602080825282518282018190526000918401906040840190835b818110156104d95783516001600160a01b03168352602093840193909201916001016104b2565b509095945050505050565b6000602082840312156104f657600080fd5b5035919050565b60008261051a57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b858152846020820152600060408201855486600052602060002060005b828110156105795781546001600160a01b0316845260209093019260019182019101610552565b50505060609490941b6bffffffffffffffffffffffff1916845250506014820152603401939250505056fea26469706673582212203b9311170ea7dc6642e0fdec3c39a8303b261d2061abcfc1eb934c00b72d31bc64736f6c634300081c0033";

type LotteryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lottery__factory extends ContractFactory {
  constructor(...args: LotteryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _entryFeeWei: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_entryFeeWei, overrides || {});
  }
  override deploy(
    _entryFeeWei: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_entryFeeWei, overrides || {}) as Promise<
      Lottery & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Lottery__factory {
    return super.connect(runner) as Lottery__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new Interface(_abi) as LotteryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Lottery {
    return new Contract(address, _abi, runner) as unknown as Lottery;
  }
}
